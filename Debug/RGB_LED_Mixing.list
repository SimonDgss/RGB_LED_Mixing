
RGB_LED_Mixing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004768  08004768  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004768  08004768  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004768  08004768  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000010  08004780  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08004780  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c4c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bf  00000000  00000000  00029c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002bff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a2  00000000  00000000  0002c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb34  00000000  00000000  00045b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098180  00000000  00000000  000516a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  000e987c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	080046ac 	.word	0x080046ac

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	080046ac 	.word	0x080046ac

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <initSEG>:

	}
}

void initSEG(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint16_t pinportA = SEG_A_Pin;
 800083a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083e:	80fb      	strh	r3, [r7, #6]
	uint16_t pinportC = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin;
 8000840:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000844:	80bb      	strh	r3, [r7, #4]
	uint16_t pinportB = SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT1_Pin|DIGIT2_Pin|DIGIT3_Pin|DIGIT4_Pin|DIGIT5_Pin|DIGIT6_Pin|DIGIT7_Pin|DIGIT8_Pin;
 8000846:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 800084a:	807b      	strh	r3, [r7, #2]
	uint16_t pinportD = SEG_E_Pin;
 800084c:	2304      	movs	r3, #4
 800084e:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SEG_A_GPIO_Port, pinportA, GPIO_PIN_RESET);
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <initSEG+0x54>)
 8000858:	f002 fc15 	bl	8003086 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_B_GPIO_Port,pinportC , GPIO_PIN_RESET);
 800085c:	88bb      	ldrh	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <initSEG+0x58>)
 8000864:	f002 fc0f 	bl	8003086 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_E_GPIO_Port, pinportD, GPIO_PIN_RESET);
 8000868:	883b      	ldrh	r3, [r7, #0]
 800086a:	2200      	movs	r2, #0
 800086c:	4619      	mov	r1, r3
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <initSEG+0x5c>)
 8000870:	f002 fc09 	bl	8003086 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_F_GPIO_Port,pinportB , GPIO_PIN_RESET);
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <initSEG+0x60>)
 800087c:	f002 fc03 	bl	8003086 <HAL_GPIO_WritePin>

}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40010800 	.word	0x40010800
 800088c:	40011000 	.word	0x40011000
 8000890:	40011400 	.word	0x40011400
 8000894:	40010c00 	.word	0x40010c00

08000898 <printchar>:
	GPIOD->ODR = pinsegE;
	GPIOB->ODR = pinsegFGDPdig;
}

void printchar(int chara,uint16_t Pin)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	807b      	strh	r3, [r7, #2]
	int segmA =(0x01&(SevenSegmentASCII[chara-32]));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b20      	subs	r3, #32
 80008a8:	4a44      	ldr	r2, [pc, #272]	; (80009bc <printchar+0x124>)
 80008aa:	5cd3      	ldrb	r3, [r2, r3]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
	int segmB =(0x02&(SevenSegmentASCII[chara-32]))>>1;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3b20      	subs	r3, #32
 80008b6:	4a41      	ldr	r2, [pc, #260]	; (80009bc <printchar+0x124>)
 80008b8:	5cd3      	ldrb	r3, [r2, r3]
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
	int segmC =(0x04&(SevenSegmentASCII[chara-32]))>>2;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b20      	subs	r3, #32
 80008c8:	4a3c      	ldr	r2, [pc, #240]	; (80009bc <printchar+0x124>)
 80008ca:	5cd3      	ldrb	r3, [r2, r3]
 80008cc:	089b      	lsrs	r3, r3, #2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
	int segmD =(0x08&(SevenSegmentASCII[chara-32]))>>3;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b20      	subs	r3, #32
 80008da:	4a38      	ldr	r2, [pc, #224]	; (80009bc <printchar+0x124>)
 80008dc:	5cd3      	ldrb	r3, [r2, r3]
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
	int segmE =(0x10&(SevenSegmentASCII[chara-32]))>>4;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b20      	subs	r3, #32
 80008ec:	4a33      	ldr	r2, [pc, #204]	; (80009bc <printchar+0x124>)
 80008ee:	5cd3      	ldrb	r3, [r2, r3]
 80008f0:	091b      	lsrs	r3, r3, #4
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
	int segmF =(0x20&(SevenSegmentASCII[chara-32]))>>5;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3b20      	subs	r3, #32
 80008fe:	4a2f      	ldr	r2, [pc, #188]	; (80009bc <printchar+0x124>)
 8000900:	5cd3      	ldrb	r3, [r2, r3]
 8000902:	095b      	lsrs	r3, r3, #5
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	613b      	str	r3, [r7, #16]
	int segmG =(0x40&(SevenSegmentASCII[chara-32]))>>6;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b20      	subs	r3, #32
 8000910:	4a2a      	ldr	r2, [pc, #168]	; (80009bc <printchar+0x124>)
 8000912:	5cd3      	ldrb	r3, [r2, r3]
 8000914:	099b      	lsrs	r3, r3, #6
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
	int segmDP =(0x80&(SevenSegmentASCII[chara-32]))>>7;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3b20      	subs	r3, #32
 8000922:	4a26      	ldr	r2, [pc, #152]	; (80009bc <printchar+0x124>)
 8000924:	5cd3      	ldrb	r3, [r2, r3]
 8000926:	09db      	lsrs	r3, r3, #7
 8000928:	b2db      	uxtb	r3, r3
 800092a:	60bb      	str	r3, [r7, #8]
	GPIOC->ODR = GPIOC->ODR&pinsegBCD;
	GPIOA->ODR = GPIOA->ODR&pinsegA;
	GPIOD->ODR = GPIOD->ODR&pinsegE;
	GPIOB->ODR = GPIOB->ODR&pinsegFGDPdig;
	 */
	initSEG();
 800092c:	f7ff ff82 	bl	8000834 <initSEG>
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, segmA);
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	b2db      	uxtb	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <printchar+0x128>)
 800093c:	f002 fba3 	bl	8003086 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, segmB);
 8000940:	6a3b      	ldr	r3, [r7, #32]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	461a      	mov	r2, r3
 8000946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094a:	481e      	ldr	r0, [pc, #120]	; (80009c4 <printchar+0x12c>)
 800094c:	f002 fb9b 	bl	8003086 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, segmC);
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	461a      	mov	r2, r3
 8000956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095a:	481a      	ldr	r0, [pc, #104]	; (80009c4 <printchar+0x12c>)
 800095c:	f002 fb93 	bl	8003086 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, segmD);
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	b2db      	uxtb	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096a:	4816      	ldr	r0, [pc, #88]	; (80009c4 <printchar+0x12c>)
 800096c:	f002 fb8b 	bl	8003086 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, segmE);
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	461a      	mov	r2, r3
 8000976:	2104      	movs	r1, #4
 8000978:	4813      	ldr	r0, [pc, #76]	; (80009c8 <printchar+0x130>)
 800097a:	f002 fb84 	bl	8003086 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, segmF);
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	461a      	mov	r2, r3
 8000984:	2108      	movs	r1, #8
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <printchar+0x134>)
 8000988:	f002 fb7d 	bl	8003086 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, segmG);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	2110      	movs	r1, #16
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <printchar+0x134>)
 8000996:	f002 fb76 	bl	8003086 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_DP_GPIO_Port, SEG_DP_Pin, segmDP);
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	2120      	movs	r1, #32
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <printchar+0x134>)
 80009a4:	f002 fb6f 	bl	8003086 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGIT1_GPIO_Port, Pin, GPIO_PIN_SET);
 80009a8:	887b      	ldrh	r3, [r7, #2]
 80009aa:	2201      	movs	r2, #1
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <printchar+0x134>)
 80009b0:	f002 fb69 	bl	8003086 <HAL_GPIO_WritePin>
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	080046f8 	.word	0x080046f8
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40011000 	.word	0x40011000
 80009c8:	40011400 	.word	0x40011400
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <printFigures>:


void printFigures(int number,uint16_t Pin, int leading_zero)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	460b      	mov	r3, r1
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	817b      	strh	r3, [r7, #10]
	printchar(number+48,Pin);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3330      	adds	r3, #48	; 0x30
 80009e2:	897a      	ldrh	r2, [r7, #10]
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff56 	bl	8000898 <printchar>

	if(!leading_zero)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d108      	bne.n	8000a04 <printFigures+0x34>
	{
		if(number==0)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d105      	bne.n	8000a04 <printFigures+0x34>
		{
			HAL_GPIO_WritePin(GPIOB, Pin, GPIO_PIN_RESET);
 80009f8:	897b      	ldrh	r3, [r7, #10]
 80009fa:	2200      	movs	r2, #0
 80009fc:	4619      	mov	r1, r3
 80009fe:	4803      	ldr	r0, [pc, #12]	; (8000a0c <printFigures+0x3c>)
 8000a00:	f002 fb41 	bl	8003086 <HAL_GPIO_WritePin>
		}
	}
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40010c00 	.word	0x40010c00

08000a10 <affichageDig>:

void affichageDig(int position_compteur,int delai,int position, int limpos,int limneg)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	603b      	str	r3, [r7, #0]
	static int check=0;
	static int i;
	int digit[4];
	int pos=position*6;
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
	if (check!=position)
 8000a2a:	4ba0      	ldr	r3, [pc, #640]	; (8000cac <affichageDig+0x29c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d004      	beq.n	8000a3e <affichageDig+0x2e>
			i--;
 8000a34:	4b9e      	ldr	r3, [pc, #632]	; (8000cb0 <affichageDig+0x2a0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	4a9d      	ldr	r2, [pc, #628]	; (8000cb0 <affichageDig+0x2a0>)
 8000a3c:	6013      	str	r3, [r2, #0]
	switch (i){
 8000a3e:	4b9c      	ldr	r3, [pc, #624]	; (8000cb0 <affichageDig+0x2a0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	f200 8271 	bhi.w	8000f2a <affichageDig+0x51a>
 8000a48:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <affichageDig+0x40>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000b87 	.word	0x08000b87
 8000a58:	08000cc1 	.word	0x08000cc1
 8000a5c:	08000de9 	.word	0x08000de9

	case 0:
	{
		if(position_compteur==limpos+1)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d101      	bne.n	8000a6e <affichageDig+0x5e>
			position_compteur=0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]



		if(position_compteur<0)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	da0b      	bge.n	8000a8c <affichageDig+0x7c>
		{
			printchar('-', DIGIT1_Pin);
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	202d      	movs	r0, #45	; 0x2d
 8000a7a:	f7ff ff0d 	bl	8000898 <printchar>
			if(position_compteur==-(limneg+1))
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	43db      	mvns	r3, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d101      	bne.n	8000a8c <affichageDig+0x7c>
				position_compteur=0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
		}
		digit[0]=abs(position_compteur)%10;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000a92:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000a96:	4b87      	ldr	r3, [pc, #540]	; (8000cb4 <affichageDig+0x2a4>)
 8000a98:	fb83 2301 	smull	r2, r3, r3, r1
 8000a9c:	109a      	asrs	r2, r3, #2
 8000a9e:	17cb      	asrs	r3, r1, #31
 8000aa0:	1ad2      	subs	r2, r2, r3
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	1aca      	subs	r2, r1, r3
 8000aac:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ab4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	4a7d      	ldr	r2, [pc, #500]	; (8000cb4 <affichageDig+0x2a4>)
 8000abe:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac2:	1092      	asrs	r2, r2, #2
 8000ac4:	17db      	asrs	r3, r3, #31
 8000ac6:	1ad1      	subs	r1, r2, r3
 8000ac8:	4b7a      	ldr	r3, [pc, #488]	; (8000cb4 <affichageDig+0x2a4>)
 8000aca:	fb83 2301 	smull	r2, r3, r3, r1
 8000ace:	109a      	asrs	r2, r3, #2
 8000ad0:	17cb      	asrs	r3, r1, #31
 8000ad2:	1ad2      	subs	r2, r2, r3
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	1aca      	subs	r2, r1, r3
 8000ade:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ae6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	f06f 0109 	mvn.w	r1, #9
 8000af0:	fb01 f303 	mul.w	r3, r1, r3
 8000af4:	441a      	add	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	4a6f      	ldr	r2, [pc, #444]	; (8000cb8 <affichageDig+0x2a8>)
 8000afc:	fb82 1203 	smull	r1, r2, r2, r3
 8000b00:	1152      	asrs	r2, r2, #5
 8000b02:	17db      	asrs	r3, r3, #31
 8000b04:	1ad1      	subs	r1, r2, r3
 8000b06:	4b6b      	ldr	r3, [pc, #428]	; (8000cb4 <affichageDig+0x2a4>)
 8000b08:	fb83 2301 	smull	r2, r3, r3, r1
 8000b0c:	109a      	asrs	r2, r3, #2
 8000b0e:	17cb      	asrs	r3, r1, #31
 8000b10:	1ad2      	subs	r2, r2, r3
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	1aca      	subs	r2, r1, r3
 8000b1c:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b24:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000b2e:	fb01 f303 	mul.w	r3, r1, r3
 8000b32:	441a      	add	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	1ad2      	subs	r2, r2, r3
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	f06f 0109 	mvn.w	r1, #9
 8000b3e:	fb01 f303 	mul.w	r3, r1, r3
 8000b42:	4413      	add	r3, r2
 8000b44:	4a5d      	ldr	r2, [pc, #372]	; (8000cbc <affichageDig+0x2ac>)
 8000b46:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4a:	1192      	asrs	r2, r2, #6
 8000b4c:	17db      	asrs	r3, r3, #31
 8000b4e:	1ad1      	subs	r1, r2, r3
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <affichageDig+0x2a4>)
 8000b52:	fb83 2301 	smull	r2, r3, r3, r1
 8000b56:	109a      	asrs	r2, r3, #2
 8000b58:	17cb      	asrs	r3, r1, #31
 8000b5a:	1ad2      	subs	r2, r2, r3
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	1aca      	subs	r2, r1, r3
 8000b66:	623a      	str	r2, [r7, #32]
		printFigures(digit[0], DIGIT4_Pin<<pos,1);
 8000b68:	6978      	ldr	r0, [r7, #20]
 8000b6a:	2240      	movs	r2, #64	; 0x40
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	2201      	movs	r2, #1
 8000b76:	4619      	mov	r1, r3
 8000b78:	f7ff ff2a 	bl	80009d0 <printFigures>
		HAL_Delay(delai);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fdaa 	bl	80026d8 <HAL_Delay>
		break;
 8000b84:	e1d1      	b.n	8000f2a <affichageDig+0x51a>
	}
	case 1:
	{
		if(position_compteur==limpos+1)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d101      	bne.n	8000b94 <affichageDig+0x184>
			position_compteur=0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]


		if(position_compteur<0)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da0b      	bge.n	8000bb2 <affichageDig+0x1a2>
		{
			printchar('-', DIGIT1_Pin);
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	202d      	movs	r0, #45	; 0x2d
 8000ba0:	f7ff fe7a 	bl	8000898 <printchar>
			if(position_compteur==-(limneg+1))
 8000ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d101      	bne.n	8000bb2 <affichageDig+0x1a2>
				position_compteur=0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
		}
		digit[0]=abs(position_compteur)%10;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000bb8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000bbc:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <affichageDig+0x2a4>)
 8000bbe:	fb83 2301 	smull	r2, r3, r3, r1
 8000bc2:	109a      	asrs	r2, r3, #2
 8000bc4:	17cb      	asrs	r3, r1, #31
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	1aca      	subs	r2, r1, r3
 8000bd2:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bda:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	4a34      	ldr	r2, [pc, #208]	; (8000cb4 <affichageDig+0x2a4>)
 8000be4:	fb82 1203 	smull	r1, r2, r2, r3
 8000be8:	1092      	asrs	r2, r2, #2
 8000bea:	17db      	asrs	r3, r3, #31
 8000bec:	1ad1      	subs	r1, r2, r3
 8000bee:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <affichageDig+0x2a4>)
 8000bf0:	fb83 2301 	smull	r2, r3, r3, r1
 8000bf4:	109a      	asrs	r2, r3, #2
 8000bf6:	17cb      	asrs	r3, r1, #31
 8000bf8:	1ad2      	subs	r2, r2, r3
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	1aca      	subs	r2, r1, r3
 8000c04:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c0c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	f06f 0109 	mvn.w	r1, #9
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	441a      	add	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <affichageDig+0x2a8>)
 8000c22:	fb82 1203 	smull	r1, r2, r2, r3
 8000c26:	1152      	asrs	r2, r2, #5
 8000c28:	17db      	asrs	r3, r3, #31
 8000c2a:	1ad1      	subs	r1, r2, r3
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <affichageDig+0x2a4>)
 8000c2e:	fb83 2301 	smull	r2, r3, r3, r1
 8000c32:	109a      	asrs	r2, r3, #2
 8000c34:	17cb      	asrs	r3, r1, #31
 8000c36:	1ad2      	subs	r2, r2, r3
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	1aca      	subs	r2, r1, r3
 8000c42:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c4a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000c54:	fb01 f303 	mul.w	r3, r1, r3
 8000c58:	441a      	add	r2, r3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	1ad2      	subs	r2, r2, r3
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	f06f 0109 	mvn.w	r1, #9
 8000c64:	fb01 f303 	mul.w	r3, r1, r3
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <affichageDig+0x2ac>)
 8000c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c70:	1192      	asrs	r2, r2, #6
 8000c72:	17db      	asrs	r3, r3, #31
 8000c74:	1ad1      	subs	r1, r2, r3
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <affichageDig+0x2a4>)
 8000c78:	fb83 2301 	smull	r2, r3, r3, r1
 8000c7c:	109a      	asrs	r2, r3, #2
 8000c7e:	17cb      	asrs	r3, r1, #31
 8000c80:	1ad2      	subs	r2, r2, r3
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	1aca      	subs	r2, r1, r3
 8000c8c:	623a      	str	r2, [r7, #32]
		printFigures(digit[1], DIGIT3_Pin<<pos,1);
 8000c8e:	69b8      	ldr	r0, [r7, #24]
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f7ff fe97 	bl	80009d0 <printFigures>
		HAL_Delay(delai);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fd17 	bl	80026d8 <HAL_Delay>
		break;
 8000caa:	e13e      	b.n	8000f2a <affichageDig+0x51a>
 8000cac:	2000002c 	.word	0x2000002c
 8000cb0:	20000030 	.word	0x20000030
 8000cb4:	66666667 	.word	0x66666667
 8000cb8:	51eb851f 	.word	0x51eb851f
 8000cbc:	10624dd3 	.word	0x10624dd3
	}
	case 2:
	{
		if(position_compteur==limpos+1)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d101      	bne.n	8000cce <affichageDig+0x2be>
			position_compteur=0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]

		if(position_compteur<0)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da0b      	bge.n	8000cec <affichageDig+0x2dc>
		{
			printchar('-', DIGIT1_Pin);
 8000cd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd8:	202d      	movs	r0, #45	; 0x2d
 8000cda:	f7ff fddd 	bl	8000898 <printchar>
			if(position_compteur==-(limneg+1))
 8000cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d101      	bne.n	8000cec <affichageDig+0x2dc>
				position_compteur=0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
		}
		digit[0]=abs(position_compteur)%10;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000cf2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000cf6:	4b91      	ldr	r3, [pc, #580]	; (8000f3c <affichageDig+0x52c>)
 8000cf8:	fb83 2301 	smull	r2, r3, r3, r1
 8000cfc:	109a      	asrs	r2, r3, #2
 8000cfe:	17cb      	asrs	r3, r1, #31
 8000d00:	1ad2      	subs	r2, r2, r3
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	1aca      	subs	r2, r1, r3
 8000d0c:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d14:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	4a87      	ldr	r2, [pc, #540]	; (8000f3c <affichageDig+0x52c>)
 8000d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d22:	1092      	asrs	r2, r2, #2
 8000d24:	17db      	asrs	r3, r3, #31
 8000d26:	1ad1      	subs	r1, r2, r3
 8000d28:	4b84      	ldr	r3, [pc, #528]	; (8000f3c <affichageDig+0x52c>)
 8000d2a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d2e:	109a      	asrs	r2, r3, #2
 8000d30:	17cb      	asrs	r3, r1, #31
 8000d32:	1ad2      	subs	r2, r2, r3
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	1aca      	subs	r2, r1, r3
 8000d3e:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d46:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	f06f 0109 	mvn.w	r1, #9
 8000d50:	fb01 f303 	mul.w	r3, r1, r3
 8000d54:	441a      	add	r2, r3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	4a79      	ldr	r2, [pc, #484]	; (8000f40 <affichageDig+0x530>)
 8000d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d60:	1152      	asrs	r2, r2, #5
 8000d62:	17db      	asrs	r3, r3, #31
 8000d64:	1ad1      	subs	r1, r2, r3
 8000d66:	4b75      	ldr	r3, [pc, #468]	; (8000f3c <affichageDig+0x52c>)
 8000d68:	fb83 2301 	smull	r2, r3, r3, r1
 8000d6c:	109a      	asrs	r2, r3, #2
 8000d6e:	17cb      	asrs	r3, r1, #31
 8000d70:	1ad2      	subs	r2, r2, r3
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	1aca      	subs	r2, r1, r3
 8000d7c:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000d84:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000d8e:	fb01 f303 	mul.w	r3, r1, r3
 8000d92:	441a      	add	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	1ad2      	subs	r2, r2, r3
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	f06f 0109 	mvn.w	r1, #9
 8000d9e:	fb01 f303 	mul.w	r3, r1, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	4a67      	ldr	r2, [pc, #412]	; (8000f44 <affichageDig+0x534>)
 8000da6:	fb82 1203 	smull	r1, r2, r2, r3
 8000daa:	1192      	asrs	r2, r2, #6
 8000dac:	17db      	asrs	r3, r3, #31
 8000dae:	1ad1      	subs	r1, r2, r3
 8000db0:	4b62      	ldr	r3, [pc, #392]	; (8000f3c <affichageDig+0x52c>)
 8000db2:	fb83 2301 	smull	r2, r3, r3, r1
 8000db6:	109a      	asrs	r2, r3, #2
 8000db8:	17cb      	asrs	r3, r1, #31
 8000dba:	1ad2      	subs	r2, r2, r3
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	1aca      	subs	r2, r1, r3
 8000dc6:	623a      	str	r2, [r7, #32]
		printFigures(digit[2], DIGIT2_Pin<<pos, 1);
 8000dc8:	69f8      	ldr	r0, [r7, #28]
 8000dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f7ff fdf9 	bl	80009d0 <printFigures>
		HAL_Delay(delai);
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fc79 	bl	80026d8 <HAL_Delay>
		break;
 8000de6:	e0a0      	b.n	8000f2a <affichageDig+0x51a>
	}
	case 3:
	{
		if(position_compteur==limpos+1)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d101      	bne.n	8000df6 <affichageDig+0x3e6>
			position_compteur=0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]

		if(position_compteur<0)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	da0c      	bge.n	8000e16 <affichageDig+0x406>
		{
			printchar('-', DIGIT1_Pin);
 8000dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e00:	202d      	movs	r0, #45	; 0x2d
 8000e02:	f7ff fd49 	bl	8000898 <printchar>
			if(position_compteur==-(limneg+1))
 8000e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d17b      	bne.n	8000f08 <affichageDig+0x4f8>
				position_compteur=0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e078      	b.n	8000f08 <affichageDig+0x4f8>
		}
		else
		{
			digit[0]=abs(position_compteur)%10;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000e1c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000e20:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <affichageDig+0x52c>)
 8000e22:	fb83 2301 	smull	r2, r3, r3, r1
 8000e26:	109a      	asrs	r2, r3, #2
 8000e28:	17cb      	asrs	r3, r1, #31
 8000e2a:	1ad2      	subs	r2, r2, r3
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	1aca      	subs	r2, r1, r3
 8000e36:	617a      	str	r2, [r7, #20]
			digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e3e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <affichageDig+0x52c>)
 8000e48:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4c:	1092      	asrs	r2, r2, #2
 8000e4e:	17db      	asrs	r3, r3, #31
 8000e50:	1ad1      	subs	r1, r2, r3
 8000e52:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <affichageDig+0x52c>)
 8000e54:	fb83 2301 	smull	r2, r3, r3, r1
 8000e58:	109a      	asrs	r2, r3, #2
 8000e5a:	17cb      	asrs	r3, r1, #31
 8000e5c:	1ad2      	subs	r2, r2, r3
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	1aca      	subs	r2, r1, r3
 8000e68:	61ba      	str	r2, [r7, #24]
			digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e70:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	f06f 0109 	mvn.w	r1, #9
 8000e7a:	fb01 f303 	mul.w	r3, r1, r3
 8000e7e:	441a      	add	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <affichageDig+0x530>)
 8000e86:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8a:	1152      	asrs	r2, r2, #5
 8000e8c:	17db      	asrs	r3, r3, #31
 8000e8e:	1ad1      	subs	r1, r2, r3
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <affichageDig+0x52c>)
 8000e92:	fb83 2301 	smull	r2, r3, r3, r1
 8000e96:	109a      	asrs	r2, r3, #2
 8000e98:	17cb      	asrs	r3, r1, #31
 8000e9a:	1ad2      	subs	r2, r2, r3
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	1aca      	subs	r2, r1, r3
 8000ea6:	61fa      	str	r2, [r7, #28]
			digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000eae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000eb8:	fb01 f303 	mul.w	r3, r1, r3
 8000ebc:	441a      	add	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	1ad2      	subs	r2, r2, r3
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	f06f 0109 	mvn.w	r1, #9
 8000ec8:	fb01 f303 	mul.w	r3, r1, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <affichageDig+0x534>)
 8000ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed4:	1192      	asrs	r2, r2, #6
 8000ed6:	17db      	asrs	r3, r3, #31
 8000ed8:	1ad1      	subs	r1, r2, r3
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <affichageDig+0x52c>)
 8000edc:	fb83 2301 	smull	r2, r3, r3, r1
 8000ee0:	109a      	asrs	r2, r3, #2
 8000ee2:	17cb      	asrs	r3, r1, #31
 8000ee4:	1ad2      	subs	r2, r2, r3
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	1aca      	subs	r2, r1, r3
 8000ef0:	623a      	str	r2, [r7, #32]
			printFigures(digit[3], DIGIT1_Pin<<pos, 1);
 8000ef2:	6a38      	ldr	r0, [r7, #32]
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	2201      	movs	r2, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fd64 	bl	80009d0 <printFigures>
		}
		i=-1;
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <affichageDig+0x538>)
 8000f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0e:	601a      	str	r2, [r3, #0]
		if (check==position)
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <affichageDig+0x53c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d102      	bne.n	8000f20 <affichageDig+0x510>
				i=3;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <affichageDig+0x538>)
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	601a      	str	r2, [r3, #0]
		HAL_Delay(delai);
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fbd8 	bl	80026d8 <HAL_Delay>
		break;
 8000f28:	bf00      	nop
	}
	}
	i++;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <affichageDig+0x538>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <affichageDig+0x538>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	66666667 	.word	0x66666667
 8000f40:	51eb851f 	.word	0x51eb851f
 8000f44:	10624dd3 	.word	0x10624dd3
 8000f48:	20000030 	.word	0x20000030
 8000f4c:	2000002c 	.word	0x2000002c

08000f50 <affichageChar>:
void affichageChar(char * word,int delai, int position)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	static int i=0;
	int pos=position*6;
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
	switch (i){
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <affichageChar+0xf8>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d861      	bhi.n	8001034 <affichageChar+0xe4>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <affichageChar+0x28>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000fb3 	.word	0x08000fb3
 8000f80:	08000fdd 	.word	0x08000fdd
 8000f84:	08001005 	.word	0x08001005

	case 0:
	{
		printchar(word[i],DIGIT1_Pin<<pos);
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <affichageChar+0xf8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fc78 	bl	8000898 <printchar>
		HAL_Delay(delai);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fb94 	bl	80026d8 <HAL_Delay>
	}
	break;
 8000fb0:	e040      	b.n	8001034 <affichageChar+0xe4>
	case 1:
	{
		printchar(word[i],DIGIT2_Pin<<pos);
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <affichageChar+0xf8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f7ff fc63 	bl	8000898 <printchar>
		HAL_Delay(delai);
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fb7f 	bl	80026d8 <HAL_Delay>
	}
	break;
 8000fda:	e02b      	b.n	8001034 <affichageChar+0xe4>
	case 2:
	{
		printchar(word[i],DIGIT3_Pin<<pos);
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <affichageChar+0xf8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fc4f 	bl	8000898 <printchar>
		HAL_Delay(delai);
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fb6b 	bl	80026d8 <HAL_Delay>
	}
	break;
 8001002:	e017      	b.n	8001034 <affichageChar+0xe4>
	case 3:
	{
		printchar(word[i],DIGIT4_Pin<<pos);
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <affichageChar+0xf8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	2240      	movs	r2, #64	; 0x40
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fc3b 	bl	8000898 <printchar>
		HAL_Delay(delai);
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fb57 	bl	80026d8 <HAL_Delay>
		i=-1;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <affichageChar+0xf8>)
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	601a      	str	r2, [r3, #0]
	}
	break;
 8001032:	bf00      	nop
	}
	i++;
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <affichageChar+0xf8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a03      	ldr	r2, [pc, #12]	; (8001048 <affichageChar+0xf8>)
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000034 	.word	0x20000034
 800104c:	00000000 	.word	0x00000000

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b097      	sub	sp, #92	; 0x5c
 8001054:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f001 fadd 	bl	8002614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 ff07 	bl	8001e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f001 f8b7 	bl	80021d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001062:	f000 ff5d 	bl	8001f20 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001066:	f000 ff99 	bl	8001f9c <MX_TIM2_Init>
  MX_TIM3_Init();
 800106a:	f001 f825 	bl	80020b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800106e:	2104      	movs	r1, #4
 8001070:	48b0      	ldr	r0, [pc, #704]	; (8001334 <main+0x2e4>)
 8001072:	f002 fd67 	bl	8003b44 <HAL_TIM_PWM_Start>
 8001076:	2108      	movs	r1, #8
 8001078:	48ae      	ldr	r0, [pc, #696]	; (8001334 <main+0x2e4>)
 800107a:	f002 fd63 	bl	8003b44 <HAL_TIM_PWM_Start>
 800107e:	210c      	movs	r1, #12
 8001080:	48ac      	ldr	r0, [pc, #688]	; (8001334 <main+0x2e4>)
 8001082:	f002 fd5f 	bl	8003b44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001086:	2100      	movs	r1, #0
 8001088:	48ab      	ldr	r0, [pc, #684]	; (8001338 <main+0x2e8>)
 800108a:	f002 fd5b 	bl	8003b44 <HAL_TIM_PWM_Start>
 800108e:	2104      	movs	r1, #4
 8001090:	48a9      	ldr	r0, [pc, #676]	; (8001338 <main+0x2e8>)
 8001092:	f002 fd57 	bl	8003b44 <HAL_TIM_PWM_Start>
 8001096:	2108      	movs	r1, #8
 8001098:	48a7      	ldr	r0, [pc, #668]	; (8001338 <main+0x2e8>)
 800109a:	f002 fd53 	bl	8003b44 <HAL_TIM_PWM_Start>

	int delai=1;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
	int SW1; int SW2;
	int lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 80010a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a6:	48a5      	ldr	r0, [pc, #660]	; (800133c <main+0x2ec>)
 80010a8:	f001 ffd6 	bl	8003058 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	61fb      	str	r3, [r7, #28]
	int lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 80010b0:	2104      	movs	r1, #4
 80010b2:	48a3      	ldr	r0, [pc, #652]	; (8001340 <main+0x2f0>)
 80010b4:	f001 ffd0 	bl	8003058 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	61bb      	str	r3, [r7, #24]

	int duty_cycler=5;int duty_cycleg=5;int duty_cycleb=5;
 80010bc:	2305      	movs	r3, #5
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010c0:	2305      	movs	r3, #5
 80010c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80010c4:	2305      	movs	r3, #5
 80010c6:	647b      	str	r3, [r7, #68]	; 0x44

	int frequency=1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t autoreload = 40000000/ (((TIM2->PSC))*(frequency));
 80010cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010d4:	fb02 f303 	mul.w	r3, r2, r3
 80010d8:	4a9a      	ldr	r2, [pc, #616]	; (8001344 <main+0x2f4>)
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t compare=(duty_cycleb*autoreload)/100;
 80010e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	4a97      	ldr	r2, [pc, #604]	; (8001348 <main+0x2f8>)
 80010ea:	fb82 1203 	smull	r1, r2, r2, r3
 80010ee:	1152      	asrs	r2, r2, #5
 80010f0:	17db      	asrs	r3, r3, #31
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compare);
 80010f6:	4b8f      	ldr	r3, [pc, #572]	; (8001334 <main+0x2e4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010fc:	639a      	str	r2, [r3, #56]	; 0x38

	int pulser=1000;int pulseg=1000;int pulseb=1000;
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
	static int i=0;
	char word[9]="BICHONS.";
 8001110:	4a8e      	ldr	r2, [pc, #568]	; (800134c <main+0x2fc>)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	ca07      	ldmia	r2, {r0, r1, r2}
 8001116:	c303      	stmia	r3!, {r0, r1}
 8001118:	701a      	strb	r2, [r3, #0]
	static int etat=freq;
	int etatsw=0; //1=-- 2=++
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
	int etatsw2=0;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
	static int couleur=blanc;

	initSEG();
 8001122:	f7ff fb87 	bl	8000834 <initSEG>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//HAL_GPIO_WritePin(PC3_GPIO_Port,PC3_Pin , GPIO_PIN_SET);
		SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8001126:	2101      	movs	r1, #1
 8001128:	4885      	ldr	r0, [pc, #532]	; (8001340 <main+0x2f0>)
 800112a:	f001 ff95 	bl	8003058 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	617b      	str	r3, [r7, #20]
		SW2= HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 8001132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001136:	4881      	ldr	r0, [pc, #516]	; (800133c <main+0x2ec>)
 8001138:	f001 ff8e 	bl	8003058 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	613b      	str	r3, [r7, #16]

		switch(etat)
 8001140:	4b83      	ldr	r3, [pc, #524]	; (8001350 <main+0x300>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b04      	cmp	r3, #4
 8001146:	d8ee      	bhi.n	8001126 <main+0xd6>
 8001148:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <main+0x100>)
 800114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114e:	bf00      	nop
 8001150:	08001165 	.word	0x08001165
 8001154:	08001891 	.word	0x08001891
 8001158:	08001589 	.word	0x08001589
 800115c:	08001719 	.word	0x08001719
 8001160:	08001a1f 	.word	0x08001a1f
		{
		case tachefond:

			switch (i){
 8001164:	4b7b      	ldr	r3, [pc, #492]	; (8001354 <main+0x304>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b07      	cmp	r3, #7
 800116a:	f200 809d 	bhi.w	80012a8 <main+0x258>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <main+0x124>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	08001195 	.word	0x08001195
 8001178:	080011b7 	.word	0x080011b7
 800117c:	080011d9 	.word	0x080011d9
 8001180:	080011f9 	.word	0x080011f9
 8001184:	08001219 	.word	0x08001219
 8001188:	0800123b 	.word	0x0800123b
 800118c:	0800125d 	.word	0x0800125d
 8001190:	0800127f 	.word	0x0800127f
			case 0:
				printchar(word[i],DIGIT1_Pin);
 8001194:	4b6f      	ldr	r3, [pc, #444]	; (8001354 <main+0x304>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800119c:	4413      	add	r3, r2
 800119e:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80011a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fb76 	bl	8000898 <printchar>
				HAL_Delay(delai);
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fa92 	bl	80026d8 <HAL_Delay>
			break;
 80011b4:	e078      	b.n	80012a8 <main+0x258>
			case 1:
				printchar(word[i],DIGIT2_Pin);
 80011b6:	4b67      	ldr	r3, [pc, #412]	; (8001354 <main+0x304>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80011be:	4413      	add	r3, r2
 80011c0:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fb65 	bl	8000898 <printchar>
				HAL_Delay(delai);
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fa81 	bl	80026d8 <HAL_Delay>
			break;
 80011d6:	e067      	b.n	80012a8 <main+0x258>
			case 2:
				printchar(word[i],DIGIT3_Pin);
 80011d8:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <main+0x304>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80011e0:	4413      	add	r3, r2
 80011e2:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fb55 	bl	8000898 <printchar>
				HAL_Delay(delai);
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fa71 	bl	80026d8 <HAL_Delay>
			break;
 80011f6:	e057      	b.n	80012a8 <main+0x258>
			case 3:
				printchar(word[i],DIGIT4_Pin);
 80011f8:	4b56      	ldr	r3, [pc, #344]	; (8001354 <main+0x304>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001200:	4413      	add	r3, r2
 8001202:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fb45 	bl	8000898 <printchar>
				HAL_Delay(delai);
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fa61 	bl	80026d8 <HAL_Delay>
			break;
 8001216:	e047      	b.n	80012a8 <main+0x258>
			case 4:
				printchar(word[i],DIGIT5_Pin);
 8001218:	4b4e      	ldr	r3, [pc, #312]	; (8001354 <main+0x304>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001220:	4413      	add	r3, r2
 8001222:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8001226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fb34 	bl	8000898 <printchar>
				HAL_Delay(delai);
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fa50 	bl	80026d8 <HAL_Delay>
			break;
 8001238:	e036      	b.n	80012a8 <main+0x258>
			case 5:
				printchar(word[i],DIGIT6_Pin);
 800123a:	4b46      	ldr	r3, [pc, #280]	; (8001354 <main+0x304>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001242:	4413      	add	r3, r2
 8001244:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8001248:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fb23 	bl	8000898 <printchar>
				HAL_Delay(delai);
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	4618      	mov	r0, r3
 8001256:	f001 fa3f 	bl	80026d8 <HAL_Delay>
			break;
 800125a:	e025      	b.n	80012a8 <main+0x258>
			case 6:
				printchar(word[i],DIGIT7_Pin);
 800125c:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <main+0x304>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001264:	4413      	add	r3, r2
 8001266:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800126a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fb12 	bl	8000898 <printchar>
				HAL_Delay(delai);
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fa2e 	bl	80026d8 <HAL_Delay>
			break;
 800127c:	e014      	b.n	80012a8 <main+0x258>
			case 7:
				printchar(word[i],DIGIT8_Pin);
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <main+0x304>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001286:	4413      	add	r3, r2
 8001288:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800128c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fb01 	bl	8000898 <printchar>
				i=-1;
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <main+0x304>)
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	601a      	str	r2, [r3, #0]
				HAL_Delay(delai);
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fa19 	bl	80026d8 <HAL_Delay>
			break;
 80012a6:	bf00      	nop
			}
			i++;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <main+0x304>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a29      	ldr	r2, [pc, #164]	; (8001354 <main+0x304>)
 80012b0:	6013      	str	r3, [r2, #0]

			switch(couleur)
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <main+0x308>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	f200 8158 	bhi.w	800156c <main+0x51c>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <main+0x274>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012e1 	.word	0x080012e1
 80012c8:	080013b3 	.word	0x080013b3
 80012cc:	08001459 	.word	0x08001459
 80012d0:	080014fb 	.word	0x080014fb
 80012d4:	08001361 	.word	0x08001361
 80012d8:	080014ab 	.word	0x080014ab
 80012dc:	08001407 	.word	0x08001407
			{
				case blanc:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 80012e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <main+0x30c>)
 80012e4:	fb82 1203 	smull	r1, r2, r2, r3
 80012e8:	1092      	asrs	r2, r2, #2
 80012ea:	17db      	asrs	r3, r3, #31
 80012ec:	1ad2      	subs	r2, r2, r3
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <main+0x2e8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 80012f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f6:	4a19      	ldr	r2, [pc, #100]	; (800135c <main+0x30c>)
 80012f8:	fb82 1203 	smull	r1, r2, r2, r3
 80012fc:	1092      	asrs	r2, r2, #2
 80012fe:	17db      	asrs	r3, r3, #31
 8001300:	1ad2      	subs	r2, r2, r3
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <main+0x2e8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8001308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <main+0x30c>)
 800130c:	fb82 1203 	smull	r1, r2, r2, r3
 8001310:	1092      	asrs	r2, r2, #2
 8001312:	17db      	asrs	r3, r3, #31
 8001314:	1ad2      	subs	r2, r2, r3
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <main+0x2e8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg--;
 800131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131e:	3b01      	subs	r3, #1
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
					if(pulseg==0)
 8001322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001324:	2b00      	cmp	r3, #0
 8001326:	f040 8114 	bne.w	8001552 <main+0x502>
						couleur=violet;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <main+0x308>)
 800132c:	2204      	movs	r2, #4
 800132e:	601a      	str	r2, [r3, #0]
					break;
 8001330:	e10f      	b.n	8001552 <main+0x502>
 8001332:	bf00      	nop
 8001334:	200000bc 	.word	0x200000bc
 8001338:	20000044 	.word	0x20000044
 800133c:	40011000 	.word	0x40011000
 8001340:	40010c00 	.word	0x40010c00
 8001344:	02625a00 	.word	0x02625a00
 8001348:	51eb851f 	.word	0x51eb851f
 800134c:	080046dc 	.word	0x080046dc
 8001350:	20000000 	.word	0x20000000
 8001354:	20000038 	.word	0x20000038
 8001358:	2000003c 	.word	0x2000003c
 800135c:	66666667 	.word	0x66666667
				case violet:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8001360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001362:	4aa7      	ldr	r2, [pc, #668]	; (8001600 <main+0x5b0>)
 8001364:	fb82 1203 	smull	r1, r2, r2, r3
 8001368:	1092      	asrs	r2, r2, #2
 800136a:	17db      	asrs	r3, r3, #31
 800136c:	1ad2      	subs	r2, r2, r3
 800136e:	4ba5      	ldr	r3, [pc, #660]	; (8001604 <main+0x5b4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	4aa2      	ldr	r2, [pc, #648]	; (8001600 <main+0x5b0>)
 8001378:	fb82 1203 	smull	r1, r2, r2, r3
 800137c:	1092      	asrs	r2, r2, #2
 800137e:	17db      	asrs	r3, r3, #31
 8001380:	1ad2      	subs	r2, r2, r3
 8001382:	4ba0      	ldr	r3, [pc, #640]	; (8001604 <main+0x5b4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	4a9d      	ldr	r2, [pc, #628]	; (8001600 <main+0x5b0>)
 800138c:	fb82 1203 	smull	r1, r2, r2, r3
 8001390:	1092      	asrs	r2, r2, #2
 8001392:	17db      	asrs	r3, r3, #31
 8001394:	1ad2      	subs	r2, r2, r3
 8001396:	4b9b      	ldr	r3, [pc, #620]	; (8001604 <main+0x5b4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	635a      	str	r2, [r3, #52]	; 0x34
					pulser--;
 800139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139e:	3b01      	subs	r3, #1
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
					if(pulser==0)
 80013a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f040 80d6 	bne.w	8001556 <main+0x506>
						couleur=bleu;
 80013aa:	4b97      	ldr	r3, [pc, #604]	; (8001608 <main+0x5b8>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
					break;
 80013b0:	e0d1      	b.n	8001556 <main+0x506>
				case bleu:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 80013b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b4:	4a92      	ldr	r2, [pc, #584]	; (8001600 <main+0x5b0>)
 80013b6:	fb82 1203 	smull	r1, r2, r2, r3
 80013ba:	1092      	asrs	r2, r2, #2
 80013bc:	17db      	asrs	r3, r3, #31
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	4b90      	ldr	r3, [pc, #576]	; (8001604 <main+0x5b4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 80013c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c8:	4a8d      	ldr	r2, [pc, #564]	; (8001600 <main+0x5b0>)
 80013ca:	fb82 1203 	smull	r1, r2, r2, r3
 80013ce:	1092      	asrs	r2, r2, #2
 80013d0:	17db      	asrs	r3, r3, #31
 80013d2:	1ad2      	subs	r2, r2, r3
 80013d4:	4b8b      	ldr	r3, [pc, #556]	; (8001604 <main+0x5b4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	4a88      	ldr	r2, [pc, #544]	; (8001600 <main+0x5b0>)
 80013de:	fb82 1203 	smull	r1, r2, r2, r3
 80013e2:	1092      	asrs	r2, r2, #2
 80013e4:	17db      	asrs	r3, r3, #31
 80013e6:	1ad2      	subs	r2, r2, r3
 80013e8:	4b86      	ldr	r3, [pc, #536]	; (8001604 <main+0x5b4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg++;
 80013ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f0:	3301      	adds	r3, #1
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
					if(pulseg==1000)
 80013f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013fa:	f040 80ae 	bne.w	800155a <main+0x50a>
						couleur=cyan;
 80013fe:	4b82      	ldr	r3, [pc, #520]	; (8001608 <main+0x5b8>)
 8001400:	2206      	movs	r2, #6
 8001402:	601a      	str	r2, [r3, #0]
					break;
 8001404:	e0a9      	b.n	800155a <main+0x50a>
				case cyan:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8001406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001408:	4a7d      	ldr	r2, [pc, #500]	; (8001600 <main+0x5b0>)
 800140a:	fb82 1203 	smull	r1, r2, r2, r3
 800140e:	1092      	asrs	r2, r2, #2
 8001410:	17db      	asrs	r3, r3, #31
 8001412:	1ad2      	subs	r2, r2, r3
 8001414:	4b7b      	ldr	r3, [pc, #492]	; (8001604 <main+0x5b4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	4a78      	ldr	r2, [pc, #480]	; (8001600 <main+0x5b0>)
 800141e:	fb82 1203 	smull	r1, r2, r2, r3
 8001422:	1092      	asrs	r2, r2, #2
 8001424:	17db      	asrs	r3, r3, #31
 8001426:	1ad2      	subs	r2, r2, r3
 8001428:	4b76      	ldr	r3, [pc, #472]	; (8001604 <main+0x5b4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 800142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001430:	4a73      	ldr	r2, [pc, #460]	; (8001600 <main+0x5b0>)
 8001432:	fb82 1203 	smull	r1, r2, r2, r3
 8001436:	1092      	asrs	r2, r2, #2
 8001438:	17db      	asrs	r3, r3, #31
 800143a:	1ad2      	subs	r2, r2, r3
 800143c:	4b71      	ldr	r3, [pc, #452]	; (8001604 <main+0x5b4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	635a      	str	r2, [r3, #52]	; 0x34
					pulseb--;
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	3b01      	subs	r3, #1
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(pulseb==0)
 8001448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 8087 	bne.w	800155e <main+0x50e>
						couleur=vert;
 8001450:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <main+0x5b8>)
 8001452:	2202      	movs	r2, #2
 8001454:	601a      	str	r2, [r3, #0]
					break;
 8001456:	e082      	b.n	800155e <main+0x50e>
				case vert:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8001458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145a:	4a69      	ldr	r2, [pc, #420]	; (8001600 <main+0x5b0>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	1092      	asrs	r2, r2, #2
 8001462:	17db      	asrs	r3, r3, #31
 8001464:	1ad2      	subs	r2, r2, r3
 8001466:	4b67      	ldr	r3, [pc, #412]	; (8001604 <main+0x5b4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	4a64      	ldr	r2, [pc, #400]	; (8001600 <main+0x5b0>)
 8001470:	fb82 1203 	smull	r1, r2, r2, r3
 8001474:	1092      	asrs	r2, r2, #2
 8001476:	17db      	asrs	r3, r3, #31
 8001478:	1ad2      	subs	r2, r2, r3
 800147a:	4b62      	ldr	r3, [pc, #392]	; (8001604 <main+0x5b4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8001480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001482:	4a5f      	ldr	r2, [pc, #380]	; (8001600 <main+0x5b0>)
 8001484:	fb82 1203 	smull	r1, r2, r2, r3
 8001488:	1092      	asrs	r2, r2, #2
 800148a:	17db      	asrs	r3, r3, #31
 800148c:	1ad2      	subs	r2, r2, r3
 800148e:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <main+0x5b4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
					pulser++;
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	3301      	adds	r3, #1
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
					if(pulser==1000)
 800149a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a0:	d15f      	bne.n	8001562 <main+0x512>
						couleur=jaune;
 80014a2:	4b59      	ldr	r3, [pc, #356]	; (8001608 <main+0x5b8>)
 80014a4:	2205      	movs	r2, #5
 80014a6:	601a      	str	r2, [r3, #0]
					break;
 80014a8:	e05b      	b.n	8001562 <main+0x512>
				case jaune:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 80014aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ac:	4a54      	ldr	r2, [pc, #336]	; (8001600 <main+0x5b0>)
 80014ae:	fb82 1203 	smull	r1, r2, r2, r3
 80014b2:	1092      	asrs	r2, r2, #2
 80014b4:	17db      	asrs	r3, r3, #31
 80014b6:	1ad2      	subs	r2, r2, r3
 80014b8:	4b52      	ldr	r3, [pc, #328]	; (8001604 <main+0x5b4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 80014be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c0:	4a4f      	ldr	r2, [pc, #316]	; (8001600 <main+0x5b0>)
 80014c2:	fb82 1203 	smull	r1, r2, r2, r3
 80014c6:	1092      	asrs	r2, r2, #2
 80014c8:	17db      	asrs	r3, r3, #31
 80014ca:	1ad2      	subs	r2, r2, r3
 80014cc:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <main+0x5b4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	4a4a      	ldr	r2, [pc, #296]	; (8001600 <main+0x5b0>)
 80014d6:	fb82 1203 	smull	r1, r2, r2, r3
 80014da:	1092      	asrs	r2, r2, #2
 80014dc:	17db      	asrs	r3, r3, #31
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4b48      	ldr	r3, [pc, #288]	; (8001604 <main+0x5b4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg--;
 80014e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e8:	3b01      	subs	r3, #1
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
					if(pulseg==0)
 80014ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d139      	bne.n	8001566 <main+0x516>
						couleur=rouge;
 80014f2:	4b45      	ldr	r3, [pc, #276]	; (8001608 <main+0x5b8>)
 80014f4:	2203      	movs	r2, #3
 80014f6:	601a      	str	r2, [r3, #0]
					break;
 80014f8:	e035      	b.n	8001566 <main+0x516>
				case rouge:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 80014fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fc:	4a40      	ldr	r2, [pc, #256]	; (8001600 <main+0x5b0>)
 80014fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001502:	1092      	asrs	r2, r2, #2
 8001504:	17db      	asrs	r3, r3, #31
 8001506:	1ad2      	subs	r2, r2, r3
 8001508:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <main+0x5b4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 800150e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001510:	4a3b      	ldr	r2, [pc, #236]	; (8001600 <main+0x5b0>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	1092      	asrs	r2, r2, #2
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <main+0x5b4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8001522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001524:	4a36      	ldr	r2, [pc, #216]	; (8001600 <main+0x5b0>)
 8001526:	fb82 1203 	smull	r1, r2, r2, r3
 800152a:	1092      	asrs	r2, r2, #2
 800152c:	17db      	asrs	r3, r3, #31
 800152e:	1ad2      	subs	r2, r2, r3
 8001530:	4b34      	ldr	r3, [pc, #208]	; (8001604 <main+0x5b4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg++;
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	3301      	adds	r3, #1
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
					pulseb++;
 800153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153e:	3301      	adds	r3, #1
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(pulseg==1000)
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001548:	d10f      	bne.n	800156a <main+0x51a>
						couleur=blanc;
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <main+0x5b8>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
					break;
 8001550:	e00b      	b.n	800156a <main+0x51a>
					break;
 8001552:	bf00      	nop
 8001554:	e00a      	b.n	800156c <main+0x51c>
					break;
 8001556:	bf00      	nop
 8001558:	e008      	b.n	800156c <main+0x51c>
					break;
 800155a:	bf00      	nop
 800155c:	e006      	b.n	800156c <main+0x51c>
					break;
 800155e:	bf00      	nop
 8001560:	e004      	b.n	800156c <main+0x51c>
					break;
 8001562:	bf00      	nop
 8001564:	e002      	b.n	800156c <main+0x51c>
					break;
 8001566:	bf00      	nop
 8001568:	e000      	b.n	800156c <main+0x51c>
					break;
 800156a:	bf00      	nop
			}

			if(SW2==0)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 845b 	bne.w	8001e2a <main+0xdda>

			{
				initSEG();
 8001574:	f7ff f95e 	bl	8000834 <initSEG>
				HAL_Delay(200);
 8001578:	20c8      	movs	r0, #200	; 0xc8
 800157a:	f001 f8ad 	bl	80026d8 <HAL_Delay>
				etat=green;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <main+0x5bc>)
 8001580:	2202      	movs	r2, #2
 8001582:	601a      	str	r2, [r3, #0]
			}
			break;
 8001584:	f000 bc51 	b.w	8001e2a <main+0xdda>
			case green:
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001588:	2104      	movs	r1, #4
 800158a:	4821      	ldr	r0, [pc, #132]	; (8001610 <main+0x5c0>)
 800158c:	f001 fd64 	bl	8003058 <HAL_GPIO_ReadPin>
 8001590:	4603      	mov	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]

				affichageChar("GREE", delai,GAUCHE);
 8001594:	2200      	movs	r2, #0
 8001596:	6a39      	ldr	r1, [r7, #32]
 8001598:	481e      	ldr	r0, [pc, #120]	; (8001614 <main+0x5c4>)
 800159a:	f7ff fcd9 	bl	8000f50 <affichageChar>
				affichageDig(duty_cycleg, delai,DROITE,100,0);
 800159e:	2300      	movs	r3, #0
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	2201      	movs	r2, #1
 80015a6:	6a39      	ldr	r1, [r7, #32]
 80015a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015aa:	f7ff fa31 	bl	8000a10 <affichageDig>
				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 80015ae:	2104      	movs	r1, #4
 80015b0:	4817      	ldr	r0, [pc, #92]	; (8001610 <main+0x5c0>)
 80015b2:	f001 fd51 	bl	8003058 <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4293      	cmp	r3, r2
 80015be:	f000 8090 	beq.w	80016e2 <main+0x692>
				{
					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 80015c2:	2104      	movs	r1, #4
 80015c4:	4812      	ldr	r0, [pc, #72]	; (8001610 <main+0x5c0>)
 80015c6:	f001 fd47 	bl	8003058 <HAL_GPIO_ReadPin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461c      	mov	r4, r3
 80015ce:	2102      	movs	r1, #2
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <main+0x5c0>)
 80015d2:	f001 fd41 	bl	8003058 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	429c      	cmp	r4, r3
 80015da:	d047      	beq.n	800166c <main+0x61c>
					{
						etatsw=2;
 80015dc:	2302      	movs	r3, #2
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==2)
 80015e0:	e040      	b.n	8001664 <main+0x614>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 80015e2:	2104      	movs	r1, #4
 80015e4:	480a      	ldr	r0, [pc, #40]	; (8001610 <main+0x5c0>)
 80015e6:	f001 fd37 	bl	8003058 <HAL_GPIO_ReadPin>
 80015ea:	4603      	mov	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f001 f872 	bl	80026d8 <HAL_Delay>
							if (duty_cycleg<=0)
 80015f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dc0e      	bgt.n	8001618 <main+0x5c8>
								duty_cycleg=0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80015fe:	e00e      	b.n	800161e <main+0x5ce>
 8001600:	66666667 	.word	0x66666667
 8001604:	20000044 	.word	0x20000044
 8001608:	2000003c 	.word	0x2000003c
 800160c:	20000000 	.word	0x20000000
 8001610:	40010c00 	.word	0x40010c00
 8001614:	080046c4 	.word	0x080046c4
							else
							{
								duty_cycleg--;
 8001618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800161a:	3b01      	subs	r3, #1
 800161c:	64bb      	str	r3, [r7, #72]	; 0x48
							}
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg*10);
 800161e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	461a      	mov	r2, r3
 800162a:	4bb0      	ldr	r3, [pc, #704]	; (80018ec <main+0x89c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	639a      	str	r2, [r3, #56]	; 0x38

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 8001630:	2104      	movs	r1, #4
 8001632:	48af      	ldr	r0, [pc, #700]	; (80018f0 <main+0x8a0>)
 8001634:	f001 fd10 	bl	8003058 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <main+0x5f6>
								etatsw=0;
 8001642:	2300      	movs	r3, #0
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001646:	2104      	movs	r1, #4
 8001648:	48a9      	ldr	r0, [pc, #676]	; (80018f0 <main+0x8a0>)
 800164a:	f001 fd05 	bl	8003058 <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	461c      	mov	r4, r3
 8001652:	2102      	movs	r1, #2
 8001654:	48a6      	ldr	r0, [pc, #664]	; (80018f0 <main+0x8a0>)
 8001656:	f001 fcff 	bl	8003058 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	429c      	cmp	r4, r3
 800165e:	d101      	bne.n	8001664 <main+0x614>
								etatsw=1;
 8001660:	2301      	movs	r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==2)
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	2b02      	cmp	r3, #2
 8001668:	d0bb      	beq.n	80015e2 <main+0x592>
 800166a:	e03a      	b.n	80016e2 <main+0x692>
						}
					}
					else
					{
						etatsw=1;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==1)
 8001670:	e034      	b.n	80016dc <main+0x68c>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001672:	2104      	movs	r1, #4
 8001674:	489e      	ldr	r0, [pc, #632]	; (80018f0 <main+0x8a0>)
 8001676:	f001 fcef 	bl	8003058 <HAL_GPIO_ReadPin>
 800167a:	4603      	mov	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f001 f82a 	bl	80026d8 <HAL_Delay>
							if (duty_cycleg>=100)
 8001684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001686:	2b63      	cmp	r3, #99	; 0x63
 8001688:	dd02      	ble.n	8001690 <main+0x640>
								duty_cycleg=100;
 800168a:	2364      	movs	r3, #100	; 0x64
 800168c:	64bb      	str	r3, [r7, #72]	; 0x48
 800168e:	e002      	b.n	8001696 <main+0x646>
							else
							{
								duty_cycleg++;
 8001690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001692:	3301      	adds	r3, #1
 8001694:	64bb      	str	r3, [r7, #72]	; 0x48
							}
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg*10);
 8001696:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b92      	ldr	r3, [pc, #584]	; (80018ec <main+0x89c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	639a      	str	r2, [r3, #56]	; 0x38

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 80016a8:	2104      	movs	r1, #4
 80016aa:	4891      	ldr	r0, [pc, #580]	; (80018f0 <main+0x8a0>)
 80016ac:	f001 fcd4 	bl	8003058 <HAL_GPIO_ReadPin>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <main+0x66e>
								etatsw=0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 80016be:	2104      	movs	r1, #4
 80016c0:	488b      	ldr	r0, [pc, #556]	; (80018f0 <main+0x8a0>)
 80016c2:	f001 fcc9 	bl	8003058 <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461c      	mov	r4, r3
 80016ca:	2102      	movs	r1, #2
 80016cc:	4888      	ldr	r0, [pc, #544]	; (80018f0 <main+0x8a0>)
 80016ce:	f001 fcc3 	bl	8003058 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	429c      	cmp	r4, r3
 80016d6:	d001      	beq.n	80016dc <main+0x68c>
								etatsw=2;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==1)
 80016dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d0c7      	beq.n	8001672 <main+0x622>
						}
					}
				}
				if(SW1==0)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10a      	bne.n	80016fe <main+0x6ae>
				{
					duty_cycleg=0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	64bb      	str	r3, [r7, #72]	; 0x48
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg*10);
 80016ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b7c      	ldr	r3, [pc, #496]	; (80018ec <main+0x89c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
				}
				if(SW2==0)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 8395 	bne.w	8001e30 <main+0xde0>
				{
					initSEG();
 8001706:	f7ff f895 	bl	8000834 <initSEG>
					HAL_Delay(200);
 800170a:	20c8      	movs	r0, #200	; 0xc8
 800170c:	f000 ffe4 	bl	80026d8 <HAL_Delay>
					etat=red;
 8001710:	4b78      	ldr	r3, [pc, #480]	; (80018f4 <main+0x8a4>)
 8001712:	2203      	movs	r2, #3
 8001714:	601a      	str	r2, [r3, #0]
				}
				break;
 8001716:	e38b      	b.n	8001e30 <main+0xde0>


			case red:
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001718:	2104      	movs	r1, #4
 800171a:	4875      	ldr	r0, [pc, #468]	; (80018f0 <main+0x8a0>)
 800171c:	f001 fc9c 	bl	8003058 <HAL_GPIO_ReadPin>
 8001720:	4603      	mov	r3, r0
 8001722:	61bb      	str	r3, [r7, #24]
				affichageChar(" RED", delai,GAUCHE);
 8001724:	2200      	movs	r2, #0
 8001726:	6a39      	ldr	r1, [r7, #32]
 8001728:	4873      	ldr	r0, [pc, #460]	; (80018f8 <main+0x8a8>)
 800172a:	f7ff fc11 	bl	8000f50 <affichageChar>
				affichageDig(duty_cycler, delai,DROITE,100,0);
 800172e:	2300      	movs	r3, #0
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2364      	movs	r3, #100	; 0x64
 8001734:	2201      	movs	r2, #1
 8001736:	6a39      	ldr	r1, [r7, #32]
 8001738:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800173a:	f7ff f969 	bl	8000a10 <affichageDig>
				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 800173e:	2104      	movs	r1, #4
 8001740:	486b      	ldr	r0, [pc, #428]	; (80018f0 <main+0x8a0>)
 8001742:	f001 fc89 	bl	8003058 <HAL_GPIO_ReadPin>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4293      	cmp	r3, r2
 800174e:	f000 8084 	beq.w	800185a <main+0x80a>
				{
					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001752:	2104      	movs	r1, #4
 8001754:	4866      	ldr	r0, [pc, #408]	; (80018f0 <main+0x8a0>)
 8001756:	f001 fc7f 	bl	8003058 <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	461c      	mov	r4, r3
 800175e:	2102      	movs	r1, #2
 8001760:	4863      	ldr	r0, [pc, #396]	; (80018f0 <main+0x8a0>)
 8001762:	f001 fc79 	bl	8003058 <HAL_GPIO_ReadPin>
 8001766:	4603      	mov	r3, r0
 8001768:	429c      	cmp	r4, r3
 800176a:	d03b      	beq.n	80017e4 <main+0x794>
					{
						etatsw=2;
 800176c:	2302      	movs	r3, #2
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==2)
 8001770:	e034      	b.n	80017dc <main+0x78c>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001772:	2104      	movs	r1, #4
 8001774:	485e      	ldr	r0, [pc, #376]	; (80018f0 <main+0x8a0>)
 8001776:	f001 fc6f 	bl	8003058 <HAL_GPIO_ReadPin>
 800177a:	4603      	mov	r3, r0
 800177c:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f000 ffaa 	bl	80026d8 <HAL_Delay>
							if (duty_cycler<=0)
 8001784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001786:	2b00      	cmp	r3, #0
 8001788:	dc02      	bgt.n	8001790 <main+0x740>
								duty_cycler=0;
 800178a:	2300      	movs	r3, #0
 800178c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800178e:	e002      	b.n	8001796 <main+0x746>
							else
							{
								duty_cycler--;
 8001790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001792:	3b01      	subs	r3, #1
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c
							}
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycler*10);
 8001796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b52      	ldr	r3, [pc, #328]	; (80018ec <main+0x89c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	63da      	str	r2, [r3, #60]	; 0x3c

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 80017a8:	2104      	movs	r1, #4
 80017aa:	4851      	ldr	r0, [pc, #324]	; (80018f0 <main+0x8a0>)
 80017ac:	f001 fc54 	bl	8003058 <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <main+0x76e>
								etatsw=0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 80017be:	2104      	movs	r1, #4
 80017c0:	484b      	ldr	r0, [pc, #300]	; (80018f0 <main+0x8a0>)
 80017c2:	f001 fc49 	bl	8003058 <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461c      	mov	r4, r3
 80017ca:	2102      	movs	r1, #2
 80017cc:	4848      	ldr	r0, [pc, #288]	; (80018f0 <main+0x8a0>)
 80017ce:	f001 fc43 	bl	8003058 <HAL_GPIO_ReadPin>
 80017d2:	4603      	mov	r3, r0
 80017d4:	429c      	cmp	r4, r3
 80017d6:	d101      	bne.n	80017dc <main+0x78c>
								etatsw=1;
 80017d8:	2301      	movs	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==2)
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d0c7      	beq.n	8001772 <main+0x722>
 80017e2:	e03a      	b.n	800185a <main+0x80a>
						}
					}
					else
					{
						etatsw=1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==1)
 80017e8:	e034      	b.n	8001854 <main+0x804>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 80017ea:	2104      	movs	r1, #4
 80017ec:	4840      	ldr	r0, [pc, #256]	; (80018f0 <main+0x8a0>)
 80017ee:	f001 fc33 	bl	8003058 <HAL_GPIO_ReadPin>
 80017f2:	4603      	mov	r3, r0
 80017f4:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f000 ff6e 	bl	80026d8 <HAL_Delay>
							if (duty_cycler>=100)
 80017fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017fe:	2b63      	cmp	r3, #99	; 0x63
 8001800:	dd02      	ble.n	8001808 <main+0x7b8>
								duty_cycler=100;
 8001802:	2364      	movs	r3, #100	; 0x64
 8001804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001806:	e002      	b.n	800180e <main+0x7be>
							else
							{
								duty_cycler++;
 8001808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800180a:	3301      	adds	r3, #1
 800180c:	64fb      	str	r3, [r7, #76]	; 0x4c
							}
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycler*10);
 800180e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	461a      	mov	r2, r3
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <main+0x89c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 8001820:	2104      	movs	r1, #4
 8001822:	4833      	ldr	r0, [pc, #204]	; (80018f0 <main+0x8a0>)
 8001824:	f001 fc18 	bl	8003058 <HAL_GPIO_ReadPin>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <main+0x7e6>
								etatsw=0;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001836:	2104      	movs	r1, #4
 8001838:	482d      	ldr	r0, [pc, #180]	; (80018f0 <main+0x8a0>)
 800183a:	f001 fc0d 	bl	8003058 <HAL_GPIO_ReadPin>
 800183e:	4603      	mov	r3, r0
 8001840:	461c      	mov	r4, r3
 8001842:	2102      	movs	r1, #2
 8001844:	482a      	ldr	r0, [pc, #168]	; (80018f0 <main+0x8a0>)
 8001846:	f001 fc07 	bl	8003058 <HAL_GPIO_ReadPin>
 800184a:	4603      	mov	r3, r0
 800184c:	429c      	cmp	r4, r3
 800184e:	d001      	beq.n	8001854 <main+0x804>
								etatsw=2;
 8001850:	2302      	movs	r3, #2
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==1)
 8001854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001856:	2b01      	cmp	r3, #1
 8001858:	d0c7      	beq.n	80017ea <main+0x79a>
						}
					}
				}
				if(SW1==0)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10a      	bne.n	8001876 <main+0x826>
				{
					duty_cycler=0;
 8001860:	2300      	movs	r3, #0
 8001862:	64fb      	str	r3, [r7, #76]	; 0x4c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycler*10);
 8001864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	461a      	mov	r2, r3
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <main+0x89c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	63da      	str	r2, [r3, #60]	; 0x3c
				}
				if(SW2==0)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 82dc 	bne.w	8001e36 <main+0xde6>
				{
					initSEG();
 800187e:	f7fe ffd9 	bl	8000834 <initSEG>
					HAL_Delay(200);
 8001882:	20c8      	movs	r0, #200	; 0xc8
 8001884:	f000 ff28 	bl	80026d8 <HAL_Delay>
					etat=blue;
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <main+0x8a4>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]
				}
				break;
 800188e:	e2d2      	b.n	8001e36 <main+0xde6>


			case blue:
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001890:	2104      	movs	r1, #4
 8001892:	4817      	ldr	r0, [pc, #92]	; (80018f0 <main+0x8a0>)
 8001894:	f001 fbe0 	bl	8003058 <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	61bb      	str	r3, [r7, #24]
				affichageChar("BLUE", delai,GAUCHE);
 800189c:	2200      	movs	r2, #0
 800189e:	6a39      	ldr	r1, [r7, #32]
 80018a0:	4816      	ldr	r0, [pc, #88]	; (80018fc <main+0x8ac>)
 80018a2:	f7ff fb55 	bl	8000f50 <affichageChar>
				affichageDig(duty_cycleb, delai,DROITE,100,0);
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	2201      	movs	r2, #1
 80018ae:	6a39      	ldr	r1, [r7, #32]
 80018b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80018b2:	f7ff f8ad 	bl	8000a10 <affichageDig>

				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 80018b6:	2104      	movs	r1, #4
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <main+0x8a0>)
 80018ba:	f001 fbcd 	bl	8003058 <HAL_GPIO_ReadPin>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4293      	cmp	r3, r2
 80018c6:	f000 808f 	beq.w	80019e8 <main+0x998>
				{
					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 80018ca:	2104      	movs	r1, #4
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <main+0x8a0>)
 80018ce:	f001 fbc3 	bl	8003058 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461c      	mov	r4, r3
 80018d6:	2102      	movs	r1, #2
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <main+0x8a0>)
 80018da:	f001 fbbd 	bl	8003058 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	429c      	cmp	r4, r3
 80018e2:	d046      	beq.n	8001972 <main+0x922>
					{
						etatsw=2;
 80018e4:	2302      	movs	r3, #2
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==2)
 80018e8:	e03f      	b.n	800196a <main+0x91a>
 80018ea:	bf00      	nop
 80018ec:	20000044 	.word	0x20000044
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	20000000 	.word	0x20000000
 80018f8:	080046cc 	.word	0x080046cc
 80018fc:	080046d4 	.word	0x080046d4
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001900:	2104      	movs	r1, #4
 8001902:	48b1      	ldr	r0, [pc, #708]	; (8001bc8 <main+0xb78>)
 8001904:	f001 fba8 	bl	8003058 <HAL_GPIO_ReadPin>
 8001908:	4603      	mov	r3, r0
 800190a:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 800190c:	2001      	movs	r0, #1
 800190e:	f000 fee3 	bl	80026d8 <HAL_Delay>
							if (duty_cycleb<=0)
 8001912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001914:	2b00      	cmp	r3, #0
 8001916:	dc02      	bgt.n	800191e <main+0x8ce>
								duty_cycleb=0;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
 800191c:	e002      	b.n	8001924 <main+0x8d4>
							else
							{
								duty_cycleb--;
 800191e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001920:	3b01      	subs	r3, #1
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
							}
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycleb*10);
 8001924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	461a      	mov	r2, r3
 8001930:	4ba6      	ldr	r3, [pc, #664]	; (8001bcc <main+0xb7c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	635a      	str	r2, [r3, #52]	; 0x34

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 8001936:	2104      	movs	r1, #4
 8001938:	48a3      	ldr	r0, [pc, #652]	; (8001bc8 <main+0xb78>)
 800193a:	f001 fb8d 	bl	8003058 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <main+0x8fc>
								etatsw=0;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 800194c:	2104      	movs	r1, #4
 800194e:	489e      	ldr	r0, [pc, #632]	; (8001bc8 <main+0xb78>)
 8001950:	f001 fb82 	bl	8003058 <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	461c      	mov	r4, r3
 8001958:	2102      	movs	r1, #2
 800195a:	489b      	ldr	r0, [pc, #620]	; (8001bc8 <main+0xb78>)
 800195c:	f001 fb7c 	bl	8003058 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	429c      	cmp	r4, r3
 8001964:	d101      	bne.n	800196a <main+0x91a>
								etatsw=1;
 8001966:	2301      	movs	r3, #1
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==2)
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	2b02      	cmp	r3, #2
 800196e:	d0c7      	beq.n	8001900 <main+0x8b0>
 8001970:	e03a      	b.n	80019e8 <main+0x998>
						}
					}
					else
					{
						etatsw=1;
 8001972:	2301      	movs	r3, #1
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==1)
 8001976:	e034      	b.n	80019e2 <main+0x992>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001978:	2104      	movs	r1, #4
 800197a:	4893      	ldr	r0, [pc, #588]	; (8001bc8 <main+0xb78>)
 800197c:	f001 fb6c 	bl	8003058 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 8001984:	2001      	movs	r0, #1
 8001986:	f000 fea7 	bl	80026d8 <HAL_Delay>
							if (duty_cycleb>=100)
 800198a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198c:	2b63      	cmp	r3, #99	; 0x63
 800198e:	dd02      	ble.n	8001996 <main+0x946>
								duty_cycleb=100;
 8001990:	2364      	movs	r3, #100	; 0x64
 8001992:	647b      	str	r3, [r7, #68]	; 0x44
 8001994:	e002      	b.n	800199c <main+0x94c>
							else
							{
								duty_cycleb++;
 8001996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001998:	3301      	adds	r3, #1
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
							}
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycleb*10);
 800199c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b88      	ldr	r3, [pc, #544]	; (8001bcc <main+0xb7c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 80019ae:	2104      	movs	r1, #4
 80019b0:	4885      	ldr	r0, [pc, #532]	; (8001bc8 <main+0xb78>)
 80019b2:	f001 fb51 	bl	8003058 <HAL_GPIO_ReadPin>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4293      	cmp	r3, r2
 80019be:	d101      	bne.n	80019c4 <main+0x974>
								etatsw=0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 80019c4:	2104      	movs	r1, #4
 80019c6:	4880      	ldr	r0, [pc, #512]	; (8001bc8 <main+0xb78>)
 80019c8:	f001 fb46 	bl	8003058 <HAL_GPIO_ReadPin>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461c      	mov	r4, r3
 80019d0:	2102      	movs	r1, #2
 80019d2:	487d      	ldr	r0, [pc, #500]	; (8001bc8 <main+0xb78>)
 80019d4:	f001 fb40 	bl	8003058 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	429c      	cmp	r4, r3
 80019dc:	d001      	beq.n	80019e2 <main+0x992>
								etatsw=2;
 80019de:	2302      	movs	r3, #2
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==1)
 80019e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d0c7      	beq.n	8001978 <main+0x928>
						}
					}
				}
				if(SW1==0)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10a      	bne.n	8001a04 <main+0x9b4>
				{
					duty_cycleb=0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycleb*10);
 80019f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <main+0xb7c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34
				}
				if(SW2==0)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8218 	bne.w	8001e3c <main+0xdec>
				{
					initSEG();
 8001a0c:	f7fe ff12 	bl	8000834 <initSEG>
					HAL_Delay(200);
 8001a10:	20c8      	movs	r0, #200	; 0xc8
 8001a12:	f000 fe61 	bl	80026d8 <HAL_Delay>
					etat=freq;
 8001a16:	4b6e      	ldr	r3, [pc, #440]	; (8001bd0 <main+0xb80>)
 8001a18:	2204      	movs	r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
				}
				break;
 8001a1c:	e20e      	b.n	8001e3c <main+0xdec>

			case freq:
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001a1e:	2104      	movs	r1, #4
 8001a20:	4869      	ldr	r0, [pc, #420]	; (8001bc8 <main+0xb78>)
 8001a22:	f001 fb19 	bl	8003058 <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	61bb      	str	r3, [r7, #24]
				lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8001a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2e:	4869      	ldr	r0, [pc, #420]	; (8001bd4 <main+0xb84>)
 8001a30:	f001 fb12 	bl	8003058 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	61fb      	str	r3, [r7, #28]
				static int u=0;

				affichageDig(frequency,delai,GAUCHE,9901,1);
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f242 63ad 	movw	r3, #9901	; 0x26ad
 8001a40:	2200      	movs	r2, #0
 8001a42:	6a39      	ldr	r1, [r7, #32]
 8001a44:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001a46:	f7fe ffe3 	bl	8000a10 <affichageDig>
				affichageDig(duty_cycleb,delai,DROITE,100,0);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2364      	movs	r3, #100	; 0x64
 8001a50:	2201      	movs	r2, #1
 8001a52:	6a39      	ldr	r1, [r7, #32]
 8001a54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a56:	f7fe ffdb 	bl	8000a10 <affichageDig>

				//Rotary Switch Duty Cycle
				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	485a      	ldr	r0, [pc, #360]	; (8001bc8 <main+0xb78>)
 8001a5e:	f001 fafb 	bl	8003058 <HAL_GPIO_ReadPin>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	f000 8090 	beq.w	8001b8e <main+0xb3e>
				{
					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001a6e:	2104      	movs	r1, #4
 8001a70:	4855      	ldr	r0, [pc, #340]	; (8001bc8 <main+0xb78>)
 8001a72:	f001 faf1 	bl	8003058 <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461c      	mov	r4, r3
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4852      	ldr	r0, [pc, #328]	; (8001bc8 <main+0xb78>)
 8001a7e:	f001 faeb 	bl	8003058 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	429c      	cmp	r4, r3
 8001a86:	d041      	beq.n	8001b0c <main+0xabc>
					{
						etatsw=2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==2)
 8001a8c:	e03a      	b.n	8001b04 <main+0xab4>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001a8e:	2104      	movs	r1, #4
 8001a90:	484d      	ldr	r0, [pc, #308]	; (8001bc8 <main+0xb78>)
 8001a92:	f001 fae1 	bl	8003058 <HAL_GPIO_ReadPin>
 8001a96:	4603      	mov	r3, r0
 8001a98:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 fe1c 	bl	80026d8 <HAL_Delay>
							if (duty_cycleb<=0)
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dc02      	bgt.n	8001aac <main+0xa5c>
								duty_cycleb=0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8001aaa:	e002      	b.n	8001ab2 <main+0xa62>
							else
							{
								duty_cycleb--;
 8001aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	647b      	str	r3, [r7, #68]	; 0x44
							}
							compare=duty_cycleb*autoreload/100;
 8001ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	4a47      	ldr	r2, [pc, #284]	; (8001bd8 <main+0xb88>)
 8001abc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac0:	1152      	asrs	r2, r2, #5
 8001ac2:	17db      	asrs	r3, r3, #31
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	63bb      	str	r3, [r7, #56]	; 0x38
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compare);
 8001ac8:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <main+0xb8c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ace:	639a      	str	r2, [r3, #56]	; 0x38
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	483d      	ldr	r0, [pc, #244]	; (8001bc8 <main+0xb78>)
 8001ad4:	f001 fac0 	bl	8003058 <HAL_GPIO_ReadPin>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <main+0xa96>
								etatsw=0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	4837      	ldr	r0, [pc, #220]	; (8001bc8 <main+0xb78>)
 8001aea:	f001 fab5 	bl	8003058 <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461c      	mov	r4, r3
 8001af2:	2102      	movs	r1, #2
 8001af4:	4834      	ldr	r0, [pc, #208]	; (8001bc8 <main+0xb78>)
 8001af6:	f001 faaf 	bl	8003058 <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	429c      	cmp	r4, r3
 8001afe:	d101      	bne.n	8001b04 <main+0xab4>
								etatsw=1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==2)
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d0c1      	beq.n	8001a8e <main+0xa3e>
 8001b0a:	e040      	b.n	8001b8e <main+0xb3e>
						}
					}
					else
					{
						etatsw=1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==1)
 8001b10:	e03a      	b.n	8001b88 <main+0xb38>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001b12:	2104      	movs	r1, #4
 8001b14:	482c      	ldr	r0, [pc, #176]	; (8001bc8 <main+0xb78>)
 8001b16:	f001 fa9f 	bl	8003058 <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f000 fdda 	bl	80026d8 <HAL_Delay>
							if (duty_cycleb>=100)
 8001b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b26:	2b63      	cmp	r3, #99	; 0x63
 8001b28:	dd02      	ble.n	8001b30 <main+0xae0>
								duty_cycleb=100;
 8001b2a:	2364      	movs	r3, #100	; 0x64
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b2e:	e002      	b.n	8001b36 <main+0xae6>
							else
							{
								duty_cycleb++;
 8001b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b32:	3301      	adds	r3, #1
 8001b34:	647b      	str	r3, [r7, #68]	; 0x44
							}
							compare=duty_cycleb*autoreload/100;
 8001b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <main+0xb88>)
 8001b40:	fb82 1203 	smull	r1, r2, r2, r3
 8001b44:	1152      	asrs	r2, r2, #5
 8001b46:	17db      	asrs	r3, r3, #31
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compare);
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <main+0xb8c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 8001b54:	2104      	movs	r1, #4
 8001b56:	481c      	ldr	r0, [pc, #112]	; (8001bc8 <main+0xb78>)
 8001b58:	f001 fa7e 	bl	8003058 <HAL_GPIO_ReadPin>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <main+0xb1a>
								etatsw=0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	4816      	ldr	r0, [pc, #88]	; (8001bc8 <main+0xb78>)
 8001b6e:	f001 fa73 	bl	8003058 <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461c      	mov	r4, r3
 8001b76:	2102      	movs	r1, #2
 8001b78:	4813      	ldr	r0, [pc, #76]	; (8001bc8 <main+0xb78>)
 8001b7a:	f001 fa6d 	bl	8003058 <HAL_GPIO_ReadPin>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	429c      	cmp	r4, r3
 8001b82:	d001      	beq.n	8001b88 <main+0xb38>
								etatsw=2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
						while(etatsw==1)
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d0c1      	beq.n	8001b12 <main+0xac2>
						}
					}
				}
				//Rotary Switch for frequency
				if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=lastState)
 8001b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b92:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <main+0xb84>)
 8001b94:	f001 fa60 	bl	8003058 <HAL_GPIO_ReadPin>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	f000 80d8 	beq.w	8001d54 <main+0xd04>
								{
									if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8001ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba8:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <main+0xb84>)
 8001baa:	f001 fa55 	bl	8003058 <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461c      	mov	r4, r3
 8001bb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <main+0xb84>)
 8001bb8:	f001 fa4e 	bl	8003058 <HAL_GPIO_ReadPin>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	429c      	cmp	r4, r3
 8001bc0:	d068      	beq.n	8001c94 <main+0xc44>
									{
										etatsw2=2;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
										while(etatsw2==2)
 8001bc6:	e061      	b.n	8001c8c <main+0xc3c>
 8001bc8:	40010c00 	.word	0x40010c00
 8001bcc:	20000044 	.word	0x20000044
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	40011000 	.word	0x40011000
 8001bd8:	51eb851f 	.word	0x51eb851f
 8001bdc:	200000bc 	.word	0x200000bc
										{
											lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8001be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be4:	489a      	ldr	r0, [pc, #616]	; (8001e50 <main+0xe00>)
 8001be6:	f001 fa37 	bl	8003058 <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	61fb      	str	r3, [r7, #28]
											HAL_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 fd72 	bl	80026d8 <HAL_Delay>
											if (frequency<=1)
 8001bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	dc01      	bgt.n	8001bfe <main+0xbae>
												frequency=1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	643b      	str	r3, [r7, #64]	; 0x40
											if(frequency>200)
 8001bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c00:	2bc8      	cmp	r3, #200	; 0xc8
 8001c02:	dd03      	ble.n	8001c0c <main+0xbbc>
												frequency-=100;
 8001c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c06:	3b64      	subs	r3, #100	; 0x64
 8001c08:	643b      	str	r3, [r7, #64]	; 0x40
 8001c0a:	e002      	b.n	8001c12 <main+0xbc2>
											else
												frequency-=10;
 8001c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c0e:	3b0a      	subs	r3, #10
 8001c10:	643b      	str	r3, [r7, #64]	; 0x40

											autoreload=40000000/((TIM2->PSC)*(frequency));
 8001c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	4a8d      	ldr	r2, [pc, #564]	; (8001e54 <main+0xe04>)
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
											compare=duty_cycleb*autoreload/100;
 8001c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	4a8a      	ldr	r2, [pc, #552]	; (8001e58 <main+0xe08>)
 8001c30:	fb82 1203 	smull	r1, r2, r2, r3
 8001c34:	1152      	asrs	r2, r2, #5
 8001c36:	17db      	asrs	r3, r3, #31
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
											__HAL_TIM_SET_AUTORELOAD(&htim2,autoreload);
 8001c3c:	4b87      	ldr	r3, [pc, #540]	; (8001e5c <main+0xe0c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	4a85      	ldr	r2, [pc, #532]	; (8001e5c <main+0xe0c>)
 8001c48:	60d3      	str	r3, [r2, #12]
											__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compare);
 8001c4a:	4b84      	ldr	r3, [pc, #528]	; (8001e5c <main+0xe0c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c50:	639a      	str	r2, [r3, #56]	; 0x38
											if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)==lastState)
 8001c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c56:	487e      	ldr	r0, [pc, #504]	; (8001e50 <main+0xe00>)
 8001c58:	f001 f9fe 	bl	8003058 <HAL_GPIO_ReadPin>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <main+0xc1a>
												etatsw2=0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
											if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)==HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8001c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6e:	4878      	ldr	r0, [pc, #480]	; (8001e50 <main+0xe00>)
 8001c70:	f001 f9f2 	bl	8003058 <HAL_GPIO_ReadPin>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461c      	mov	r4, r3
 8001c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7c:	4874      	ldr	r0, [pc, #464]	; (8001e50 <main+0xe00>)
 8001c7e:	f001 f9eb 	bl	8003058 <HAL_GPIO_ReadPin>
 8001c82:	4603      	mov	r3, r0
 8001c84:	429c      	cmp	r4, r3
 8001c86:	d101      	bne.n	8001c8c <main+0xc3c>
												etatsw2=1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
										while(etatsw2==2)
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d0a6      	beq.n	8001be0 <main+0xb90>
 8001c92:	e05f      	b.n	8001d54 <main+0xd04>
										}
									}
									else
									{
										etatsw2=1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
										while(etatsw2==1)
 8001c98:	e059      	b.n	8001d4e <main+0xcfe>
										{
											lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8001c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9e:	486c      	ldr	r0, [pc, #432]	; (8001e50 <main+0xe00>)
 8001ca0:	f001 f9da 	bl	8003058 <HAL_GPIO_ReadPin>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	61fb      	str	r3, [r7, #28]
											HAL_Delay(1);
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f000 fd15 	bl	80026d8 <HAL_Delay>
											if (frequency>9801)
 8001cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb0:	f242 6249 	movw	r2, #9801	; 0x2649
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	dd03      	ble.n	8001cc0 <main+0xc70>
												frequency=9901;
 8001cb8:	f242 63ad 	movw	r3, #9901	; 0x26ad
 8001cbc:	643b      	str	r3, [r7, #64]	; 0x40
 8001cbe:	e009      	b.n	8001cd4 <main+0xc84>
											else if(frequency>200)
 8001cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc2:	2bc8      	cmp	r3, #200	; 0xc8
 8001cc4:	dd03      	ble.n	8001cce <main+0xc7e>
												frequency+=100;
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc8:	3364      	adds	r3, #100	; 0x64
 8001cca:	643b      	str	r3, [r7, #64]	; 0x40
 8001ccc:	e002      	b.n	8001cd4 <main+0xc84>
											else
												frequency+=10;
 8001cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd0:	330a      	adds	r3, #10
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40

											autoreload=40000000/((TIM2->PSC)*(frequency));
 8001cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	4a5c      	ldr	r2, [pc, #368]	; (8001e54 <main+0xe04>)
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
											compare=duty_cycleb*autoreload/100;
 8001ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	4a59      	ldr	r2, [pc, #356]	; (8001e58 <main+0xe08>)
 8001cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf6:	1152      	asrs	r2, r2, #5
 8001cf8:	17db      	asrs	r3, r3, #31
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
											__HAL_TIM_SET_AUTORELOAD(&htim2,autoreload);
 8001cfe:	4b57      	ldr	r3, [pc, #348]	; (8001e5c <main+0xe0c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d04:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d08:	4a54      	ldr	r2, [pc, #336]	; (8001e5c <main+0xe0c>)
 8001d0a:	60d3      	str	r3, [r2, #12]
											__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compare);
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <main+0xe0c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38

											if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)==lastState)
 8001d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d18:	484d      	ldr	r0, [pc, #308]	; (8001e50 <main+0xe00>)
 8001d1a:	f001 f99d 	bl	8003058 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <main+0xcdc>
												etatsw2=0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
											if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8001d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d30:	4847      	ldr	r0, [pc, #284]	; (8001e50 <main+0xe00>)
 8001d32:	f001 f991 	bl	8003058 <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461c      	mov	r4, r3
 8001d3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d3e:	4844      	ldr	r0, [pc, #272]	; (8001e50 <main+0xe00>)
 8001d40:	f001 f98a 	bl	8003058 <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	429c      	cmp	r4, r3
 8001d48:	d001      	beq.n	8001d4e <main+0xcfe>
												etatsw2=2;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
										while(etatsw2==1)
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d0a2      	beq.n	8001c9a <main+0xc4a>
										}
									}
								}
				if(SW1==0)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d123      	bne.n	8001da2 <main+0xd52>
				{
					frequency=101;
 8001d5a:	2365      	movs	r3, #101	; 0x65
 8001d5c:	643b      	str	r3, [r7, #64]	; 0x40
					autoreload=40000000/((TIM2->PSC)*(frequency));
 8001d5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	4a3a      	ldr	r2, [pc, #232]	; (8001e54 <main+0xe04>)
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	63fb      	str	r3, [r7, #60]	; 0x3c
					__HAL_TIM_SET_AUTORELOAD(&htim2,autoreload);
 8001d72:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <main+0xe0c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d7c:	4a37      	ldr	r2, [pc, #220]	; (8001e5c <main+0xe0c>)
 8001d7e:	60d3      	str	r3, [r2, #12]
					duty_cycleb=20;
 8001d80:	2314      	movs	r3, #20
 8001d82:	647b      	str	r3, [r7, #68]	; 0x44
					compare=duty_cycleb*autoreload/100;
 8001d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	4a32      	ldr	r2, [pc, #200]	; (8001e58 <main+0xe08>)
 8001d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d92:	1152      	asrs	r2, r2, #5
 8001d94:	17db      	asrs	r3, r3, #31
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	63bb      	str	r3, [r7, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compare);
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <main+0xe0c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
				}
				if(SW2==0)
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <main+0xd68>
				{
					initSEG();
 8001da8:	f7fe fd44 	bl	8000834 <initSEG>
					HAL_Delay(200);
 8001dac:	20c8      	movs	r0, #200	; 0xc8
 8001dae:	f000 fc93 	bl	80026d8 <HAL_Delay>
					etat=tachefond;
 8001db2:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <main+0xe10>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
				}
				__HAL_TIM_SET_AUTORELOAD(&htim2,autoreload);
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <main+0xe0c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc2:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <main+0xe0c>)
 8001dc4:	60d3      	str	r3, [r2, #12]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compare);
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <main+0xe0c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38

				u++;
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <main+0xe14>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <main+0xe14>)
 8001dd6:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(PC3_GPIO_Port,PC3_Pin , GPIO_PIN_SET);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2108      	movs	r1, #8
 8001ddc:	481c      	ldr	r0, [pc, #112]	; (8001e50 <main+0xe00>)
 8001dde:	f001 f952 	bl	8003086 <HAL_GPIO_WritePin>
					HAL_Delay(0.01*u);
 8001de2:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <main+0xe14>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fc9a 	bl	8000720 <__aeabi_i2d>
 8001dec:	a316      	add	r3, pc, #88	; (adr r3, 8001e48 <main+0xdf8>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	f7fe fa19 	bl	8000228 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fcf9 	bl	80007f4 <__aeabi_d2uiz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fc67 	bl	80026d8 <HAL_Delay>
					HAL_GPIO_WritePin(PC3_GPIO_Port,PC3_Pin , GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	4810      	ldr	r0, [pc, #64]	; (8001e50 <main+0xe00>)
 8001e10:	f001 f939 	bl	8003086 <HAL_GPIO_WritePin>
				if(u>100000)
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <main+0xe14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <main+0xe18>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	f77f a983 	ble.w	8001126 <main+0xd6>
				{
					u=0;
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <main+0xe14>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f7ff b97e 	b.w	8001126 <main+0xd6>
			break;
 8001e2a:	bf00      	nop
 8001e2c:	f7ff b97b 	b.w	8001126 <main+0xd6>
				break;
 8001e30:	bf00      	nop
 8001e32:	f7ff b978 	b.w	8001126 <main+0xd6>
				break;
 8001e36:	bf00      	nop
 8001e38:	f7ff b975 	b.w	8001126 <main+0xd6>
				break;
 8001e3c:	bf00      	nop
		SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8001e3e:	f7ff b972 	b.w	8001126 <main+0xd6>
 8001e42:	bf00      	nop
 8001e44:	f3af 8000 	nop.w
 8001e48:	47ae147b 	.word	0x47ae147b
 8001e4c:	3f847ae1 	.word	0x3f847ae1
 8001e50:	40011000 	.word	0x40011000
 8001e54:	02625a00 	.word	0x02625a00
 8001e58:	51eb851f 	.word	0x51eb851f
 8001e5c:	200000bc 	.word	0x200000bc
 8001e60:	20000000 	.word	0x20000000
 8001e64:	20000040 	.word	0x20000040
 8001e68:	000186a0 	.word	0x000186a0

08001e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b096      	sub	sp, #88	; 0x58
 8001e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e76:	2228      	movs	r2, #40	; 0x28
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f002 fc0e 	bl	800469c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eac:	2302      	movs	r3, #2
 8001eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8001eb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eb8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 f8fa 	bl	80030b8 <HAL_RCC_OscConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001eca:	f000 fa43 	bl	8002354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ece:	230f      	movs	r3, #15
 8001ed0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4618      	mov	r0, r3
 8001eec:	f001 fb64 	bl	80035b8 <HAL_RCC_ClockConfig>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ef6:	f000 fa2d 	bl	8002354 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001efa:	2302      	movs	r3, #2
 8001efc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f02:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fcbe 	bl	8003888 <HAL_RCCEx_PeriphCLKConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001f12:	f000 fa1f 	bl	8002354 <Error_Handler>
  }
}
 8001f16:	bf00      	nop
 8001f18:	3758      	adds	r7, #88	; 0x58
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <MX_ADC1_Init+0x74>)
 8001f32:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <MX_ADC1_Init+0x78>)
 8001f34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <MX_ADC1_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <MX_ADC1_Init+0x74>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <MX_ADC1_Init+0x74>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <MX_ADC1_Init+0x74>)
 8001f4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MX_ADC1_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_ADC1_Init+0x74>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <MX_ADC1_Init+0x74>)
 8001f5e:	f000 fbdf 	bl	8002720 <HAL_ADC_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001f68:	f000 f9f4 	bl	8002354 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_ADC1_Init+0x74>)
 8001f7e:	f000 fcb9 	bl	80028f4 <HAL_ADC_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001f88:	f000 f9e4 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2000008c 	.word	0x2000008c
 8001f98:	40012400 	.word	0x40012400

08001f9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	; 0x38
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
 8001fc8:	615a      	str	r2, [r3, #20]
 8001fca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <MX_TIM2_Init+0x118>)
 8001fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000;
 8001fd4:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <MX_TIM2_Init+0x118>)
 8001fd6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fdc:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <MX_TIM2_Init+0x118>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001fe2:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <MX_TIM2_Init+0x118>)
 8001fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fe8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fea:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <MX_TIM2_Init+0x118>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff0:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <MX_TIM2_Init+0x118>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ff6:	482f      	ldr	r0, [pc, #188]	; (80020b4 <MX_TIM2_Init+0x118>)
 8001ff8:	f001 fcfc 	bl	80039f4 <HAL_TIM_Base_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002002:	f000 f9a7 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800200c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002010:	4619      	mov	r1, r3
 8002012:	4828      	ldr	r0, [pc, #160]	; (80020b4 <MX_TIM2_Init+0x118>)
 8002014:	f001 ff0e 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800201e:	f000 f999 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002022:	4824      	ldr	r0, [pc, #144]	; (80020b4 <MX_TIM2_Init+0x118>)
 8002024:	f001 fd35 	bl	8003a92 <HAL_TIM_PWM_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800202e:	f000 f991 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800203a:	f107 0320 	add.w	r3, r7, #32
 800203e:	4619      	mov	r1, r3
 8002040:	481c      	ldr	r0, [pc, #112]	; (80020b4 <MX_TIM2_Init+0x118>)
 8002042:	f002 fa9b 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800204c:	f000 f982 	bl	8002354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002050:	2360      	movs	r3, #96	; 0x60
 8002052:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8002054:	2314      	movs	r3, #20
 8002056:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	2204      	movs	r2, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4813      	ldr	r0, [pc, #76]	; (80020b4 <MX_TIM2_Init+0x118>)
 8002068:	f001 fe26 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002072:	f000 f96f 	bl	8002354 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2208      	movs	r2, #8
 800207e:	4619      	mov	r1, r3
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <MX_TIM2_Init+0x118>)
 8002082:	f001 fe19 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800208c:	f000 f962 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	220c      	movs	r2, #12
 8002094:	4619      	mov	r1, r3
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <MX_TIM2_Init+0x118>)
 8002098:	f001 fe0e 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80020a2:	f000 f957 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020a6:	4803      	ldr	r0, [pc, #12]	; (80020b4 <MX_TIM2_Init+0x118>)
 80020a8:	f000 f9f8 	bl	800249c <HAL_TIM_MspPostInit>

}
 80020ac:	bf00      	nop
 80020ae:	3738      	adds	r7, #56	; 0x38
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200000bc 	.word	0x200000bc

080020b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08e      	sub	sp, #56	; 0x38
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020cc:	f107 0320 	add.w	r3, r7, #32
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
 80020e4:	615a      	str	r2, [r3, #20]
 80020e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020e8:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <MX_TIM3_Init+0x110>)
 80020ea:	4a38      	ldr	r2, [pc, #224]	; (80021cc <MX_TIM3_Init+0x114>)
 80020ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80020ee:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <MX_TIM3_Init+0x110>)
 80020f0:	2204      	movs	r2, #4
 80020f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <MX_TIM3_Init+0x110>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80020fa:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <MX_TIM3_Init+0x110>)
 80020fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002100:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002102:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <MX_TIM3_Init+0x110>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002108:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <MX_TIM3_Init+0x110>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800210e:	482e      	ldr	r0, [pc, #184]	; (80021c8 <MX_TIM3_Init+0x110>)
 8002110:	f001 fc70 	bl	80039f4 <HAL_TIM_Base_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800211a:	f000 f91b 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002128:	4619      	mov	r1, r3
 800212a:	4827      	ldr	r0, [pc, #156]	; (80021c8 <MX_TIM3_Init+0x110>)
 800212c:	f001 fe82 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002136:	f000 f90d 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800213a:	4823      	ldr	r0, [pc, #140]	; (80021c8 <MX_TIM3_Init+0x110>)
 800213c:	f001 fca9 	bl	8003a92 <HAL_TIM_PWM_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002146:	f000 f905 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002152:	f107 0320 	add.w	r3, r7, #32
 8002156:	4619      	mov	r1, r3
 8002158:	481b      	ldr	r0, [pc, #108]	; (80021c8 <MX_TIM3_Init+0x110>)
 800215a:	f002 fa0f 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002164:	f000 f8f6 	bl	8002354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002168:	2360      	movs	r3, #96	; 0x60
 800216a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 800216c:	2314      	movs	r3, #20
 800216e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2200      	movs	r2, #0
 800217c:	4619      	mov	r1, r3
 800217e:	4812      	ldr	r0, [pc, #72]	; (80021c8 <MX_TIM3_Init+0x110>)
 8002180:	f001 fd9a 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800218a:	f000 f8e3 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2204      	movs	r2, #4
 8002192:	4619      	mov	r1, r3
 8002194:	480c      	ldr	r0, [pc, #48]	; (80021c8 <MX_TIM3_Init+0x110>)
 8002196:	f001 fd8f 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80021a0:	f000 f8d8 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	2208      	movs	r2, #8
 80021a8:	4619      	mov	r1, r3
 80021aa:	4807      	ldr	r0, [pc, #28]	; (80021c8 <MX_TIM3_Init+0x110>)
 80021ac:	f001 fd84 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80021b6:	f000 f8cd 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021ba:	4803      	ldr	r0, [pc, #12]	; (80021c8 <MX_TIM3_Init+0x110>)
 80021bc:	f000 f96e 	bl	800249c <HAL_TIM_MspPostInit>

}
 80021c0:	bf00      	nop
 80021c2:	3738      	adds	r7, #56	; 0x38
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000044 	.word	0x20000044
 80021cc:	40000400 	.word	0x40000400

080021d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e4:	4b56      	ldr	r3, [pc, #344]	; (8002340 <MX_GPIO_Init+0x170>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a55      	ldr	r2, [pc, #340]	; (8002340 <MX_GPIO_Init+0x170>)
 80021ea:	f043 0310 	orr.w	r3, r3, #16
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <MX_GPIO_Init+0x170>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <MX_GPIO_Init+0x170>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <MX_GPIO_Init+0x170>)
 8002202:	f043 0320 	orr.w	r3, r3, #32
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <MX_GPIO_Init+0x170>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <MX_GPIO_Init+0x170>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a49      	ldr	r2, [pc, #292]	; (8002340 <MX_GPIO_Init+0x170>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b47      	ldr	r3, [pc, #284]	; (8002340 <MX_GPIO_Init+0x170>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	4b44      	ldr	r3, [pc, #272]	; (8002340 <MX_GPIO_Init+0x170>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a43      	ldr	r2, [pc, #268]	; (8002340 <MX_GPIO_Init+0x170>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <MX_GPIO_Init+0x170>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_Pin|PC4_Pin|PC5_Pin|SEG_B_Pin
 8002244:	2201      	movs	r2, #1
 8002246:	f641 4138 	movw	r1, #7224	; 0x1c38
 800224a:	483e      	ldr	r0, [pc, #248]	; (8002344 <MX_GPIO_Init+0x174>)
 800224c:	f000 ff1b 	bl	8003086 <HAL_GPIO_WritePin>
                          |SEG_C_Pin|SEG_D_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 8002250:	2201      	movs	r2, #1
 8002252:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 8002256:	483c      	ldr	r0, [pc, #240]	; (8002348 <MX_GPIO_Init+0x178>)
 8002258:	f000 ff15 	bl	8003086 <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT4_Pin
                          |DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 800225c:	2201      	movs	r2, #1
 800225e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002262:	483a      	ldr	r0, [pc, #232]	; (800234c <MX_GPIO_Init+0x17c>)
 8002264:	f000 ff0f 	bl	8003086 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8002268:	2201      	movs	r2, #1
 800226a:	2104      	movs	r1, #4
 800226c:	4838      	ldr	r0, [pc, #224]	; (8002350 <MX_GPIO_Init+0x180>)
 800226e:	f000 ff0a 	bl	8003086 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROT_A_2_Pin ROT_B_2_Pin ROT_SW_2_Pin */
  GPIO_InitStruct.Pin = ROT_A_2_Pin|ROT_B_2_Pin|ROT_SW_2_Pin;
 8002272:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227c:	2301      	movs	r3, #1
 800227e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	4619      	mov	r1, r3
 8002286:	482f      	ldr	r0, [pc, #188]	; (8002344 <MX_GPIO_Init+0x174>)
 8002288:	f000 fd52 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_Pin PC4_Pin PC5_Pin SEG_B_Pin
                           SEG_C_Pin SEG_D_Pin */
  GPIO_InitStruct.Pin = PC3_Pin|PC4_Pin|PC5_Pin|SEG_B_Pin
 800228c:	f641 4338 	movw	r3, #7224	; 0x1c38
 8002290:	613b      	str	r3, [r7, #16]
                          |SEG_C_Pin|SEG_D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2302      	movs	r3, #2
 800229c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4619      	mov	r1, r3
 80022a4:	4827      	ldr	r0, [pc, #156]	; (8002344 <MX_GPIO_Init+0x174>)
 80022a6:	f000 fd43 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_1_Pin ROT_B_1_Pin ROT_A_1_Pin */
  GPIO_InitStruct.Pin = ROT_SW_1_Pin|ROT_B_1_Pin|ROT_A_1_Pin;
 80022aa:	2307      	movs	r3, #7
 80022ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b2:	2301      	movs	r3, #1
 80022b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	4619      	mov	r1, r3
 80022bc:	4822      	ldr	r0, [pc, #136]	; (8002348 <MX_GPIO_Init+0x178>)
 80022be:	f000 fd37 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT8_Pin DIGIT7_Pin DIGIT6_Pin DIGIT5_Pin
                           DIGIT4_Pin DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 80022c2:	f24f 33c0 	movw	r3, #62400	; 0xf3c0
 80022c6:	613b      	str	r3, [r7, #16]
                          |DIGIT4_Pin|DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c8:	2301      	movs	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	4619      	mov	r1, r3
 80022da:	481b      	ldr	r0, [pc, #108]	; (8002348 <MX_GPIO_Init+0x178>)
 80022dc:	f000 fd28 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_A_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin;
 80022e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2302      	movs	r3, #2
 80022f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_A_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	4619      	mov	r1, r3
 80022f8:	4814      	ldr	r0, [pc, #80]	; (800234c <MX_GPIO_Init+0x17c>)
 80022fa:	f000 fd19 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_E_Pin */
  GPIO_InitStruct.Pin = SEG_E_Pin;
 80022fe:	2304      	movs	r3, #4
 8002300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2302      	movs	r3, #2
 800230c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_E_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4619      	mov	r1, r3
 8002314:	480e      	ldr	r0, [pc, #56]	; (8002350 <MX_GPIO_Init+0x180>)
 8002316:	f000 fd0b 	bl	8002d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
  GPIO_InitStruct.Pin = SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
 800231a:	2338      	movs	r3, #56	; 0x38
 800231c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2301      	movs	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2302      	movs	r3, #2
 8002328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	4619      	mov	r1, r3
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_GPIO_Init+0x178>)
 8002332:	f000 fcfd 	bl	8002d30 <HAL_GPIO_Init>

}
 8002336:	bf00      	nop
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	40011000 	.word	0x40011000
 8002348:	40010c00 	.word	0x40010c00
 800234c:	40010800 	.word	0x40010800
 8002350:	40011400 	.word	0x40011400

08002354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002358:	b672      	cpsid	i
}
 800235a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800235c:	e7fe      	b.n	800235c <Error_Handler+0x8>
	...

08002360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_MspInit+0x5c>)
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	4a14      	ldr	r2, [pc, #80]	; (80023bc <HAL_MspInit+0x5c>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6193      	str	r3, [r2, #24]
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_MspInit+0x5c>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_MspInit+0x5c>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <HAL_MspInit+0x5c>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	61d3      	str	r3, [r2, #28]
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_MspInit+0x5c>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_MspInit+0x60>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_MspInit+0x60>)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40010000 	.word	0x40010000

080023c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_ADC_MspInit+0x6c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d121      	bne.n	8002428 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_ADC_MspInit+0x70>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <HAL_ADC_MspInit+0x70>)
 80023ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_ADC_MspInit+0x70>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_ADC_MspInit+0x70>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <HAL_ADC_MspInit+0x70>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_ADC_MspInit+0x70>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002414:	2330      	movs	r3, #48	; 0x30
 8002416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002418:	2303      	movs	r3, #3
 800241a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	4619      	mov	r1, r3
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <HAL_ADC_MspInit+0x74>)
 8002424:	f000 fc84 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002428:	bf00      	nop
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40012400 	.word	0x40012400
 8002434:	40021000 	.word	0x40021000
 8002438:	40010800 	.word	0x40010800

0800243c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244c:	d10c      	bne.n	8002468 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_TIM_Base_MspInit+0x58>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <HAL_TIM_Base_MspInit+0x58>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_TIM_Base_MspInit+0x58>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002466:	e010      	b.n	800248a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <HAL_TIM_Base_MspInit+0x5c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10b      	bne.n	800248a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_TIM_Base_MspInit+0x58>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_TIM_Base_MspInit+0x58>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	61d3      	str	r3, [r2, #28]
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_TIM_Base_MspInit+0x58>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40021000 	.word	0x40021000
 8002498:	40000400 	.word	0x40000400

0800249c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ba:	d118      	bne.n	80024ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024bc:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_TIM_MspPostInit+0xbc>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a25      	ldr	r2, [pc, #148]	; (8002558 <HAL_TIM_MspPostInit+0xbc>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_TIM_MspPostInit+0xbc>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024d4:	230e      	movs	r3, #14
 80024d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2302      	movs	r3, #2
 80024de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	481d      	ldr	r0, [pc, #116]	; (800255c <HAL_TIM_MspPostInit+0xc0>)
 80024e8:	f000 fc22 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024ec:	e02f      	b.n	800254e <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1b      	ldr	r2, [pc, #108]	; (8002560 <HAL_TIM_MspPostInit+0xc4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d12a      	bne.n	800254e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_TIM_MspPostInit+0xbc>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_TIM_MspPostInit+0xbc>)
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_TIM_MspPostInit+0xbc>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002510:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2302      	movs	r3, #2
 800251c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	480f      	ldr	r0, [pc, #60]	; (8002564 <HAL_TIM_MspPostInit+0xc8>)
 8002526:	f000 fc03 	bl	8002d30 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_TIM_MspPostInit+0xcc>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_TIM_MspPostInit+0xcc>)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	6053      	str	r3, [r2, #4]
}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000
 800255c:	40010800 	.word	0x40010800
 8002560:	40000400 	.word	0x40000400
 8002564:	40011000 	.word	0x40011000
 8002568:	40010000 	.word	0x40010000

0800256c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <NMI_Handler+0x4>

08002572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <HardFault_Handler+0x4>

08002578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <MemManage_Handler+0x4>

0800257e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002582:	e7fe      	b.n	8002582 <BusFault_Handler+0x4>

08002584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <UsageFault_Handler+0x4>

0800258a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b2:	f000 f875 	bl	80026a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}

080025ba <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
	...

080025c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025c8:	480c      	ldr	r0, [pc, #48]	; (80025fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ca:	490d      	ldr	r1, [pc, #52]	; (8002600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025cc:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d0:	e002      	b.n	80025d8 <LoopCopyDataInit>

080025d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025d6:	3304      	adds	r3, #4

080025d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025dc:	d3f9      	bcc.n	80025d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025e0:	4c0a      	ldr	r4, [pc, #40]	; (800260c <LoopFillZerobss+0x22>)
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e4:	e001      	b.n	80025ea <LoopFillZerobss>

080025e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e8:	3204      	adds	r2, #4

080025ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ec:	d3fb      	bcc.n	80025e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ee:	f7ff ffe4 	bl	80025ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025f2:	f002 f82f 	bl	8004654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025f6:	f7fe fd2b 	bl	8001050 <main>
  bx lr
 80025fa:	4770      	bx	lr
  ldr r0, =_sdata
 80025fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002600:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002604:	08004770 	.word	0x08004770
  ldr r2, =_sbss
 8002608:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800260c:	20000108 	.word	0x20000108

08002610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002610:	e7fe      	b.n	8002610 <ADC1_2_IRQHandler>
	...

08002614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_Init+0x28>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_Init+0x28>)
 800261e:	f043 0310 	orr.w	r3, r3, #16
 8002622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002624:	2003      	movs	r0, #3
 8002626:	f000 fb4f 	bl	8002cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262a:	200f      	movs	r0, #15
 800262c:	f000 f808 	bl	8002640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002630:	f7ff fe96 	bl	8002360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40022000 	.word	0x40022000

08002640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_InitTick+0x54>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_InitTick+0x58>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002656:	fbb3 f3f1 	udiv	r3, r3, r1
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fb59 	bl	8002d16 <HAL_SYSTICK_Config>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00e      	b.n	800268c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b0f      	cmp	r3, #15
 8002672:	d80a      	bhi.n	800268a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002674:	2200      	movs	r2, #0
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f000 fb2f 	bl	8002cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002680:	4a06      	ldr	r2, [pc, #24]	; (800269c <HAL_InitTick+0x5c>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000004 	.word	0x20000004
 8002698:	2000000c 	.word	0x2000000c
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_IncTick+0x1c>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_IncTick+0x20>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a03      	ldr	r2, [pc, #12]	; (80026c0 <HAL_IncTick+0x20>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	2000000c 	.word	0x2000000c
 80026c0:	20000104 	.word	0x20000104

080026c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTick;
 80026c8:	4b02      	ldr	r3, [pc, #8]	; (80026d4 <HAL_GetTick+0x10>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	20000104 	.word	0x20000104

080026d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7ff fff0 	bl	80026c4 <HAL_GetTick>
 80026e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d005      	beq.n	80026fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_Delay+0x44>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026fe:	bf00      	nop
 8002700:	f7ff ffe0 	bl	80026c4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	429a      	cmp	r2, r3
 800270e:	d8f7      	bhi.n	8002700 <HAL_Delay+0x28>
  {
  }
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	2000000c 	.word	0x2000000c

08002720 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0ce      	b.n	80028e0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fe30 	bl	80023c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f9bd 	bl	8002ae4 <ADC_ConversionStop_Disable>
 800276a:	4603      	mov	r3, r0
 800276c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 80a9 	bne.w	80028ce <HAL_ADC_Init+0x1ae>
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 80a5 	bne.w	80028ce <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800278c:	f023 0302 	bic.w	r3, r3, #2
 8002790:	f043 0202 	orr.w	r2, r3, #2
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4951      	ldr	r1, [pc, #324]	; (80028e8 <HAL_ADC_Init+0x1c8>)
 80027a2:	428b      	cmp	r3, r1
 80027a4:	d10a      	bne.n	80027bc <HAL_ADC_Init+0x9c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027ae:	d002      	beq.n	80027b6 <HAL_ADC_Init+0x96>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	e004      	b.n	80027c0 <HAL_ADC_Init+0xa0>
 80027b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80027ba:	e001      	b.n	80027c0 <HAL_ADC_Init+0xa0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7b1b      	ldrb	r3, [r3, #12]
 80027c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d8:	d003      	beq.n	80027e2 <HAL_ADC_Init+0xc2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <HAL_ADC_Init+0xc8>
 80027e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e6:	e000      	b.n	80027ea <HAL_ADC_Init+0xca>
 80027e8:	2300      	movs	r3, #0
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7d1b      	ldrb	r3, [r3, #20]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d119      	bne.n	800282c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7b1b      	ldrb	r3, [r3, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	3b01      	subs	r3, #1
 8002806:	035a      	lsls	r2, r3, #13
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	e00b      	b.n	800282c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_ADC_Init+0x1cc>)
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	430b      	orrs	r3, r1
 8002852:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285c:	d003      	beq.n	8002866 <HAL_ADC_Init+0x146>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d104      	bne.n	8002870 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	3b01      	subs	r3, #1
 800286c:	051b      	lsls	r3, r3, #20
 800286e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	430a      	orrs	r2, r1
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_ADC_Init+0x1d0>)
 800288c:	4013      	ands	r3, r2
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	d10b      	bne.n	80028ac <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028aa:	e018      	b.n	80028de <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	f023 0312 	bic.w	r3, r3, #18
 80028b4:	f043 0210 	orr.w	r2, r3, #16
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028cc:	e007      	b.n	80028de <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028de:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40013c00 	.word	0x40013c00
 80028ec:	ffe1f7fd 	.word	0xffe1f7fd
 80028f0:	ff1f0efe 	.word	0xff1f0efe

080028f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x20>
 8002910:	2302      	movs	r3, #2
 8002912:	e0dc      	b.n	8002ace <HAL_ADC_ConfigChannel+0x1da>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d81c      	bhi.n	800295e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b05      	subs	r3, #5
 8002936:	221f      	movs	r2, #31
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	4019      	ands	r1, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	3b05      	subs	r3, #5
 8002950:	fa00 f203 	lsl.w	r2, r0, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	; 0x34
 800295c:	e03c      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d81c      	bhi.n	80029a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	3b23      	subs	r3, #35	; 0x23
 8002978:	221f      	movs	r2, #31
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	4019      	ands	r1, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	3b23      	subs	r3, #35	; 0x23
 8002992:	fa00 f203 	lsl.w	r2, r0, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
 800299e:	e01b      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	3b41      	subs	r3, #65	; 0x41
 80029b2:	221f      	movs	r2, #31
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	4019      	ands	r1, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b41      	subs	r3, #65	; 0x41
 80029cc:	fa00 f203 	lsl.w	r2, r0, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b09      	cmp	r3, #9
 80029de:	d91c      	bls.n	8002a1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68d9      	ldr	r1, [r3, #12]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	3b1e      	subs	r3, #30
 80029f2:	2207      	movs	r2, #7
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	4019      	ands	r1, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6898      	ldr	r0, [r3, #8]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b1e      	subs	r3, #30
 8002a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	e019      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6919      	ldr	r1, [r3, #16]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4019      	ands	r1, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6898      	ldr	r0, [r3, #8]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	fa00 f203 	lsl.w	r2, r0, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d003      	beq.n	8002a5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a5a:	2b11      	cmp	r3, #17
 8002a5c:	d132      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d125      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d126      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_ADC_ConfigChannel+0x1e8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	0c9a      	lsrs	r2, r3, #18
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ab2:	e007      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40012400 	.word	0x40012400
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	431bde83 	.word	0x431bde83

08002ae4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d12e      	bne.n	8002b5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b0e:	f7ff fdd9 	bl	80026c4 <HAL_GetTick>
 8002b12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b14:	e01b      	b.n	8002b4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b16:	f7ff fdd5 	bl	80026c4 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d914      	bls.n	8002b4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d10d      	bne.n	8002b4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	f043 0210 	orr.w	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e007      	b.n	8002b5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d0dc      	beq.n	8002b16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b84:	4013      	ands	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9a:	4a04      	ldr	r2, [pc, #16]	; (8002bac <__NVIC_SetPriorityGrouping+0x44>)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	60d3      	str	r3, [r2, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	f003 0307 	and.w	r3, r3, #7
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	db0a      	blt.n	8002bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	490c      	ldr	r1, [pc, #48]	; (8002c18 <__NVIC_SetPriority+0x4c>)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf4:	e00a      	b.n	8002c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4908      	ldr	r1, [pc, #32]	; (8002c1c <__NVIC_SetPriority+0x50>)
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	3b04      	subs	r3, #4
 8002c04:	0112      	lsls	r2, r2, #4
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	440b      	add	r3, r1
 8002c0a:	761a      	strb	r2, [r3, #24]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f1c3 0307 	rsb	r3, r3, #7
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	bf28      	it	cs
 8002c3e:	2304      	movcs	r3, #4
 8002c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d902      	bls.n	8002c50 <NVIC_EncodePriority+0x30>
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3b03      	subs	r3, #3
 8002c4e:	e000      	b.n	8002c52 <NVIC_EncodePriority+0x32>
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	f04f 32ff 	mov.w	r2, #4294967295
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	401a      	ands	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c68:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43d9      	mvns	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	4313      	orrs	r3, r2
         );
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3724      	adds	r7, #36	; 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c94:	d301      	bcc.n	8002c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00f      	b.n	8002cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <SysTick_Config+0x40>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca2:	210f      	movs	r1, #15
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	f7ff ff90 	bl	8002bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <SysTick_Config+0x40>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb2:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <SysTick_Config+0x40>)
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	e000e010 	.word	0xe000e010

08002cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff49 	bl	8002b68 <__NVIC_SetPriorityGrouping>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf0:	f7ff ff5e 	bl	8002bb0 <__NVIC_GetPriorityGrouping>
 8002cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	6978      	ldr	r0, [r7, #20]
 8002cfc:	f7ff ff90 	bl	8002c20 <NVIC_EncodePriority>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff5f 	bl	8002bcc <__NVIC_SetPriority>
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffb0 	bl	8002c84 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b08b      	sub	sp, #44	; 0x2c
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d42:	e179      	b.n	8003038 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d44:	2201      	movs	r2, #1
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	f040 8168 	bne.w	8003032 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4aa0      	ldr	r2, [pc, #640]	; (8002fe8 <HAL_GPIO_Init+0x2b8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d05e      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d6c:	4a9e      	ldr	r2, [pc, #632]	; (8002fe8 <HAL_GPIO_Init+0x2b8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d875      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002d72:	4a9e      	ldr	r2, [pc, #632]	; (8002fec <HAL_GPIO_Init+0x2bc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d058      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d78:	4a9c      	ldr	r2, [pc, #624]	; (8002fec <HAL_GPIO_Init+0x2bc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d86f      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002d7e:	4a9c      	ldr	r2, [pc, #624]	; (8002ff0 <HAL_GPIO_Init+0x2c0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d052      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d84:	4a9a      	ldr	r2, [pc, #616]	; (8002ff0 <HAL_GPIO_Init+0x2c0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d869      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002d8a:	4a9a      	ldr	r2, [pc, #616]	; (8002ff4 <HAL_GPIO_Init+0x2c4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d04c      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d90:	4a98      	ldr	r2, [pc, #608]	; (8002ff4 <HAL_GPIO_Init+0x2c4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d863      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002d96:	4a98      	ldr	r2, [pc, #608]	; (8002ff8 <HAL_GPIO_Init+0x2c8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d046      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d9c:	4a96      	ldr	r2, [pc, #600]	; (8002ff8 <HAL_GPIO_Init+0x2c8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d85d      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002da2:	2b12      	cmp	r3, #18
 8002da4:	d82a      	bhi.n	8002dfc <HAL_GPIO_Init+0xcc>
 8002da6:	2b12      	cmp	r3, #18
 8002da8:	d859      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002daa:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <HAL_GPIO_Init+0x80>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002e2b 	.word	0x08002e2b
 8002db4:	08002e05 	.word	0x08002e05
 8002db8:	08002e17 	.word	0x08002e17
 8002dbc:	08002e59 	.word	0x08002e59
 8002dc0:	08002e5f 	.word	0x08002e5f
 8002dc4:	08002e5f 	.word	0x08002e5f
 8002dc8:	08002e5f 	.word	0x08002e5f
 8002dcc:	08002e5f 	.word	0x08002e5f
 8002dd0:	08002e5f 	.word	0x08002e5f
 8002dd4:	08002e5f 	.word	0x08002e5f
 8002dd8:	08002e5f 	.word	0x08002e5f
 8002ddc:	08002e5f 	.word	0x08002e5f
 8002de0:	08002e5f 	.word	0x08002e5f
 8002de4:	08002e5f 	.word	0x08002e5f
 8002de8:	08002e5f 	.word	0x08002e5f
 8002dec:	08002e5f 	.word	0x08002e5f
 8002df0:	08002e5f 	.word	0x08002e5f
 8002df4:	08002e0d 	.word	0x08002e0d
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	4a7f      	ldr	r2, [pc, #508]	; (8002ffc <HAL_GPIO_Init+0x2cc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e02:	e02c      	b.n	8002e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	623b      	str	r3, [r7, #32]
          break;
 8002e0a:	e029      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	3304      	adds	r3, #4
 8002e12:	623b      	str	r3, [r7, #32]
          break;
 8002e14:	e024      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	623b      	str	r3, [r7, #32]
          break;
 8002e1e:	e01f      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	330c      	adds	r3, #12
 8002e26:	623b      	str	r3, [r7, #32]
          break;
 8002e28:	e01a      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e32:	2304      	movs	r3, #4
 8002e34:	623b      	str	r3, [r7, #32]
          break;
 8002e36:	e013      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e40:	2308      	movs	r3, #8
 8002e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	611a      	str	r2, [r3, #16]
          break;
 8002e4a:	e009      	b.n	8002e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	615a      	str	r2, [r3, #20]
          break;
 8002e56:	e003      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	623b      	str	r3, [r7, #32]
          break;
 8002e5c:	e000      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          break;
 8002e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2bff      	cmp	r3, #255	; 0xff
 8002e64:	d801      	bhi.n	8002e6a <HAL_GPIO_Init+0x13a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	e001      	b.n	8002e6e <HAL_GPIO_Init+0x13e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2bff      	cmp	r3, #255	; 0xff
 8002e74:	d802      	bhi.n	8002e7c <HAL_GPIO_Init+0x14c>
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	e002      	b.n	8002e82 <HAL_GPIO_Init+0x152>
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	3b08      	subs	r3, #8
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	210f      	movs	r1, #15
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80c1 	beq.w	8003032 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002eb0:	4b53      	ldr	r3, [pc, #332]	; (8003000 <HAL_GPIO_Init+0x2d0>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4a52      	ldr	r2, [pc, #328]	; (8003000 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	4b50      	ldr	r3, [pc, #320]	; (8003000 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ec8:	4a4e      	ldr	r2, [pc, #312]	; (8003004 <HAL_GPIO_Init+0x2d4>)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a46      	ldr	r2, [pc, #280]	; (8003008 <HAL_GPIO_Init+0x2d8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d01f      	beq.n	8002f34 <HAL_GPIO_Init+0x204>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a45      	ldr	r2, [pc, #276]	; (800300c <HAL_GPIO_Init+0x2dc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d019      	beq.n	8002f30 <HAL_GPIO_Init+0x200>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a44      	ldr	r2, [pc, #272]	; (8003010 <HAL_GPIO_Init+0x2e0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <HAL_GPIO_Init+0x1fc>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a43      	ldr	r2, [pc, #268]	; (8003014 <HAL_GPIO_Init+0x2e4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00d      	beq.n	8002f28 <HAL_GPIO_Init+0x1f8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a42      	ldr	r2, [pc, #264]	; (8003018 <HAL_GPIO_Init+0x2e8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d007      	beq.n	8002f24 <HAL_GPIO_Init+0x1f4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a41      	ldr	r2, [pc, #260]	; (800301c <HAL_GPIO_Init+0x2ec>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_GPIO_Init+0x1f0>
 8002f1c:	2305      	movs	r3, #5
 8002f1e:	e00a      	b.n	8002f36 <HAL_GPIO_Init+0x206>
 8002f20:	2306      	movs	r3, #6
 8002f22:	e008      	b.n	8002f36 <HAL_GPIO_Init+0x206>
 8002f24:	2304      	movs	r3, #4
 8002f26:	e006      	b.n	8002f36 <HAL_GPIO_Init+0x206>
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e004      	b.n	8002f36 <HAL_GPIO_Init+0x206>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e002      	b.n	8002f36 <HAL_GPIO_Init+0x206>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <HAL_GPIO_Init+0x206>
 8002f34:	2300      	movs	r3, #0
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	f002 0203 	and.w	r2, r2, #3
 8002f3c:	0092      	lsls	r2, r2, #2
 8002f3e:	4093      	lsls	r3, r2
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f46:	492f      	ldr	r1, [pc, #188]	; (8003004 <HAL_GPIO_Init+0x2d4>)
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f60:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	492e      	ldr	r1, [pc, #184]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f6e:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	43db      	mvns	r3, r3
 8002f76:	492a      	ldr	r1, [pc, #168]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d006      	beq.n	8002f96 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4924      	ldr	r1, [pc, #144]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	4920      	ldr	r1, [pc, #128]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	491a      	ldr	r1, [pc, #104]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	4916      	ldr	r1, [pc, #88]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d025      	beq.n	8003024 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	4910      	ldr	r1, [pc, #64]	; (8003020 <HAL_GPIO_Init+0x2f0>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60cb      	str	r3, [r1, #12]
 8002fe4:	e025      	b.n	8003032 <HAL_GPIO_Init+0x302>
 8002fe6:	bf00      	nop
 8002fe8:	10320000 	.word	0x10320000
 8002fec:	10310000 	.word	0x10310000
 8002ff0:	10220000 	.word	0x10220000
 8002ff4:	10210000 	.word	0x10210000
 8002ff8:	10120000 	.word	0x10120000
 8002ffc:	10110000 	.word	0x10110000
 8003000:	40021000 	.word	0x40021000
 8003004:	40010000 	.word	0x40010000
 8003008:	40010800 	.word	0x40010800
 800300c:	40010c00 	.word	0x40010c00
 8003010:	40011000 	.word	0x40011000
 8003014:	40011400 	.word	0x40011400
 8003018:	40011800 	.word	0x40011800
 800301c:	40011c00 	.word	0x40011c00
 8003020:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_GPIO_Init+0x324>)
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	43db      	mvns	r3, r3
 800302c:	4909      	ldr	r1, [pc, #36]	; (8003054 <HAL_GPIO_Init+0x324>)
 800302e:	4013      	ands	r3, r2
 8003030:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	3301      	adds	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f ae7e 	bne.w	8002d44 <HAL_GPIO_Init+0x14>
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	372c      	adds	r7, #44	; 0x2c
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40010400 	.word	0x40010400

08003058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e001      	b.n	800307a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	807b      	strh	r3, [r7, #2]
 8003092:	4613      	mov	r3, r2
 8003094:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003096:	787b      	ldrb	r3, [r7, #1]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309c:	887a      	ldrh	r2, [r7, #2]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030a2:	e003      	b.n	80030ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	041a      	lsls	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e26c      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f000 8087 	beq.w	80031e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030d8:	4b92      	ldr	r3, [pc, #584]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 030c 	and.w	r3, r3, #12
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d00c      	beq.n	80030fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030e4:	4b8f      	ldr	r3, [pc, #572]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d112      	bne.n	8003116 <HAL_RCC_OscConfig+0x5e>
 80030f0:	4b8c      	ldr	r3, [pc, #560]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d10b      	bne.n	8003116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fe:	4b89      	ldr	r3, [pc, #548]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d06c      	beq.n	80031e4 <HAL_RCC_OscConfig+0x12c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d168      	bne.n	80031e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e246      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x76>
 8003120:	4b80      	ldr	r3, [pc, #512]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a7f      	ldr	r2, [pc, #508]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	e02e      	b.n	800318c <HAL_RCC_OscConfig+0xd4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x98>
 8003136:	4b7b      	ldr	r3, [pc, #492]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7a      	ldr	r2, [pc, #488]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 800313c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b78      	ldr	r3, [pc, #480]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a77      	ldr	r2, [pc, #476]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e01d      	b.n	800318c <HAL_RCC_OscConfig+0xd4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0xbc>
 800315a:	4b72      	ldr	r3, [pc, #456]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a71      	ldr	r2, [pc, #452]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b6f      	ldr	r3, [pc, #444]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6e      	ldr	r2, [pc, #440]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0xd4>
 8003174:	4b6b      	ldr	r3, [pc, #428]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a6a      	ldr	r2, [pc, #424]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 800317a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b68      	ldr	r3, [pc, #416]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a67      	ldr	r2, [pc, #412]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff fa96 	bl	80026c4 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800319c:	f7ff fa92 	bl	80026c4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1fa      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0xe4>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7ff fa82 	bl	80026c4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c4:	f7ff fa7e 	bl	80026c4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e1e6      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	4b53      	ldr	r3, [pc, #332]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x10c>
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031f2:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031fe:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b08      	cmp	r3, #8
 8003208:	d11c      	bne.n	8003244 <HAL_RCC_OscConfig+0x18c>
 800320a:	4b46      	ldr	r3, [pc, #280]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d116      	bne.n	8003244 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	4b43      	ldr	r3, [pc, #268]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x176>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1ba      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4939      	ldr	r1, [pc, #228]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	e03a      	b.n	80032ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	4b36      	ldr	r3, [pc, #216]	; (8003328 <HAL_RCC_OscConfig+0x270>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7ff fa37 	bl	80026c4 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325a:	f7ff fa33 	bl	80026c4 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e19b      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4927      	ldr	r1, [pc, #156]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328e:	4b26      	ldr	r3, [pc, #152]	; (8003328 <HAL_RCC_OscConfig+0x270>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7ff fa16 	bl	80026c4 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329c:	f7ff fa12 	bl	80026c4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e17a      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d03a      	beq.n	800333c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d019      	beq.n	8003302 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ce:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_RCC_OscConfig+0x274>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d4:	f7ff f9f6 	bl	80026c4 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032dc:	f7ff f9f2 	bl	80026c4 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e15a      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032fa:	2001      	movs	r0, #1
 80032fc:	f000 faa6 	bl	800384c <RCC_Delay>
 8003300:	e01c      	b.n	800333c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <HAL_RCC_OscConfig+0x274>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003308:	f7ff f9dc 	bl	80026c4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330e:	e00f      	b.n	8003330 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003310:	f7ff f9d8 	bl	80026c4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d908      	bls.n	8003330 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e140      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	42420000 	.word	0x42420000
 800332c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003330:	4b9e      	ldr	r3, [pc, #632]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e9      	bne.n	8003310 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80a6 	beq.w	8003496 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334e:	4b97      	ldr	r3, [pc, #604]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10d      	bne.n	8003376 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	4b94      	ldr	r3, [pc, #592]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	4a93      	ldr	r2, [pc, #588]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	61d3      	str	r3, [r2, #28]
 8003366:	4b91      	ldr	r3, [pc, #580]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b8e      	ldr	r3, [pc, #568]	; (80035b0 <HAL_RCC_OscConfig+0x4f8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003382:	4b8b      	ldr	r3, [pc, #556]	; (80035b0 <HAL_RCC_OscConfig+0x4f8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a8a      	ldr	r2, [pc, #552]	; (80035b0 <HAL_RCC_OscConfig+0x4f8>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7ff f999 	bl	80026c4 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7ff f995 	bl	80026c4 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b64      	cmp	r3, #100	; 0x64
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0fd      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b81      	ldr	r3, [pc, #516]	; (80035b0 <HAL_RCC_OscConfig+0x4f8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x312>
 80033bc:	4b7b      	ldr	r3, [pc, #492]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a7a      	ldr	r2, [pc, #488]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	e02d      	b.n	8003426 <HAL_RCC_OscConfig+0x36e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x334>
 80033d2:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	4a75      	ldr	r2, [pc, #468]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	6213      	str	r3, [r2, #32]
 80033de:	4b73      	ldr	r3, [pc, #460]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4a72      	ldr	r2, [pc, #456]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	6213      	str	r3, [r2, #32]
 80033ea:	e01c      	b.n	8003426 <HAL_RCC_OscConfig+0x36e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d10c      	bne.n	800340e <HAL_RCC_OscConfig+0x356>
 80033f4:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4a6c      	ldr	r2, [pc, #432]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80033fa:	f043 0304 	orr.w	r3, r3, #4
 80033fe:	6213      	str	r3, [r2, #32]
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4a69      	ldr	r2, [pc, #420]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6213      	str	r3, [r2, #32]
 800340c:	e00b      	b.n	8003426 <HAL_RCC_OscConfig+0x36e>
 800340e:	4b67      	ldr	r3, [pc, #412]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	4a66      	ldr	r2, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	6213      	str	r3, [r2, #32]
 800341a:	4b64      	ldr	r3, [pc, #400]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4a63      	ldr	r2, [pc, #396]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003420:	f023 0304 	bic.w	r3, r3, #4
 8003424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d015      	beq.n	800345a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7ff f949 	bl	80026c4 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003434:	e00a      	b.n	800344c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003436:	f7ff f945 	bl	80026c4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f241 3288 	movw	r2, #5000	; 0x1388
 8003444:	4293      	cmp	r3, r2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0ab      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344c:	4b57      	ldr	r3, [pc, #348]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0ee      	beq.n	8003436 <HAL_RCC_OscConfig+0x37e>
 8003458:	e014      	b.n	8003484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7ff f933 	bl	80026c4 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7ff f92f 	bl	80026c4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e095      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ee      	bne.n	8003462 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348a:	4b48      	ldr	r3, [pc, #288]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	4a47      	ldr	r2, [pc, #284]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8081 	beq.w	80035a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a0:	4b42      	ldr	r3, [pc, #264]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d061      	beq.n	8003570 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d146      	bne.n	8003542 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_OscConfig+0x4fc>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7ff f903 	bl	80026c4 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c2:	f7ff f8ff 	bl	80026c4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e067      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f0      	bne.n	80034c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d108      	bne.n	80034fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ea:	4b30      	ldr	r3, [pc, #192]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	492d      	ldr	r1, [pc, #180]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034fc:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a19      	ldr	r1, [r3, #32]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	430b      	orrs	r3, r1
 800350e:	4927      	ldr	r1, [pc, #156]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <HAL_RCC_OscConfig+0x4fc>)
 8003516:	2201      	movs	r2, #1
 8003518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351a:	f7ff f8d3 	bl	80026c4 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003522:	f7ff f8cf 	bl	80026c4 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e037      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x46a>
 8003540:	e02f      	b.n	80035a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <HAL_RCC_OscConfig+0x4fc>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7ff f8bc 	bl	80026c4 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003550:	f7ff f8b8 	bl	80026c4 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e020      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x498>
 800356e:	e018      	b.n	80035a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e013      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_OscConfig+0x4f4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	429a      	cmp	r2, r3
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42420060 	.word	0x42420060

080035b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0d0      	b.n	800376e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d910      	bls.n	80035fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b67      	ldr	r3, [pc, #412]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 0207 	bic.w	r2, r3, #7
 80035e2:	4965      	ldr	r1, [pc, #404]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0b8      	b.n	800376e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003614:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a58      	ldr	r2, [pc, #352]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800361e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800362c:	4b53      	ldr	r3, [pc, #332]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a52      	ldr	r2, [pc, #328]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003636:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	494d      	ldr	r1, [pc, #308]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d040      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	4b47      	ldr	r3, [pc, #284]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d115      	bne.n	8003696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07f      	b.n	800376e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003676:	4b41      	ldr	r3, [pc, #260]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e073      	b.n	800376e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003686:	4b3d      	ldr	r3, [pc, #244]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06b      	b.n	800376e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003696:	4b39      	ldr	r3, [pc, #228]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f023 0203 	bic.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4936      	ldr	r1, [pc, #216]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036a8:	f7ff f80c 	bl	80026c4 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b0:	f7ff f808 	bl	80026c4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e053      	b.n	800376e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	4b2d      	ldr	r3, [pc, #180]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 020c 	and.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1eb      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d210      	bcs.n	8003708 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0207 	bic.w	r2, r3, #7
 80036ee:	4922      	ldr	r1, [pc, #136]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d001      	beq.n	8003708 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e032      	b.n	800376e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003714:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4916      	ldr	r1, [pc, #88]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003732:	4b12      	ldr	r3, [pc, #72]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	490e      	ldr	r1, [pc, #56]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003746:	f000 f821 	bl	800378c <HAL_RCC_GetSysClockFreq>
 800374a:	4602      	mov	r2, r0
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	490a      	ldr	r1, [pc, #40]	; (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003758:	5ccb      	ldrb	r3, [r1, r3]
 800375a:	fa22 f303 	lsr.w	r3, r2, r3
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_RCC_ClockConfig+0x1cc>)
 8003760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1d0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe ff6a 	bl	8002640 <HAL_InitTick>

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40022000 	.word	0x40022000
 800377c:	40021000 	.word	0x40021000
 8003780:	08004758 	.word	0x08004758
 8003784:	20000004 	.word	0x20000004
 8003788:	20000008 	.word	0x20000008

0800378c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800378c:	b490      	push	{r4, r7}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003792:	4b2a      	ldr	r3, [pc, #168]	; (800383c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003794:	1d3c      	adds	r4, r7, #4
 8003796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800379c:	f240 2301 	movw	r3, #513	; 0x201
 80037a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	2300      	movs	r3, #0
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d002      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x40>
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_GetSysClockFreq+0x46>
 80037ca:	e02d      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ce:	623b      	str	r3, [r7, #32]
      break;
 80037d0:	e02d      	b.n	800382e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	0c9b      	lsrs	r3, r3, #18
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037de:	4413      	add	r3, r2
 80037e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	0c5b      	lsrs	r3, r3, #17
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037fe:	4413      	add	r3, r2
 8003800:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003804:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800380a:	fb02 f203 	mul.w	r2, r2, r3
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e004      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <HAL_RCC_GetSysClockFreq+0xb8>)
 800381c:	fb02 f303 	mul.w	r3, r2, r3
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	623b      	str	r3, [r7, #32]
      break;
 8003826:	e002      	b.n	800382e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800382a:	623b      	str	r3, [r7, #32]
      break;
 800382c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382e:	6a3b      	ldr	r3, [r7, #32]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3728      	adds	r7, #40	; 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bc90      	pop	{r4, r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	080046e8 	.word	0x080046e8
 8003840:	40021000 	.word	0x40021000
 8003844:	003d0900 	.word	0x003d0900
 8003848:	007a1200 	.word	0x007a1200

0800384c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <RCC_Delay+0x34>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <RCC_Delay+0x38>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0a5b      	lsrs	r3, r3, #9
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	fb02 f303 	mul.w	r3, r2, r3
 8003866:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003868:	bf00      	nop
  }
  while (Delay --);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	60fa      	str	r2, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f9      	bne.n	8003868 <RCC_Delay+0x1c>
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	20000004 	.word	0x20000004
 8003884:	10624dd3 	.word	0x10624dd3

08003888 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d07d      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038a4:	2300      	movs	r3, #0
 80038a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a8:	4b4f      	ldr	r3, [pc, #316]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10d      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b4:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	4a4b      	ldr	r2, [pc, #300]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038be:	61d3      	str	r3, [r2, #28]
 80038c0:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038cc:	2301      	movs	r3, #1
 80038ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	4b46      	ldr	r3, [pc, #280]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d118      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038dc:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a42      	ldr	r2, [pc, #264]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e8:	f7fe feec 	bl	80026c4 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ee:	e008      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f0:	f7fe fee8 	bl	80026c4 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e06d      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b3a      	ldr	r3, [pc, #232]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800390e:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d02e      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	429a      	cmp	r2, r3
 800392a:	d027      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800392c:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003934:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003936:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003938:	2201      	movs	r2, #1
 800393a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800393c:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003942:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d014      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fe feb7 	bl	80026c4 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003958:	e00a      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe feb3 	bl	80026c4 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e036      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ee      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4917      	ldr	r1, [pc, #92]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	4313      	orrs	r3, r2
 800398c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d105      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	4a13      	ldr	r2, [pc, #76]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	490b      	ldr	r1, [pc, #44]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ca:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	4904      	ldr	r1, [pc, #16]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
 80039f0:	42420440 	.word	0x42420440

080039f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e041      	b.n	8003a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe fd0e 	bl	800243c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 fac2 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e041      	b.n	8003b28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f839 	bl	8003b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	f000 fa73 	bl	8003fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <HAL_TIM_PWM_Start+0x24>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e022      	b.n	8003bae <HAL_TIM_PWM_Start+0x6a>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d109      	bne.n	8003b82 <HAL_TIM_PWM_Start+0x3e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	e015      	b.n	8003bae <HAL_TIM_PWM_Start+0x6a>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d109      	bne.n	8003b9c <HAL_TIM_PWM_Start+0x58>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e008      	b.n	8003bae <HAL_TIM_PWM_Start+0x6a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e072      	b.n	8003c9c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0x82>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc4:	e013      	b.n	8003bee <HAL_TIM_PWM_Start+0xaa>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d104      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x92>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd4:	e00b      	b.n	8003bee <HAL_TIM_PWM_Start+0xaa>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d104      	bne.n	8003be6 <HAL_TIM_PWM_Start+0xa2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be4:	e003      	b.n	8003bee <HAL_TIM_PWM_Start+0xaa>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fc9c 	bl	8004534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a28      	ldr	r2, [pc, #160]	; (8003ca4 <HAL_TIM_PWM_Start+0x160>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <HAL_TIM_PWM_Start+0xcc>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a27      	ldr	r2, [pc, #156]	; (8003ca8 <HAL_TIM_PWM_Start+0x164>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIM_PWM_Start+0xd0>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <HAL_TIM_PWM_Start+0xd2>
 8003c14:	2300      	movs	r3, #0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <HAL_TIM_PWM_Start+0x160>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x122>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_TIM_PWM_Start+0x164>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x122>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c46:	d00e      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x122>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	; (8003cac <HAL_TIM_PWM_Start+0x168>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x122>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <HAL_TIM_PWM_Start+0x16c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x122>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <HAL_TIM_PWM_Start+0x170>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d111      	bne.n	8003c8a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b06      	cmp	r3, #6
 8003c76:	d010      	beq.n	8003c9a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c88:	e007      	b.n	8003c9a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40013400 	.word	0x40013400
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00

08003cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e0ac      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	f200 809f 	bhi.w	8003e20 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d1d 	.word	0x08003d1d
 8003cec:	08003e21 	.word	0x08003e21
 8003cf0:	08003e21 	.word	0x08003e21
 8003cf4:	08003e21 	.word	0x08003e21
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003e21 	.word	0x08003e21
 8003d00:	08003e21 	.word	0x08003e21
 8003d04:	08003e21 	.word	0x08003e21
 8003d08:	08003d9f 	.word	0x08003d9f
 8003d0c:	08003e21 	.word	0x08003e21
 8003d10:	08003e21 	.word	0x08003e21
 8003d14:	08003e21 	.word	0x08003e21
 8003d18:	08003ddf 	.word	0x08003ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f9c4 	bl	80040b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0208 	orr.w	r2, r2, #8
 8003d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	619a      	str	r2, [r3, #24]
      break;
 8003d5a:	e062      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fa14 	bl	8004190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6999      	ldr	r1, [r3, #24]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	619a      	str	r2, [r3, #24]
      break;
 8003d9c:	e041      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fa67 	bl	8004278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0208 	orr.w	r2, r2, #8
 8003db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0204 	bic.w	r2, r2, #4
 8003dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
      break;
 8003ddc:	e021      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fabb 	bl	8004360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	61da      	str	r2, [r3, #28]
      break;
 8003e1e:	e000      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_TIM_ConfigClockSource+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e0b3      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x180>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e84:	d03e      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0xd0>
 8003e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8a:	f200 8087 	bhi.w	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	f000 8085 	beq.w	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9a:	d87f      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003e9c:	2b70      	cmp	r3, #112	; 0x70
 8003e9e:	d01a      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0xa2>
 8003ea0:	2b70      	cmp	r3, #112	; 0x70
 8003ea2:	d87b      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003ea4:	2b60      	cmp	r3, #96	; 0x60
 8003ea6:	d050      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x116>
 8003ea8:	2b60      	cmp	r3, #96	; 0x60
 8003eaa:	d877      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003eac:	2b50      	cmp	r3, #80	; 0x50
 8003eae:	d03c      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0xf6>
 8003eb0:	2b50      	cmp	r3, #80	; 0x50
 8003eb2:	d873      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d058      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x136>
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d86f      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003ebc:	2b30      	cmp	r3, #48	; 0x30
 8003ebe:	d064      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x156>
 8003ec0:	2b30      	cmp	r3, #48	; 0x30
 8003ec2:	d86b      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d060      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x156>
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d867      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d05c      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x156>
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d05a      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ed4:	e062      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6899      	ldr	r1, [r3, #8]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f000 fb06 	bl	80044f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ef8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
      break;
 8003f02:	e04e      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6899      	ldr	r1, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f000 faef 	bl	80044f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f26:	609a      	str	r2, [r3, #8]
      break;
 8003f28:	e03b      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 fa66 	bl	8004408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2150      	movs	r1, #80	; 0x50
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fabd 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003f48:	e02b      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6859      	ldr	r1, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f000 fa84 	bl	8004464 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2160      	movs	r1, #96	; 0x60
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 faad 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003f68:	e01b      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6859      	ldr	r1, [r3, #4]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f000 fa46 	bl	8004408 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2140      	movs	r1, #64	; 0x40
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fa9d 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003f88:	e00b      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f000 fa94 	bl	80044c2 <TIM_ITRx_SetConfig>
        break;
 8003f9a:	e002      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f9c:	bf00      	nop
 8003f9e:	e000      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fa0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a33      	ldr	r2, [pc, #204]	; (800409c <TIM_Base_SetConfig+0xe0>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <TIM_Base_SetConfig+0xe4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00f      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d00b      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a2f      	ldr	r2, [pc, #188]	; (80040a4 <TIM_Base_SetConfig+0xe8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a2e      	ldr	r2, [pc, #184]	; (80040a8 <TIM_Base_SetConfig+0xec>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0x40>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <TIM_Base_SetConfig+0xf0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d108      	bne.n	800400e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <TIM_Base_SetConfig+0xe0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <TIM_Base_SetConfig+0xe4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00f      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d00b      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <TIM_Base_SetConfig+0xe8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d007      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <TIM_Base_SetConfig+0xec>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_Base_SetConfig+0x82>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <TIM_Base_SetConfig+0xf0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d108      	bne.n	8004050 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <TIM_Base_SetConfig+0xe0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_Base_SetConfig+0xc8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <TIM_Base_SetConfig+0xe4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	615a      	str	r2, [r3, #20]
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40013400 	.word	0x40013400
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40000c00 	.word	0x40000c00

080040b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 0302 	bic.w	r3, r3, #2
 80040f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a20      	ldr	r2, [pc, #128]	; (8004188 <TIM_OC1_SetConfig+0xd8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC1_SetConfig+0x64>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a1f      	ldr	r2, [pc, #124]	; (800418c <TIM_OC1_SetConfig+0xdc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10c      	bne.n	800412e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0308 	bic.w	r3, r3, #8
 800411a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a15      	ldr	r2, [pc, #84]	; (8004188 <TIM_OC1_SetConfig+0xd8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <TIM_OC1_SetConfig+0x8e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a14      	ldr	r2, [pc, #80]	; (800418c <TIM_OC1_SetConfig+0xdc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d111      	bne.n	8004162 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800414c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	621a      	str	r2, [r3, #32]
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40013400 	.word	0x40013400

08004190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0210 	bic.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0320 	bic.w	r3, r3, #32
 80041da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a21      	ldr	r2, [pc, #132]	; (8004270 <TIM_OC2_SetConfig+0xe0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_OC2_SetConfig+0x68>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a20      	ldr	r2, [pc, #128]	; (8004274 <TIM_OC2_SetConfig+0xe4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d10d      	bne.n	8004214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <TIM_OC2_SetConfig+0xe0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_OC2_SetConfig+0x94>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a15      	ldr	r2, [pc, #84]	; (8004274 <TIM_OC2_SetConfig+0xe4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d113      	bne.n	800424c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800422a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40013400 	.word	0x40013400

08004278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0303 	bic.w	r3, r3, #3
 80042ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a21      	ldr	r2, [pc, #132]	; (8004358 <TIM_OC3_SetConfig+0xe0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d003      	beq.n	80042de <TIM_OC3_SetConfig+0x66>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <TIM_OC3_SetConfig+0xe4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10d      	bne.n	80042fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a16      	ldr	r2, [pc, #88]	; (8004358 <TIM_OC3_SetConfig+0xe0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC3_SetConfig+0x92>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a15      	ldr	r2, [pc, #84]	; (800435c <TIM_OC3_SetConfig+0xe4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d113      	bne.n	8004332 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	621a      	str	r2, [r3, #32]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40013400 	.word	0x40013400

08004360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a11      	ldr	r2, [pc, #68]	; (8004400 <TIM_OC4_SetConfig+0xa0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_OC4_SetConfig+0x68>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a10      	ldr	r2, [pc, #64]	; (8004404 <TIM_OC4_SetConfig+0xa4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d109      	bne.n	80043dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40013400 	.word	0x40013400

08004408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0201 	bic.w	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f023 030a 	bic.w	r3, r3, #10
 8004444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f023 0210 	bic.w	r2, r3, #16
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800448e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	031b      	lsls	r3, r3, #12
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	621a      	str	r2, [r3, #32]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	f043 0307 	orr.w	r3, r3, #7
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004510:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	021a      	lsls	r2, r3, #8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	431a      	orrs	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	4313      	orrs	r3, r2
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	609a      	str	r2, [r3, #8]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2201      	movs	r2, #1
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	43db      	mvns	r3, r3
 8004556:	401a      	ands	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a1a      	ldr	r2, [r3, #32]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	fa01 f303 	lsl.w	r3, r1, r3
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004590:	2302      	movs	r3, #2
 8004592:	e050      	b.n	8004636 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1b      	ldr	r2, [pc, #108]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d018      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a19      	ldr	r2, [pc, #100]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ea:	d00e      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a14      	ldr	r2, [pc, #80]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a12      	ldr	r2, [pc, #72]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d10c      	bne.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	4313      	orrs	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40013400 	.word	0x40013400
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00

08004654 <__libc_init_array>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	2600      	movs	r6, #0
 8004658:	4d0c      	ldr	r5, [pc, #48]	; (800468c <__libc_init_array+0x38>)
 800465a:	4c0d      	ldr	r4, [pc, #52]	; (8004690 <__libc_init_array+0x3c>)
 800465c:	1b64      	subs	r4, r4, r5
 800465e:	10a4      	asrs	r4, r4, #2
 8004660:	42a6      	cmp	r6, r4
 8004662:	d109      	bne.n	8004678 <__libc_init_array+0x24>
 8004664:	f000 f822 	bl	80046ac <_init>
 8004668:	2600      	movs	r6, #0
 800466a:	4d0a      	ldr	r5, [pc, #40]	; (8004694 <__libc_init_array+0x40>)
 800466c:	4c0a      	ldr	r4, [pc, #40]	; (8004698 <__libc_init_array+0x44>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	42a6      	cmp	r6, r4
 8004674:	d105      	bne.n	8004682 <__libc_init_array+0x2e>
 8004676:	bd70      	pop	{r4, r5, r6, pc}
 8004678:	f855 3b04 	ldr.w	r3, [r5], #4
 800467c:	4798      	blx	r3
 800467e:	3601      	adds	r6, #1
 8004680:	e7ee      	b.n	8004660 <__libc_init_array+0xc>
 8004682:	f855 3b04 	ldr.w	r3, [r5], #4
 8004686:	4798      	blx	r3
 8004688:	3601      	adds	r6, #1
 800468a:	e7f2      	b.n	8004672 <__libc_init_array+0x1e>
 800468c:	08004768 	.word	0x08004768
 8004690:	08004768 	.word	0x08004768
 8004694:	08004768 	.word	0x08004768
 8004698:	0800476c 	.word	0x0800476c

0800469c <memset>:
 800469c:	4603      	mov	r3, r0
 800469e:	4402      	add	r2, r0
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d100      	bne.n	80046a6 <memset+0xa>
 80046a4:	4770      	bx	lr
 80046a6:	f803 1b01 	strb.w	r1, [r3], #1
 80046aa:	e7f9      	b.n	80046a0 <memset+0x4>

080046ac <_init>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	bf00      	nop
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr

080046b8 <_fini>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	bf00      	nop
 80046bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	469e      	mov	lr, r3
 80046c2:	4770      	bx	lr
