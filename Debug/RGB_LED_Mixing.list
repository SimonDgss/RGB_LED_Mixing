
RGB_LED_Mixing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003584  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003768  08003768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800380c  0800380c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800380c  0800380c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800380c  0800380c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003820  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003820  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b9c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bf  00000000  00000000  00029bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001917e  00000000  00000000  0002c918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b805  00000000  00000000  00045a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098090  00000000  00000000  0005129b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e932b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c00  00000000  00000000  000e9380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003750 	.word	0x08003750

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003750 	.word	0x08003750

08000224 <initSEG>:

	}
}

void initSEG(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	uint16_t pinportA = SEG_A_Pin;
 800022a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800022e:	80fb      	strh	r3, [r7, #6]
	uint16_t pinportC = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin;
 8000230:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000234:	80bb      	strh	r3, [r7, #4]
	uint16_t pinportB = SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT1_Pin|DIGIT2_Pin|DIGIT3_Pin|DIGIT4_Pin|DIGIT5_Pin|DIGIT6_Pin|DIGIT7_Pin|DIGIT8_Pin;
 8000236:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 800023a:	807b      	strh	r3, [r7, #2]
	uint16_t pinportD = SEG_E_Pin;
 800023c:	2304      	movs	r3, #4
 800023e:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SEG_A_GPIO_Port, pinportA, GPIO_PIN_RESET);
 8000240:	88fb      	ldrh	r3, [r7, #6]
 8000242:	2200      	movs	r2, #0
 8000244:	4619      	mov	r1, r3
 8000246:	480c      	ldr	r0, [pc, #48]	; (8000278 <initSEG+0x54>)
 8000248:	f001 ff6f 	bl	800212a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_B_GPIO_Port,pinportC , GPIO_PIN_RESET);
 800024c:	88bb      	ldrh	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	4619      	mov	r1, r3
 8000252:	480a      	ldr	r0, [pc, #40]	; (800027c <initSEG+0x58>)
 8000254:	f001 ff69 	bl	800212a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_E_GPIO_Port, pinportD, GPIO_PIN_RESET);
 8000258:	883b      	ldrh	r3, [r7, #0]
 800025a:	2200      	movs	r2, #0
 800025c:	4619      	mov	r1, r3
 800025e:	4808      	ldr	r0, [pc, #32]	; (8000280 <initSEG+0x5c>)
 8000260:	f001 ff63 	bl	800212a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_F_GPIO_Port,pinportB , GPIO_PIN_RESET);
 8000264:	887b      	ldrh	r3, [r7, #2]
 8000266:	2200      	movs	r2, #0
 8000268:	4619      	mov	r1, r3
 800026a:	4806      	ldr	r0, [pc, #24]	; (8000284 <initSEG+0x60>)
 800026c:	f001 ff5d 	bl	800212a <HAL_GPIO_WritePin>

}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40010800 	.word	0x40010800
 800027c:	40011000 	.word	0x40011000
 8000280:	40011400 	.word	0x40011400
 8000284:	40010c00 	.word	0x40010c00

08000288 <printchar>:
	GPIOD->ODR = pinsegE;
	GPIOB->ODR = pinsegFGDPdig;
}

void printchar(int chara,uint16_t Pin)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b08a      	sub	sp, #40	; 0x28
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	807b      	strh	r3, [r7, #2]
	int segmA =(0x01&(SevenSegmentASCII[chara-32]));
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3b20      	subs	r3, #32
 8000298:	4a44      	ldr	r2, [pc, #272]	; (80003ac <printchar+0x124>)
 800029a:	5cd3      	ldrb	r3, [r2, r3]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	627b      	str	r3, [r7, #36]	; 0x24
	int segmB =(0x02&(SevenSegmentASCII[chara-32]))>>1;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3b20      	subs	r3, #32
 80002a6:	4a41      	ldr	r2, [pc, #260]	; (80003ac <printchar+0x124>)
 80002a8:	5cd3      	ldrb	r3, [r2, r3]
 80002aa:	085b      	lsrs	r3, r3, #1
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	623b      	str	r3, [r7, #32]
	int segmC =(0x04&(SevenSegmentASCII[chara-32]))>>2;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3b20      	subs	r3, #32
 80002b8:	4a3c      	ldr	r2, [pc, #240]	; (80003ac <printchar+0x124>)
 80002ba:	5cd3      	ldrb	r3, [r2, r3]
 80002bc:	089b      	lsrs	r3, r3, #2
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	61fb      	str	r3, [r7, #28]
	int segmD =(0x08&(SevenSegmentASCII[chara-32]))>>3;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3b20      	subs	r3, #32
 80002ca:	4a38      	ldr	r2, [pc, #224]	; (80003ac <printchar+0x124>)
 80002cc:	5cd3      	ldrb	r3, [r2, r3]
 80002ce:	08db      	lsrs	r3, r3, #3
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	61bb      	str	r3, [r7, #24]
	int segmE =(0x10&(SevenSegmentASCII[chara-32]))>>4;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3b20      	subs	r3, #32
 80002dc:	4a33      	ldr	r2, [pc, #204]	; (80003ac <printchar+0x124>)
 80002de:	5cd3      	ldrb	r3, [r2, r3]
 80002e0:	091b      	lsrs	r3, r3, #4
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	617b      	str	r3, [r7, #20]
	int segmF =(0x20&(SevenSegmentASCII[chara-32]))>>5;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3b20      	subs	r3, #32
 80002ee:	4a2f      	ldr	r2, [pc, #188]	; (80003ac <printchar+0x124>)
 80002f0:	5cd3      	ldrb	r3, [r2, r3]
 80002f2:	095b      	lsrs	r3, r3, #5
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
	int segmG =(0x40&(SevenSegmentASCII[chara-32]))>>6;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3b20      	subs	r3, #32
 8000300:	4a2a      	ldr	r2, [pc, #168]	; (80003ac <printchar+0x124>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	099b      	lsrs	r3, r3, #6
 8000306:	b2db      	uxtb	r3, r3
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
	int segmDP =(0x80&(SevenSegmentASCII[chara-32]))>>7;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3b20      	subs	r3, #32
 8000312:	4a26      	ldr	r2, [pc, #152]	; (80003ac <printchar+0x124>)
 8000314:	5cd3      	ldrb	r3, [r2, r3]
 8000316:	09db      	lsrs	r3, r3, #7
 8000318:	b2db      	uxtb	r3, r3
 800031a:	60bb      	str	r3, [r7, #8]
	GPIOC->ODR = GPIOC->ODR&pinsegBCD;
	GPIOA->ODR = GPIOA->ODR&pinsegA;
	GPIOD->ODR = GPIOD->ODR&pinsegE;
	GPIOB->ODR = GPIOB->ODR&pinsegFGDPdig;
	 */
	initSEG();
 800031c:	f7ff ff82 	bl	8000224 <initSEG>
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, segmA);
 8000320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000322:	b2db      	uxtb	r3, r3
 8000324:	461a      	mov	r2, r3
 8000326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800032a:	4821      	ldr	r0, [pc, #132]	; (80003b0 <printchar+0x128>)
 800032c:	f001 fefd 	bl	800212a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, segmB);
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	461a      	mov	r2, r3
 8000336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033a:	481e      	ldr	r0, [pc, #120]	; (80003b4 <printchar+0x12c>)
 800033c:	f001 fef5 	bl	800212a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, segmC);
 8000340:	69fb      	ldr	r3, [r7, #28]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800034a:	481a      	ldr	r0, [pc, #104]	; (80003b4 <printchar+0x12c>)
 800034c:	f001 feed 	bl	800212a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, segmD);
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	b2db      	uxtb	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035a:	4816      	ldr	r0, [pc, #88]	; (80003b4 <printchar+0x12c>)
 800035c:	f001 fee5 	bl	800212a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, segmE);
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	461a      	mov	r2, r3
 8000366:	2104      	movs	r1, #4
 8000368:	4813      	ldr	r0, [pc, #76]	; (80003b8 <printchar+0x130>)
 800036a:	f001 fede 	bl	800212a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, segmF);
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	2108      	movs	r1, #8
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <printchar+0x134>)
 8000378:	f001 fed7 	bl	800212a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, segmG);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	2110      	movs	r1, #16
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <printchar+0x134>)
 8000386:	f001 fed0 	bl	800212a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_DP_GPIO_Port, SEG_DP_Pin, segmDP);
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	2120      	movs	r1, #32
 8000392:	480a      	ldr	r0, [pc, #40]	; (80003bc <printchar+0x134>)
 8000394:	f001 fec9 	bl	800212a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGIT1_GPIO_Port, Pin, GPIO_PIN_SET);
 8000398:	887b      	ldrh	r3, [r7, #2]
 800039a:	2201      	movs	r2, #1
 800039c:	4619      	mov	r1, r3
 800039e:	4807      	ldr	r0, [pc, #28]	; (80003bc <printchar+0x134>)
 80003a0:	f001 fec3 	bl	800212a <HAL_GPIO_WritePin>
}
 80003a4:	bf00      	nop
 80003a6:	3728      	adds	r7, #40	; 0x28
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	0800379c 	.word	0x0800379c
 80003b0:	40010800 	.word	0x40010800
 80003b4:	40011000 	.word	0x40011000
 80003b8:	40011400 	.word	0x40011400
 80003bc:	40010c00 	.word	0x40010c00

080003c0 <printFigures>:


void printFigures(int number,uint16_t Pin, int leading_zero)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	460b      	mov	r3, r1
 80003ca:	607a      	str	r2, [r7, #4]
 80003cc:	817b      	strh	r3, [r7, #10]
	printchar(number+48,Pin);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	3330      	adds	r3, #48	; 0x30
 80003d2:	897a      	ldrh	r2, [r7, #10]
 80003d4:	4611      	mov	r1, r2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ff56 	bl	8000288 <printchar>

	if(!leading_zero)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d108      	bne.n	80003f4 <printFigures+0x34>
	{
		if(number==0)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d105      	bne.n	80003f4 <printFigures+0x34>
		{
			HAL_GPIO_WritePin(GPIOB, Pin, GPIO_PIN_RESET);
 80003e8:	897b      	ldrh	r3, [r7, #10]
 80003ea:	2200      	movs	r2, #0
 80003ec:	4619      	mov	r1, r3
 80003ee:	4803      	ldr	r0, [pc, #12]	; (80003fc <printFigures+0x3c>)
 80003f0:	f001 fe9b 	bl	800212a <HAL_GPIO_WritePin>
		}
	}
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40010c00 	.word	0x40010c00

08000400 <affichageDig>:

void affichageDig(int position_compteur,int delai,int position)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
	static int i=0;
	int digit[4];
	int pos=position*6;
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	4613      	mov	r3, r2
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	4413      	add	r3, r2
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
	switch (i){
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <affichageDig+0x38>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	f200 825f 	bhi.w	80008e0 <affichageDig+0x4e0>
 8000422:	a201      	add	r2, pc, #4	; (adr r2, 8000428 <affichageDig+0x28>)
 8000424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000428:	0800043d 	.word	0x0800043d
 800042c:	0800055f 	.word	0x0800055f
 8000430:	08000681 	.word	0x08000681
 8000434:	080007b3 	.word	0x080007b3
 8000438:	20000028 	.word	0x20000028

	case 0:
	{
		if(position_compteur==10000)
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000442:	4293      	cmp	r3, r2
 8000444:	d101      	bne.n	800044a <affichageDig+0x4a>
			position_compteur=0;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]
		digit[0]=abs(position_compteur)%10;
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000450:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000454:	4bcc      	ldr	r3, [pc, #816]	; (8000788 <affichageDig+0x388>)
 8000456:	fb83 2301 	smull	r2, r3, r3, r1
 800045a:	109a      	asrs	r2, r3, #2
 800045c:	17cb      	asrs	r3, r1, #31
 800045e:	1ad2      	subs	r2, r2, r3
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	1aca      	subs	r2, r1, r3
 800046a:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000472:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	4ac3      	ldr	r2, [pc, #780]	; (8000788 <affichageDig+0x388>)
 800047c:	fb82 1203 	smull	r1, r2, r2, r3
 8000480:	1092      	asrs	r2, r2, #2
 8000482:	17db      	asrs	r3, r3, #31
 8000484:	1ad1      	subs	r1, r2, r3
 8000486:	4bc0      	ldr	r3, [pc, #768]	; (8000788 <affichageDig+0x388>)
 8000488:	fb83 2301 	smull	r2, r3, r3, r1
 800048c:	109a      	asrs	r2, r3, #2
 800048e:	17cb      	asrs	r3, r1, #31
 8000490:	1ad2      	subs	r2, r2, r3
 8000492:	4613      	mov	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	4413      	add	r3, r2
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	1aca      	subs	r2, r1, r3
 800049c:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004a4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004a8:	69bb      	ldr	r3, [r7, #24]
 80004aa:	f06f 0109 	mvn.w	r1, #9
 80004ae:	fb01 f303 	mul.w	r3, r1, r3
 80004b2:	441a      	add	r2, r3
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	4ab4      	ldr	r2, [pc, #720]	; (800078c <affichageDig+0x38c>)
 80004ba:	fb82 1203 	smull	r1, r2, r2, r3
 80004be:	1152      	asrs	r2, r2, #5
 80004c0:	17db      	asrs	r3, r3, #31
 80004c2:	1ad1      	subs	r1, r2, r3
 80004c4:	4bb0      	ldr	r3, [pc, #704]	; (8000788 <affichageDig+0x388>)
 80004c6:	fb83 2301 	smull	r2, r3, r3, r1
 80004ca:	109a      	asrs	r2, r3, #2
 80004cc:	17cb      	asrs	r3, r1, #31
 80004ce:	1ad2      	subs	r2, r2, r3
 80004d0:	4613      	mov	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4413      	add	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	1aca      	subs	r2, r1, r3
 80004da:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004e2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80004ec:	fb01 f303 	mul.w	r3, r1, r3
 80004f0:	441a      	add	r2, r3
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	1ad2      	subs	r2, r2, r3
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	f06f 0109 	mvn.w	r1, #9
 80004fc:	fb01 f303 	mul.w	r3, r1, r3
 8000500:	4413      	add	r3, r2
 8000502:	4aa3      	ldr	r2, [pc, #652]	; (8000790 <affichageDig+0x390>)
 8000504:	fb82 1203 	smull	r1, r2, r2, r3
 8000508:	1192      	asrs	r2, r2, #6
 800050a:	17db      	asrs	r3, r3, #31
 800050c:	1ad1      	subs	r1, r2, r3
 800050e:	4b9e      	ldr	r3, [pc, #632]	; (8000788 <affichageDig+0x388>)
 8000510:	fb83 2301 	smull	r2, r3, r3, r1
 8000514:	109a      	asrs	r2, r3, #2
 8000516:	17cb      	asrs	r3, r1, #31
 8000518:	1ad2      	subs	r2, r2, r3
 800051a:	4613      	mov	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4413      	add	r3, r2
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	1aca      	subs	r2, r1, r3
 8000524:	623a      	str	r2, [r7, #32]
		if(position_compteur<0)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	2b00      	cmp	r3, #0
 800052a:	da0a      	bge.n	8000542 <affichageDig+0x142>
		{
			printchar('-', DIGIT1_Pin);
 800052c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000530:	202d      	movs	r0, #45	; 0x2d
 8000532:	f7ff fea9 	bl	8000288 <printchar>
			if(position_compteur==-1000)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800053c:	d101      	bne.n	8000542 <affichageDig+0x142>
				position_compteur=0;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
		}
		printFigures(digit[0], DIGIT4_Pin<<pos,1);
 8000542:	6978      	ldr	r0, [r7, #20]
 8000544:	2240      	movs	r2, #64	; 0x40
 8000546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	b29b      	uxth	r3, r3
 800054e:	2201      	movs	r2, #1
 8000550:	4619      	mov	r1, r3
 8000552:	f7ff ff35 	bl	80003c0 <printFigures>
		HAL_Delay(delai);
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	4618      	mov	r0, r3
 800055a:	f001 f90f 	bl	800177c <HAL_Delay>
	}
	case 1:
	{
		if(position_compteur==10000)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f242 7210 	movw	r2, #10000	; 0x2710
 8000564:	4293      	cmp	r3, r2
 8000566:	d101      	bne.n	800056c <affichageDig+0x16c>
			position_compteur=0;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
		digit[0]=abs(position_compteur)%10;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000572:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000576:	4b84      	ldr	r3, [pc, #528]	; (8000788 <affichageDig+0x388>)
 8000578:	fb83 2301 	smull	r2, r3, r3, r1
 800057c:	109a      	asrs	r2, r3, #2
 800057e:	17cb      	asrs	r3, r1, #31
 8000580:	1ad2      	subs	r2, r2, r3
 8000582:	4613      	mov	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	4413      	add	r3, r2
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	1aca      	subs	r2, r1, r3
 800058c:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000594:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	4a7a      	ldr	r2, [pc, #488]	; (8000788 <affichageDig+0x388>)
 800059e:	fb82 1203 	smull	r1, r2, r2, r3
 80005a2:	1092      	asrs	r2, r2, #2
 80005a4:	17db      	asrs	r3, r3, #31
 80005a6:	1ad1      	subs	r1, r2, r3
 80005a8:	4b77      	ldr	r3, [pc, #476]	; (8000788 <affichageDig+0x388>)
 80005aa:	fb83 2301 	smull	r2, r3, r3, r1
 80005ae:	109a      	asrs	r2, r3, #2
 80005b0:	17cb      	asrs	r3, r1, #31
 80005b2:	1ad2      	subs	r2, r2, r3
 80005b4:	4613      	mov	r3, r2
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	4413      	add	r3, r2
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	1aca      	subs	r2, r1, r3
 80005be:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005c6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	f06f 0109 	mvn.w	r1, #9
 80005d0:	fb01 f303 	mul.w	r3, r1, r3
 80005d4:	441a      	add	r2, r3
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	4a6c      	ldr	r2, [pc, #432]	; (800078c <affichageDig+0x38c>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	1152      	asrs	r2, r2, #5
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad1      	subs	r1, r2, r3
 80005e6:	4b68      	ldr	r3, [pc, #416]	; (8000788 <affichageDig+0x388>)
 80005e8:	fb83 2301 	smull	r2, r3, r3, r1
 80005ec:	109a      	asrs	r2, r3, #2
 80005ee:	17cb      	asrs	r3, r1, #31
 80005f0:	1ad2      	subs	r2, r2, r3
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	1aca      	subs	r2, r1, r3
 80005fc:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000604:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800060e:	fb01 f303 	mul.w	r3, r1, r3
 8000612:	441a      	add	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	1ad2      	subs	r2, r2, r3
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	f06f 0109 	mvn.w	r1, #9
 800061e:	fb01 f303 	mul.w	r3, r1, r3
 8000622:	4413      	add	r3, r2
 8000624:	4a5a      	ldr	r2, [pc, #360]	; (8000790 <affichageDig+0x390>)
 8000626:	fb82 1203 	smull	r1, r2, r2, r3
 800062a:	1192      	asrs	r2, r2, #6
 800062c:	17db      	asrs	r3, r3, #31
 800062e:	1ad1      	subs	r1, r2, r3
 8000630:	4b55      	ldr	r3, [pc, #340]	; (8000788 <affichageDig+0x388>)
 8000632:	fb83 2301 	smull	r2, r3, r3, r1
 8000636:	109a      	asrs	r2, r3, #2
 8000638:	17cb      	asrs	r3, r1, #31
 800063a:	1ad2      	subs	r2, r2, r3
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1aca      	subs	r2, r1, r3
 8000646:	623a      	str	r2, [r7, #32]

		if(position_compteur<0)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2b00      	cmp	r3, #0
 800064c:	da0a      	bge.n	8000664 <affichageDig+0x264>
		{
			printchar('-', DIGIT1_Pin);
 800064e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000652:	202d      	movs	r0, #45	; 0x2d
 8000654:	f7ff fe18 	bl	8000288 <printchar>
			if(position_compteur==-1000)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800065e:	d101      	bne.n	8000664 <affichageDig+0x264>
				position_compteur=0;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
		}
		printFigures(digit[1], DIGIT3_Pin<<pos,1);
 8000664:	69b8      	ldr	r0, [r7, #24]
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	b29b      	uxth	r3, r3
 8000670:	2201      	movs	r2, #1
 8000672:	4619      	mov	r1, r3
 8000674:	f7ff fea4 	bl	80003c0 <printFigures>
		HAL_Delay(delai);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f87e 	bl	800177c <HAL_Delay>
	}
	case 2:
	{
		if(position_compteur==10000)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f242 7210 	movw	r2, #10000	; 0x2710
 8000686:	4293      	cmp	r3, r2
 8000688:	d101      	bne.n	800068e <affichageDig+0x28e>
			position_compteur=0;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
		digit[0]=abs(position_compteur)%10;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000694:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <affichageDig+0x388>)
 800069a:	fb83 2301 	smull	r2, r3, r3, r1
 800069e:	109a      	asrs	r2, r3, #2
 80006a0:	17cb      	asrs	r3, r1, #31
 80006a2:	1ad2      	subs	r2, r2, r3
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	1aca      	subs	r2, r1, r3
 80006ae:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80006b6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	4a32      	ldr	r2, [pc, #200]	; (8000788 <affichageDig+0x388>)
 80006c0:	fb82 1203 	smull	r1, r2, r2, r3
 80006c4:	1092      	asrs	r2, r2, #2
 80006c6:	17db      	asrs	r3, r3, #31
 80006c8:	1ad1      	subs	r1, r2, r3
 80006ca:	4b2f      	ldr	r3, [pc, #188]	; (8000788 <affichageDig+0x388>)
 80006cc:	fb83 2301 	smull	r2, r3, r3, r1
 80006d0:	109a      	asrs	r2, r3, #2
 80006d2:	17cb      	asrs	r3, r1, #31
 80006d4:	1ad2      	subs	r2, r2, r3
 80006d6:	4613      	mov	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	1aca      	subs	r2, r1, r3
 80006e0:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80006e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	f06f 0109 	mvn.w	r1, #9
 80006f2:	fb01 f303 	mul.w	r3, r1, r3
 80006f6:	441a      	add	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	4a23      	ldr	r2, [pc, #140]	; (800078c <affichageDig+0x38c>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	1152      	asrs	r2, r2, #5
 8000704:	17db      	asrs	r3, r3, #31
 8000706:	1ad1      	subs	r1, r2, r3
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <affichageDig+0x388>)
 800070a:	fb83 2301 	smull	r2, r3, r3, r1
 800070e:	109a      	asrs	r2, r3, #2
 8000710:	17cb      	asrs	r3, r1, #31
 8000712:	1ad2      	subs	r2, r2, r3
 8000714:	4613      	mov	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	1aca      	subs	r2, r1, r3
 800071e:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000726:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000730:	fb01 f303 	mul.w	r3, r1, r3
 8000734:	441a      	add	r2, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	1ad2      	subs	r2, r2, r3
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	f06f 0109 	mvn.w	r1, #9
 8000740:	fb01 f303 	mul.w	r3, r1, r3
 8000744:	4413      	add	r3, r2
 8000746:	4a12      	ldr	r2, [pc, #72]	; (8000790 <affichageDig+0x390>)
 8000748:	fb82 1203 	smull	r1, r2, r2, r3
 800074c:	1192      	asrs	r2, r2, #6
 800074e:	17db      	asrs	r3, r3, #31
 8000750:	1ad1      	subs	r1, r2, r3
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <affichageDig+0x388>)
 8000754:	fb83 2301 	smull	r2, r3, r3, r1
 8000758:	109a      	asrs	r2, r3, #2
 800075a:	17cb      	asrs	r3, r1, #31
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	1aca      	subs	r2, r1, r3
 8000768:	623a      	str	r2, [r7, #32]
		if(position_compteur<0)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b00      	cmp	r3, #0
 800076e:	da11      	bge.n	8000794 <affichageDig+0x394>
		{
			printchar('-', DIGIT1_Pin);
 8000770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000774:	202d      	movs	r0, #45	; 0x2d
 8000776:	f7ff fd87 	bl	8000288 <printchar>
			if(position_compteur==-1000)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000780:	d108      	bne.n	8000794 <affichageDig+0x394>
				position_compteur=0;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e005      	b.n	8000794 <affichageDig+0x394>
 8000788:	66666667 	.word	0x66666667
 800078c:	51eb851f 	.word	0x51eb851f
 8000790:	10624dd3 	.word	0x10624dd3
		}
		printFigures(digit[2], DIGIT2_Pin<<pos, 1);
 8000794:	69f8      	ldr	r0, [r7, #28]
 8000796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	f7ff fe0b 	bl	80003c0 <printFigures>
		HAL_Delay(delai);
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 ffe5 	bl	800177c <HAL_Delay>
	}
	case 3:
	{
		if(position_compteur==10000)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d101      	bne.n	80007c0 <affichageDig+0x3c0>
			position_compteur=0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
		digit[0]=abs(position_compteur)%10;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80007c6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80007ca:	4b4a      	ldr	r3, [pc, #296]	; (80008f4 <affichageDig+0x4f4>)
 80007cc:	fb83 2301 	smull	r2, r3, r3, r1
 80007d0:	109a      	asrs	r2, r3, #2
 80007d2:	17cb      	asrs	r3, r1, #31
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	4613      	mov	r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4413      	add	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	1aca      	subs	r2, r1, r3
 80007e0:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80007e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	4a40      	ldr	r2, [pc, #256]	; (80008f4 <affichageDig+0x4f4>)
 80007f2:	fb82 1203 	smull	r1, r2, r2, r3
 80007f6:	1092      	asrs	r2, r2, #2
 80007f8:	17db      	asrs	r3, r3, #31
 80007fa:	1ad1      	subs	r1, r2, r3
 80007fc:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <affichageDig+0x4f4>)
 80007fe:	fb83 2301 	smull	r2, r3, r3, r1
 8000802:	109a      	asrs	r2, r3, #2
 8000804:	17cb      	asrs	r3, r1, #31
 8000806:	1ad2      	subs	r2, r2, r3
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	1aca      	subs	r2, r1, r3
 8000812:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800081a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	f06f 0109 	mvn.w	r1, #9
 8000824:	fb01 f303 	mul.w	r3, r1, r3
 8000828:	441a      	add	r2, r3
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	4a32      	ldr	r2, [pc, #200]	; (80008f8 <affichageDig+0x4f8>)
 8000830:	fb82 1203 	smull	r1, r2, r2, r3
 8000834:	1152      	asrs	r2, r2, #5
 8000836:	17db      	asrs	r3, r3, #31
 8000838:	1ad1      	subs	r1, r2, r3
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <affichageDig+0x4f4>)
 800083c:	fb83 2301 	smull	r2, r3, r3, r1
 8000840:	109a      	asrs	r2, r3, #2
 8000842:	17cb      	asrs	r3, r1, #31
 8000844:	1ad2      	subs	r2, r2, r3
 8000846:	4613      	mov	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	1aca      	subs	r2, r1, r3
 8000850:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000858:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000862:	fb01 f303 	mul.w	r3, r1, r3
 8000866:	441a      	add	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	f06f 0109 	mvn.w	r1, #9
 8000872:	fb01 f303 	mul.w	r3, r1, r3
 8000876:	4413      	add	r3, r2
 8000878:	4a20      	ldr	r2, [pc, #128]	; (80008fc <affichageDig+0x4fc>)
 800087a:	fb82 1203 	smull	r1, r2, r2, r3
 800087e:	1192      	asrs	r2, r2, #6
 8000880:	17db      	asrs	r3, r3, #31
 8000882:	1ad1      	subs	r1, r2, r3
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <affichageDig+0x4f4>)
 8000886:	fb83 2301 	smull	r2, r3, r3, r1
 800088a:	109a      	asrs	r2, r3, #2
 800088c:	17cb      	asrs	r3, r1, #31
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	1aca      	subs	r2, r1, r3
 800089a:	623a      	str	r2, [r7, #32]
		if(position_compteur<0)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da0b      	bge.n	80008ba <affichageDig+0x4ba>
		{
			printchar('-', DIGIT1_Pin);
 80008a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a6:	202d      	movs	r0, #45	; 0x2d
 80008a8:	f7ff fcee 	bl	8000288 <printchar>
			if(position_compteur==-1000)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80008b2:	d10d      	bne.n	80008d0 <affichageDig+0x4d0>
				position_compteur=0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	e00a      	b.n	80008d0 <affichageDig+0x4d0>
		}
		else
		{
			printFigures(digit[3], DIGIT1_Pin<<pos, 1);
 80008ba:	6a38      	ldr	r0, [r7, #32]
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	2201      	movs	r2, #1
 80008ca:	4619      	mov	r1, r3
 80008cc:	f7ff fd78 	bl	80003c0 <printFigures>
		}
		i=-1;
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <affichageDig+0x500>)
 80008d2:	f04f 32ff 	mov.w	r2, #4294967295
 80008d6:	601a      	str	r2, [r3, #0]
		HAL_Delay(delai);
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 ff4e 	bl	800177c <HAL_Delay>
	}
	}
	i++;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <affichageDig+0x500>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a06      	ldr	r2, [pc, #24]	; (8000900 <affichageDig+0x500>)
 80008e8:	6013      	str	r3, [r2, #0]
}
 80008ea:	bf00      	nop
 80008ec:	3728      	adds	r7, #40	; 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	66666667 	.word	0x66666667
 80008f8:	51eb851f 	.word	0x51eb851f
 80008fc:	10624dd3 	.word	0x10624dd3
 8000900:	20000028 	.word	0x20000028

08000904 <affichageChar>:
void affichageChar(char * word,int delai, int position)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
	static int i=0;
	int pos=position*6;
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	617b      	str	r3, [r7, #20]
	switch (i){
 800091c:	4b37      	ldr	r3, [pc, #220]	; (80009fc <affichageChar+0xf8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b03      	cmp	r3, #3
 8000922:	d861      	bhi.n	80009e8 <affichageChar+0xe4>
 8000924:	a201      	add	r2, pc, #4	; (adr r2, 800092c <affichageChar+0x28>)
 8000926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092a:	bf00      	nop
 800092c:	0800093d 	.word	0x0800093d
 8000930:	08000967 	.word	0x08000967
 8000934:	08000991 	.word	0x08000991
 8000938:	080009b9 	.word	0x080009b9

	case 0:
	{
		printchar(word[i],DIGIT1_Pin<<pos);
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <affichageChar+0xf8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4413      	add	r3, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	b29b      	uxth	r3, r3
 8000956:	4619      	mov	r1, r3
 8000958:	f7ff fc96 	bl	8000288 <printchar>
		HAL_Delay(delai);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4618      	mov	r0, r3
 8000960:	f000 ff0c 	bl	800177c <HAL_Delay>
	}
	break;
 8000964:	e040      	b.n	80009e8 <affichageChar+0xe4>
	case 1:
	{
		printchar(word[i],DIGIT2_Pin<<pos);
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <affichageChar+0xf8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	b29b      	uxth	r3, r3
 8000980:	4619      	mov	r1, r3
 8000982:	f7ff fc81 	bl	8000288 <printchar>
		HAL_Delay(delai);
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fef7 	bl	800177c <HAL_Delay>
	}
	break;
 800098e:	e02b      	b.n	80009e8 <affichageChar+0xe4>
	case 2:
	{
		printchar(word[i],DIGIT3_Pin<<pos);
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <affichageChar+0xf8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	4619      	mov	r1, r3
 80009aa:	f7ff fc6d 	bl	8000288 <printchar>
		HAL_Delay(delai);
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fee3 	bl	800177c <HAL_Delay>
	}
	break;
 80009b6:	e017      	b.n	80009e8 <affichageChar+0xe4>
	case 3:
	{
		printchar(word[i],DIGIT4_Pin<<pos);
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <affichageChar+0xf8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff fc59 	bl	8000288 <printchar>
		HAL_Delay(delai);
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fecf 	bl	800177c <HAL_Delay>
		i=-1;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <affichageChar+0xf8>)
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	601a      	str	r2, [r3, #0]
	}
	break;
 80009e6:	bf00      	nop
	}
	i++;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <affichageChar+0xf8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a03      	ldr	r2, [pc, #12]	; (80009fc <affichageChar+0xf8>)
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000002c 	.word	0x2000002c

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b091      	sub	sp, #68	; 0x44
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fe57 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 fa6b 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 fc19 	bl	8001244 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a12:	f000 fabd 	bl	8000f90 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a16:	f000 faf9 	bl	800100c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a1a:	f000 fb85 	bl	8001128 <MX_TIM3_Init>
  HAL_Delay(333);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
  HAL_Delay(333);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
  HAL_Delay(333);*/
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	48b8      	ldr	r0, [pc, #736]	; (8000d04 <main+0x304>)
 8000a22:	f002 f8e1 	bl	8002be8 <HAL_TIM_PWM_Start>
	HAL_Delay(333);
 8000a26:	f240 104d 	movw	r0, #333	; 0x14d
 8000a2a:	f000 fea7 	bl	800177c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a2e:	2104      	movs	r1, #4
 8000a30:	48b4      	ldr	r0, [pc, #720]	; (8000d04 <main+0x304>)
 8000a32:	f002 f8d9 	bl	8002be8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a36:	2108      	movs	r1, #8
 8000a38:	48b2      	ldr	r0, [pc, #712]	; (8000d04 <main+0x304>)
 8000a3a:	f002 f8d5 	bl	8002be8 <HAL_TIM_PWM_Start>
	int delai=1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
	int A1=0; int A2;int B1;	int B2;	int SW1; int SW2;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
	int lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8000a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4a:	48af      	ldr	r0, [pc, #700]	; (8000d08 <main+0x308>)
 8000a4c:	f001 fb56 	bl	80020fc <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000a54:	2104      	movs	r1, #4
 8000a56:	48ad      	ldr	r0, [pc, #692]	; (8000d0c <main+0x30c>)
 8000a58:	f001 fb50 	bl	80020fc <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	623b      	str	r3, [r7, #32]
	int position_compteur=9995;
 8000a60:	f242 730b 	movw	r3, #9995	; 0x270b
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
	int duty_cycler=50;
 8000a66:	2332      	movs	r3, #50	; 0x32
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
	int duty_cycleg=50;
 8000a6a:	2332      	movs	r3, #50	; 0x32
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
	int duty_cycleb=50;
 8000a6e:	2332      	movs	r3, #50	; 0x32
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
	initSEG();
 8000a72:	f7ff fbd7 	bl	8000224 <initSEG>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		A1= HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000a76:	2104      	movs	r1, #4
 8000a78:	48a4      	ldr	r0, [pc, #656]	; (8000d0c <main+0x30c>)
 8000a7a:	f001 fb3f 	bl	80020fc <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
		B1= HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin);
 8000a82:	2102      	movs	r1, #2
 8000a84:	48a1      	ldr	r0, [pc, #644]	; (8000d0c <main+0x30c>)
 8000a86:	f001 fb39 	bl	80020fc <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	61fb      	str	r3, [r7, #28]
		B2= HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin);
 8000a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a92:	489d      	ldr	r0, [pc, #628]	; (8000d08 <main+0x308>)
 8000a94:	f001 fb32 	bl	80020fc <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	61bb      	str	r3, [r7, #24]
		SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	489b      	ldr	r0, [pc, #620]	; (8000d0c <main+0x30c>)
 8000aa0:	f001 fb2c 	bl	80020fc <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	617b      	str	r3, [r7, #20]
		SW2= HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 8000aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aac:	4896      	ldr	r0, [pc, #600]	; (8000d08 <main+0x308>)
 8000aae:	f001 fb25 	bl	80020fc <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	613b      	str	r3, [r7, #16]
		A2= HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	4893      	ldr	r0, [pc, #588]	; (8000d08 <main+0x308>)
 8000abc:	f001 fb1e 	bl	80020fc <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60fb      	str	r3, [r7, #12]
			duty_cycle=0;
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
				}*/

		//Compteur encodeur 2 à gauche
		if(A2!=lastState)
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d019      	beq.n	8000b00 <main+0x100>
		{

			if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8000acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad0:	488d      	ldr	r0, [pc, #564]	; (8000d08 <main+0x308>)
 8000ad2:	f001 fb13 	bl	80020fc <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461c      	mov	r4, r3
 8000ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ade:	488a      	ldr	r0, [pc, #552]	; (8000d08 <main+0x308>)
 8000ae0:	f001 fb0c 	bl	80020fc <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	429c      	cmp	r4, r3
 8000ae8:	d005      	beq.n	8000af6 <main+0xf6>
			{
				position_compteur--;
 8000aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aec:	3b01      	subs	r3, #1
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
				lastState=A2;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000af4:	e004      	b.n	8000b00 <main+0x100>
			}
			else
			{
				position_compteur++;
 8000af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af8:	3301      	adds	r3, #1
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
				lastState=A2;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
		if(SW2==0)
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <main+0x10a>
		{
			position_compteur=0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		static int i=0;
		char word[9]="BICHONS.";
 8000b0a:	4a81      	ldr	r2, [pc, #516]	; (8000d10 <main+0x310>)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b10:	c303      	stmia	r3!, {r0, r1}
 8000b12:	701a      	strb	r2, [r3, #0]
		static int etat=tachefond;
		//affichageDig(position_compteur, delai, GAUCHE);

		switch(etat)
 8000b14:	4b7f      	ldr	r3, [pc, #508]	; (8000d14 <main+0x314>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d8ac      	bhi.n	8000a76 <main+0x76>
 8000b1c:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <main+0x124>)
 8000b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b22:	bf00      	nop
 8000b24:	08000b35 	.word	0x08000b35
 8000b28:	08000e13 	.word	0x08000e13
 8000b2c:	08000c9b 	.word	0x08000c9b
 8000b30:	08000d67 	.word	0x08000d67
		{
			case tachefond:

				switch (i){
 8000b34:	4b78      	ldr	r3, [pc, #480]	; (8000d18 <main+0x318>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	f200 809d 	bhi.w	8000c78 <main+0x278>
 8000b3e:	a201      	add	r2, pc, #4	; (adr r2, 8000b44 <main+0x144>)
 8000b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b44:	08000b65 	.word	0x08000b65
 8000b48:	08000b87 	.word	0x08000b87
 8000b4c:	08000ba9 	.word	0x08000ba9
 8000b50:	08000bc9 	.word	0x08000bc9
 8000b54:	08000be9 	.word	0x08000be9
 8000b58:	08000c0b 	.word	0x08000c0b
 8000b5c:	08000c2d 	.word	0x08000c2d
 8000b60:	08000c4f 	.word	0x08000c4f

					case 0:
					{
						printchar(word[i],DIGIT1_Pin);
 8000b64:	4b6c      	ldr	r3, [pc, #432]	; (8000d18 <main+0x318>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b6c:	4413      	add	r3, r2
 8000b6e:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fb86 	bl	8000288 <printchar>
						HAL_Delay(delai);
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fdfc 	bl	800177c <HAL_Delay>
					}
					break;
 8000b84:	e078      	b.n	8000c78 <main+0x278>
					case 1:
					{
						printchar(word[i],DIGIT2_Pin);
 8000b86:	4b64      	ldr	r3, [pc, #400]	; (8000d18 <main+0x318>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b8e:	4413      	add	r3, r2
 8000b90:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb75 	bl	8000288 <printchar>
						HAL_Delay(delai);
 8000b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fdeb 	bl	800177c <HAL_Delay>
					}
					break;
 8000ba6:	e067      	b.n	8000c78 <main+0x278>
					case 2:
					{
						printchar(word[i],DIGIT3_Pin);
 8000ba8:	4b5b      	ldr	r3, [pc, #364]	; (8000d18 <main+0x318>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bb0:	4413      	add	r3, r2
 8000bb2:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fb65 	bl	8000288 <printchar>
						HAL_Delay(delai);
 8000bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fddb 	bl	800177c <HAL_Delay>
					}
					break;
 8000bc6:	e057      	b.n	8000c78 <main+0x278>
					case 3:
					{
						printchar(word[i],DIGIT4_Pin);
 8000bc8:	4b53      	ldr	r3, [pc, #332]	; (8000d18 <main+0x318>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bd0:	4413      	add	r3, r2
 8000bd2:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000bd6:	2140      	movs	r1, #64	; 0x40
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fb55 	bl	8000288 <printchar>
						HAL_Delay(delai);
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fdcb 	bl	800177c <HAL_Delay>
					}
					break;
 8000be6:	e047      	b.n	8000c78 <main+0x278>
					case 4:
					{
						printchar(word[i],DIGIT5_Pin);
 8000be8:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <main+0x318>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000bf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fb44 	bl	8000288 <printchar>
						HAL_Delay(delai);
 8000c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fdba 	bl	800177c <HAL_Delay>
					}
					break;
 8000c08:	e036      	b.n	8000c78 <main+0x278>
					case 5:
					{
						printchar(word[i],DIGIT6_Pin);
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <main+0x318>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c12:	4413      	add	r3, r2
 8000c14:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000c18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fb33 	bl	8000288 <printchar>
						HAL_Delay(delai);
 8000c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fda9 	bl	800177c <HAL_Delay>
					}
					break;
 8000c2a:	e025      	b.n	8000c78 <main+0x278>
					case 6:
					{
						printchar(word[i],DIGIT7_Pin);
 8000c2c:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <main+0x318>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c34:	4413      	add	r3, r2
 8000c36:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fb22 	bl	8000288 <printchar>
						HAL_Delay(delai);
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fd98 	bl	800177c <HAL_Delay>
					}
					break;
 8000c4c:	e014      	b.n	8000c78 <main+0x278>
					case 7:
					{
						printchar(word[i],DIGIT8_Pin);
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <main+0x318>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c56:	4413      	add	r3, r2
 8000c58:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8000c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fb11 	bl	8000288 <printchar>
						i=-1;
 8000c66:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <main+0x318>)
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	601a      	str	r2, [r3, #0]
						HAL_Delay(delai);
 8000c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fd83 	bl	800177c <HAL_Delay>
					}
					break;
 8000c76:	bf00      	nop
					}
					i++;
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <main+0x318>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a26      	ldr	r2, [pc, #152]	; (8000d18 <main+0x318>)
 8000c80:	6013      	str	r3, [r2, #0]
					if(SW1==0)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	f040 811a 	bne.w	8000ebe <main+0x4be>
					{
						HAL_Delay(500);
 8000c8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c8e:	f000 fd75 	bl	800177c <HAL_Delay>
						etat=green;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <main+0x314>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	601a      	str	r2, [r3, #0]
					}
					break;
 8000c98:	e111      	b.n	8000ebe <main+0x4be>
			case green:
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	481b      	ldr	r0, [pc, #108]	; (8000d0c <main+0x30c>)
 8000c9e:	f001 fa2d 	bl	80020fc <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	623b      	str	r3, [r7, #32]
				affichageChar("GREE", 0.5,GAUCHE);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	481c      	ldr	r0, [pc, #112]	; (8000d1c <main+0x31c>)
 8000cac:	f7ff fe2a 	bl	8000904 <affichageChar>

				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4816      	ldr	r0, [pc, #88]	; (8000d0c <main+0x30c>)
 8000cb4:	f001 fa22 	bl	80020fc <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d040      	beq.n	8000d44 <main+0x344>
				{

					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	4811      	ldr	r0, [pc, #68]	; (8000d0c <main+0x30c>)
 8000cc6:	f001 fa19 	bl	80020fc <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461c      	mov	r4, r3
 8000cce:	2102      	movs	r1, #2
 8000cd0:	480e      	ldr	r0, [pc, #56]	; (8000d0c <main+0x30c>)
 8000cd2:	f001 fa13 	bl	80020fc <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	d021      	beq.n	8000d20 <main+0x320>
					{
						duty_cycleg=duty_cycleg-10;
 8000cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cde:	3b0a      	subs	r3, #10
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg*10);
 8000ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <main+0x304>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	639a      	str	r2, [r3, #56]	; 0x38
						lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <main+0x30c>)
 8000cf8:	f001 fa00 	bl	80020fc <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	e020      	b.n	8000d44 <main+0x344>
 8000d02:	bf00      	nop
 8000d04:	20000038 	.word	0x20000038
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	08003780 	.word	0x08003780
 8000d14:	20000030 	.word	0x20000030
 8000d18:	20000034 	.word	0x20000034
 8000d1c:	08003768 	.word	0x08003768
					}
					else
					{
						duty_cycleg=duty_cycleg+10;
 8000d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d22:	330a      	adds	r3, #10
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg*10);
 8000d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d28:	4613      	mov	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b67      	ldr	r3, [pc, #412]	; (8000ed0 <main+0x4d0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	639a      	str	r2, [r3, #56]	; 0x38
						lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4866      	ldr	r0, [pc, #408]	; (8000ed4 <main+0x4d4>)
 8000d3c:	f001 f9de 	bl	80020fc <HAL_GPIO_ReadPin>
 8000d40:	4603      	mov	r3, r0
 8000d42:	623b      	str	r3, [r7, #32]
					}
				}
				affichageDig(duty_cycleg, delai,DROITE);
 8000d44:	2201      	movs	r2, #1
 8000d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d4a:	f7ff fb59 	bl	8000400 <affichageDig>

				if(SW1==0)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f040 80b6 	bne.w	8000ec2 <main+0x4c2>
				{
					HAL_Delay(500);
 8000d56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5a:	f000 fd0f 	bl	800177c <HAL_Delay>
					etat=red;
 8000d5e:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <main+0x4d8>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	601a      	str	r2, [r3, #0]
				}
				break;
 8000d64:	e0ad      	b.n	8000ec2 <main+0x4c2>


			case red:
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000d66:	2104      	movs	r1, #4
 8000d68:	485a      	ldr	r0, [pc, #360]	; (8000ed4 <main+0x4d4>)
 8000d6a:	f001 f9c7 	bl	80020fc <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	623b      	str	r3, [r7, #32]
				affichageChar(" RED", 0.5,GAUCHE);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	4859      	ldr	r0, [pc, #356]	; (8000edc <main+0x4dc>)
 8000d78:	f7ff fdc4 	bl	8000904 <affichageChar>
				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	4855      	ldr	r0, [pc, #340]	; (8000ed4 <main+0x4d4>)
 8000d80:	f001 f9bc 	bl	80020fc <HAL_GPIO_ReadPin>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d031      	beq.n	8000df2 <main+0x3f2>
				{

					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8000d8e:	2104      	movs	r1, #4
 8000d90:	4850      	ldr	r0, [pc, #320]	; (8000ed4 <main+0x4d4>)
 8000d92:	f001 f9b3 	bl	80020fc <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461c      	mov	r4, r3
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	484d      	ldr	r0, [pc, #308]	; (8000ed4 <main+0x4d4>)
 8000d9e:	f001 f9ad 	bl	80020fc <HAL_GPIO_ReadPin>
 8000da2:	4603      	mov	r3, r0
 8000da4:	429c      	cmp	r4, r3
 8000da6:	d012      	beq.n	8000dce <main+0x3ce>
					{
						duty_cycler=duty_cycler-10;
 8000da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000daa:	3b0a      	subs	r3, #10
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycler*10);
 8000dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b45      	ldr	r3, [pc, #276]	; (8000ed0 <main+0x4d0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	63da      	str	r2, [r3, #60]	; 0x3c
						lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	4844      	ldr	r0, [pc, #272]	; (8000ed4 <main+0x4d4>)
 8000dc4:	f001 f99a 	bl	80020fc <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	623b      	str	r3, [r7, #32]
 8000dcc:	e011      	b.n	8000df2 <main+0x3f2>
					}
					else
					{
						duty_cycler=duty_cycler+10;
 8000dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd0:	330a      	adds	r3, #10
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycler*10);
 8000dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <main+0x4d0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c
						lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000de6:	2104      	movs	r1, #4
 8000de8:	483a      	ldr	r0, [pc, #232]	; (8000ed4 <main+0x4d4>)
 8000dea:	f001 f987 	bl	80020fc <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	623b      	str	r3, [r7, #32]
					}
				}
				affichageDig(duty_cycler, delai,DROITE);
 8000df2:	2201      	movs	r2, #1
 8000df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000df6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000df8:	f7ff fb02 	bl	8000400 <affichageDig>
				if(SW1==0)
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d161      	bne.n	8000ec6 <main+0x4c6>
				{
					HAL_Delay(500);
 8000e02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e06:	f000 fcb9 	bl	800177c <HAL_Delay>
					etat=blue;
 8000e0a:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <main+0x4d8>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
				}
				break;
 8000e10:	e059      	b.n	8000ec6 <main+0x4c6>


			case blue:

				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000e12:	2104      	movs	r1, #4
 8000e14:	482f      	ldr	r0, [pc, #188]	; (8000ed4 <main+0x4d4>)
 8000e16:	f001 f971 	bl	80020fc <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	623b      	str	r3, [r7, #32]
				affichageChar("BLUE", 0.5,GAUCHE);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	482f      	ldr	r0, [pc, #188]	; (8000ee0 <main+0x4e0>)
 8000e24:	f7ff fd6e 	bl	8000904 <affichageChar>
				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 8000e28:	2104      	movs	r1, #4
 8000e2a:	482a      	ldr	r0, [pc, #168]	; (8000ed4 <main+0x4d4>)
 8000e2c:	f001 f966 	bl	80020fc <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	6a3b      	ldr	r3, [r7, #32]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d031      	beq.n	8000e9e <main+0x49e>
				{

					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4825      	ldr	r0, [pc, #148]	; (8000ed4 <main+0x4d4>)
 8000e3e:	f001 f95d 	bl	80020fc <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461c      	mov	r4, r3
 8000e46:	2102      	movs	r1, #2
 8000e48:	4822      	ldr	r0, [pc, #136]	; (8000ed4 <main+0x4d4>)
 8000e4a:	f001 f957 	bl	80020fc <HAL_GPIO_ReadPin>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	429c      	cmp	r4, r3
 8000e52:	d012      	beq.n	8000e7a <main+0x47a>
					{
						duty_cycleb=duty_cycleb-10;
 8000e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e56:	3b0a      	subs	r3, #10
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycleb*10);
 8000e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <main+0x4d0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
						lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <main+0x4d4>)
 8000e70:	f001 f944 	bl	80020fc <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	e011      	b.n	8000e9e <main+0x49e>
					}
					else
					{
						duty_cycleb=duty_cycleb+10;
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	330a      	adds	r3, #10
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
						__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycleb*10);
 8000e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <main+0x4d0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
						lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000e92:	2104      	movs	r1, #4
 8000e94:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <main+0x4d4>)
 8000e96:	f001 f931 	bl	80020fc <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	623b      	str	r3, [r7, #32]
					}
				}
				affichageDig(duty_cycleb, delai,DROITE);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ea4:	f7ff faac 	bl	8000400 <affichageDig>
				if(SW1==0)
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10d      	bne.n	8000eca <main+0x4ca>
				{
					HAL_Delay(500);
 8000eae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eb2:	f000 fc63 	bl	800177c <HAL_Delay>
					etat=tachefond;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <main+0x4d8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
				}
				break;
 8000ebc:	e005      	b.n	8000eca <main+0x4ca>
					break;
 8000ebe:	bf00      	nop
 8000ec0:	e5d9      	b.n	8000a76 <main+0x76>
				break;
 8000ec2:	bf00      	nop
 8000ec4:	e5d7      	b.n	8000a76 <main+0x76>
				break;
 8000ec6:	bf00      	nop
 8000ec8:	e5d5      	b.n	8000a76 <main+0x76>
				break;
 8000eca:	bf00      	nop
	{
 8000ecc:	e5d3      	b.n	8000a76 <main+0x76>
 8000ece:	bf00      	nop
 8000ed0:	20000038 	.word	0x20000038
 8000ed4:	40010c00 	.word	0x40010c00
 8000ed8:	20000030 	.word	0x20000030
 8000edc:	08003770 	.word	0x08003770
 8000ee0:	08003778 	.word	0x08003778

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b096      	sub	sp, #88	; 0x58
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eee:	2228      	movs	r2, #40	; 0x28
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fc24 	bl	8003740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
 8000f16:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f20:	2310      	movs	r3, #16
 8000f22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 f915 	bl	800215c <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f38:	f000 fa46 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f48:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000f4e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fb7e 	bl	800265c <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f66:	f000 fa2f 	bl	80013c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000f6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f72:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fcd8 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f82:	f000 fa21 	bl	80013c8 <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3758      	adds	r7, #88	; 0x58
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fa2:	4a19      	ldr	r2, [pc, #100]	; (8001008 <MX_ADC1_Init+0x78>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fce:	f000 fbf9 	bl	80017c4 <HAL_ADC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fd8:	f000 f9f6 	bl	80013c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_ADC1_Init+0x74>)
 8000fee:	f000 fcd3 	bl	8001998 <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ff8:	f000 f9e6 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000080 	.word	0x20000080
 8001008:	40012400 	.word	0x40012400

0800100c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08e      	sub	sp, #56	; 0x38
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	615a      	str	r2, [r3, #20]
 800103a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800103c:	4b39      	ldr	r3, [pc, #228]	; (8001124 <MX_TIM2_Init+0x118>)
 800103e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000;
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <MX_TIM2_Init+0x118>)
 8001046:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800104a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b35      	ldr	r3, [pc, #212]	; (8001124 <MX_TIM2_Init+0x118>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001052:	4b34      	ldr	r3, [pc, #208]	; (8001124 <MX_TIM2_Init+0x118>)
 8001054:	220a      	movs	r2, #10
 8001056:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001058:	4b32      	ldr	r3, [pc, #200]	; (8001124 <MX_TIM2_Init+0x118>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <MX_TIM2_Init+0x118>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001064:	482f      	ldr	r0, [pc, #188]	; (8001124 <MX_TIM2_Init+0x118>)
 8001066:	f001 fd17 	bl	8002a98 <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001070:	f000 f9aa 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107e:	4619      	mov	r1, r3
 8001080:	4828      	ldr	r0, [pc, #160]	; (8001124 <MX_TIM2_Init+0x118>)
 8001082:	f001 ff29 	bl	8002ed8 <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800108c:	f000 f99c 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001090:	4824      	ldr	r0, [pc, #144]	; (8001124 <MX_TIM2_Init+0x118>)
 8001092:	f001 fd50 	bl	8002b36 <HAL_TIM_PWM_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800109c:	f000 f994 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4619      	mov	r1, r3
 80010ae:	481d      	ldr	r0, [pc, #116]	; (8001124 <MX_TIM2_Init+0x118>)
 80010b0:	f002 fab6 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010ba:	f000 f985 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010be:	2360      	movs	r3, #96	; 0x60
 80010c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80010c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2204      	movs	r2, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <MX_TIM2_Init+0x118>)
 80010d8:	f001 fe40 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010e2:	f000 f971 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2208      	movs	r2, #8
 80010ea:	4619      	mov	r1, r3
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_TIM2_Init+0x118>)
 80010ee:	f001 fe35 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80010f8:	f000 f966 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	220c      	movs	r2, #12
 8001104:	4619      	mov	r1, r3
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <MX_TIM2_Init+0x118>)
 8001108:	f001 fe28 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8001112:	f000 f959 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001116:	4803      	ldr	r0, [pc, #12]	; (8001124 <MX_TIM2_Init+0x118>)
 8001118:	f000 fa12 	bl	8001540 <HAL_TIM_MspPostInit>

}
 800111c:	bf00      	nop
 800111e:	3738      	adds	r7, #56	; 0x38
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000b0 	.word	0x200000b0

08001128 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	; 0x38
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]
 8001156:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001158:	4b38      	ldr	r3, [pc, #224]	; (800123c <MX_TIM3_Init+0x114>)
 800115a:	4a39      	ldr	r2, [pc, #228]	; (8001240 <MX_TIM3_Init+0x118>)
 800115c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <MX_TIM3_Init+0x114>)
 8001160:	2204      	movs	r2, #4
 8001162:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <MX_TIM3_Init+0x114>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <MX_TIM3_Init+0x114>)
 800116c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001170:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <MX_TIM3_Init+0x114>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b30      	ldr	r3, [pc, #192]	; (800123c <MX_TIM3_Init+0x114>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800117e:	482f      	ldr	r0, [pc, #188]	; (800123c <MX_TIM3_Init+0x114>)
 8001180:	f001 fc8a 	bl	8002a98 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800118a:	f000 f91d 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001194:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001198:	4619      	mov	r1, r3
 800119a:	4828      	ldr	r0, [pc, #160]	; (800123c <MX_TIM3_Init+0x114>)
 800119c:	f001 fe9c 	bl	8002ed8 <HAL_TIM_ConfigClockSource>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011a6:	f000 f90f 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011aa:	4824      	ldr	r0, [pc, #144]	; (800123c <MX_TIM3_Init+0x114>)
 80011ac:	f001 fcc3 	bl	8002b36 <HAL_TIM_PWM_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011b6:	f000 f907 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <MX_TIM3_Init+0x114>)
 80011ca:	f002 fa29 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011d4:	f000 f8f8 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d8:	2360      	movs	r3, #96	; 0x60
 80011da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80011dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_TIM3_Init+0x114>)
 80011f2:	f001 fdb3 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011fc:	f000 f8e4 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2204      	movs	r2, #4
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_TIM3_Init+0x114>)
 8001208:	f001 fda8 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001212:	f000 f8d9 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2208      	movs	r2, #8
 800121a:	4619      	mov	r1, r3
 800121c:	4807      	ldr	r0, [pc, #28]	; (800123c <MX_TIM3_Init+0x114>)
 800121e:	f001 fd9d 	bl	8002d5c <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001228:	f000 f8ce 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <MX_TIM3_Init+0x114>)
 800122e:	f000 f987 	bl	8001540 <HAL_TIM_MspPostInit>

}
 8001232:	bf00      	nop
 8001234:	3738      	adds	r7, #56	; 0x38
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000038 	.word	0x20000038
 8001240:	40000400 	.word	0x40000400

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <MX_GPIO_Init+0x170>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a55      	ldr	r2, [pc, #340]	; (80013b4 <MX_GPIO_Init+0x170>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <MX_GPIO_Init+0x170>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001270:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <MX_GPIO_Init+0x170>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <MX_GPIO_Init+0x170>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <MX_GPIO_Init+0x170>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b4a      	ldr	r3, [pc, #296]	; (80013b4 <MX_GPIO_Init+0x170>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a49      	ldr	r2, [pc, #292]	; (80013b4 <MX_GPIO_Init+0x170>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <MX_GPIO_Init+0x170>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <MX_GPIO_Init+0x170>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a43      	ldr	r2, [pc, #268]	; (80013b4 <MX_GPIO_Init+0x170>)
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <MX_GPIO_Init+0x170>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 80012b8:	2201      	movs	r2, #1
 80012ba:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 80012be:	483e      	ldr	r0, [pc, #248]	; (80013b8 <MX_GPIO_Init+0x174>)
 80012c0:	f000 ff33 	bl	800212a <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT4_Pin
                          |DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ca:	483c      	ldr	r0, [pc, #240]	; (80013bc <MX_GPIO_Init+0x178>)
 80012cc:	f000 ff2d 	bl	800212a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_B_Pin|SEG_C_Pin|SEG_D_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80012d6:	483a      	ldr	r0, [pc, #232]	; (80013c0 <MX_GPIO_Init+0x17c>)
 80012d8:	f000 ff27 	bl	800212a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2104      	movs	r1, #4
 80012e0:	4838      	ldr	r0, [pc, #224]	; (80013c4 <MX_GPIO_Init+0x180>)
 80012e2:	f000 ff22 	bl	800212a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROT_A_2_Pin ROT_B_2_Pin ROT_SW_2_Pin */
  GPIO_InitStruct.Pin = ROT_A_2_Pin|ROT_B_2_Pin|ROT_SW_2_Pin;
 80012e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	4831      	ldr	r0, [pc, #196]	; (80013c0 <MX_GPIO_Init+0x17c>)
 80012fc:	f000 fd6a 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_1_Pin ROT_B_1_Pin ROT_A_1_Pin */
  GPIO_InitStruct.Pin = ROT_SW_1_Pin|ROT_B_1_Pin|ROT_A_1_Pin;
 8001300:	2307      	movs	r3, #7
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001308:	2301      	movs	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	4829      	ldr	r0, [pc, #164]	; (80013b8 <MX_GPIO_Init+0x174>)
 8001314:	f000 fd5e 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT8_Pin DIGIT7_Pin DIGIT6_Pin DIGIT5_Pin
                           DIGIT4_Pin DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 8001318:	f24f 33c0 	movw	r3, #62400	; 0xf3c0
 800131c:	613b      	str	r3, [r7, #16]
                          |DIGIT4_Pin|DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001322:	2302      	movs	r3, #2
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	4821      	ldr	r0, [pc, #132]	; (80013b8 <MX_GPIO_Init+0x174>)
 8001332:	f000 fd4f 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_A_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin;
 8001336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800133a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2302      	movs	r3, #2
 8001346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_A_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	481b      	ldr	r0, [pc, #108]	; (80013bc <MX_GPIO_Init+0x178>)
 8001350:	f000 fd40 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_B_Pin SEG_C_Pin SEG_D_Pin */
  GPIO_InitStruct.Pin = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin;
 8001354:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	4814      	ldr	r0, [pc, #80]	; (80013c0 <MX_GPIO_Init+0x17c>)
 800136e:	f000 fd31 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_E_Pin */
  GPIO_InitStruct.Pin = SEG_E_Pin;
 8001372:	2304      	movs	r3, #4
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_E_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_GPIO_Init+0x180>)
 800138a:	f000 fd23 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
  GPIO_InitStruct.Pin = SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
 800138e:	2338      	movs	r3, #56	; 0x38
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2302      	movs	r3, #2
 800139c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <MX_GPIO_Init+0x174>)
 80013a6:	f000 fd15 	bl	8001dd4 <HAL_GPIO_Init>

}
 80013aa:	bf00      	nop
 80013ac:	3720      	adds	r7, #32
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40011400 	.word	0x40011400

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
			/* User can add his own implementation to report the HAL error return state */
			__disable_irq();
			while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a14      	ldr	r2, [pc, #80]	; (8001430 <HAL_MspInit+0x5c>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_MspInit+0x5c>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_MspInit+0x5c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_MspInit+0x5c>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_MspInit+0x60>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_MspInit+0x60>)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000

08001438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_ADC_MspInit+0x98>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d137      	bne.n	80014c8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <HAL_ADC_MspInit+0x9c>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_ADC_MspInit+0x9c>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_ADC_MspInit+0x9c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_ADC_MspInit+0x9c>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_ADC_MspInit+0x9c>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_ADC_MspInit+0x9c>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_ADC_MspInit+0x9c>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_ADC_MspInit+0x9c>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_ADC_MspInit+0x9c>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014a0:	2338      	movs	r3, #56	; 0x38
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a4:	2303      	movs	r3, #3
 80014a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4619      	mov	r1, r3
 80014ae:	480a      	ldr	r0, [pc, #40]	; (80014d8 <HAL_ADC_MspInit+0xa0>)
 80014b0:	f000 fc90 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014b4:	2330      	movs	r3, #48	; 0x30
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b8:	2303      	movs	r3, #3
 80014ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <HAL_ADC_MspInit+0xa4>)
 80014c4:	f000 fc86 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40012400 	.word	0x40012400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40011000 	.word	0x40011000
 80014dc:	40010800 	.word	0x40010800

080014e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f0:	d10c      	bne.n	800150c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_TIM_Base_MspInit+0x58>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_TIM_Base_MspInit+0x58>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_TIM_Base_MspInit+0x58>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800150a:	e010      	b.n	800152e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_TIM_Base_MspInit+0x5c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10b      	bne.n	800152e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_TIM_Base_MspInit+0x58>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_TIM_Base_MspInit+0x58>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_TIM_Base_MspInit+0x58>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000
 800153c:	40000400 	.word	0x40000400

08001540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155e:	d118      	bne.n	8001592 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_TIM_MspPostInit+0xbc>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a25      	ldr	r2, [pc, #148]	; (80015fc <HAL_TIM_MspPostInit+0xbc>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_TIM_MspPostInit+0xbc>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001578:	230e      	movs	r3, #14
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2302      	movs	r3, #2
 8001582:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	481d      	ldr	r0, [pc, #116]	; (8001600 <HAL_TIM_MspPostInit+0xc0>)
 800158c:	f000 fc22 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001590:	e02f      	b.n	80015f2 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <HAL_TIM_MspPostInit+0xc4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d12a      	bne.n	80015f2 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_TIM_MspPostInit+0xbc>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a16      	ldr	r2, [pc, #88]	; (80015fc <HAL_TIM_MspPostInit+0xbc>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_TIM_MspPostInit+0xbc>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80015b4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2302      	movs	r3, #2
 80015c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	480f      	ldr	r0, [pc, #60]	; (8001608 <HAL_TIM_MspPostInit+0xc8>)
 80015ca:	f000 fc03 	bl	8001dd4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_TIM_MspPostInit+0xcc>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_TIM_MspPostInit+0xcc>)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	6053      	str	r3, [r2, #4]
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010800 	.word	0x40010800
 8001604:	40000400 	.word	0x40000400
 8001608:	40011000 	.word	0x40011000
 800160c:	40010000 	.word	0x40010000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001656:	f000 f875 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}

0800165e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
	...

0800166c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	; (80016a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	; (80016b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001692:	f7ff ffe4 	bl	800165e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001696:	f002 f82f 	bl	80036f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169a:	f7ff f9b1 	bl	8000a00 <main>
  bx lr
 800169e:	4770      	bx	lr
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016a8:	08003814 	.word	0x08003814
  ldr r2, =_sbss
 80016ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016b0:	200000fc 	.word	0x200000fc

080016b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC1_2_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HAL_Init+0x28>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a07      	ldr	r2, [pc, #28]	; (80016e0 <HAL_Init+0x28>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c8:	2003      	movs	r0, #3
 80016ca:	f000 fb4f 	bl	8001d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	200f      	movs	r0, #15
 80016d0:	f000 f808 	bl	80016e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d4:	f7ff fe7e 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40022000 	.word	0x40022000

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x54>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x58>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fb59 	bl	8001dba <HAL_SYSTICK_Config>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e00e      	b.n	8001730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d80a      	bhi.n	800172e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	f000 fb2f 	bl	8001d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_InitTick+0x5c>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000000 	.word	0x20000000
 800173c:	20000008 	.word	0x20000008
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x1c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x20>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <HAL_IncTick+0x20>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000008 	.word	0x20000008
 8001764:	200000f8 	.word	0x200000f8

08001768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <HAL_GetTick+0x10>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	200000f8 	.word	0x200000f8

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff fff0 	bl	8001768 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffe0 	bl	8001768 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008

080017c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0ce      	b.n	8001984 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fe18 	bl	8001438 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f9bd 	bl	8001b88 <ADC_ConversionStop_Disable>
 800180e:	4603      	mov	r3, r0
 8001810:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 80a9 	bne.w	8001972 <HAL_ADC_Init+0x1ae>
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f040 80a5 	bne.w	8001972 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001830:	f023 0302 	bic.w	r3, r3, #2
 8001834:	f043 0202 	orr.w	r2, r3, #2
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4951      	ldr	r1, [pc, #324]	; (800198c <HAL_ADC_Init+0x1c8>)
 8001846:	428b      	cmp	r3, r1
 8001848:	d10a      	bne.n	8001860 <HAL_ADC_Init+0x9c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001852:	d002      	beq.n	800185a <HAL_ADC_Init+0x96>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	e004      	b.n	8001864 <HAL_ADC_Init+0xa0>
 800185a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800185e:	e001      	b.n	8001864 <HAL_ADC_Init+0xa0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001864:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7b1b      	ldrb	r3, [r3, #12]
 800186a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800186c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4313      	orrs	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800187c:	d003      	beq.n	8001886 <HAL_ADC_Init+0xc2>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d102      	bne.n	800188c <HAL_ADC_Init+0xc8>
 8001886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188a:	e000      	b.n	800188e <HAL_ADC_Init+0xca>
 800188c:	2300      	movs	r3, #0
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7d1b      	ldrb	r3, [r3, #20]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d119      	bne.n	80018d0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7b1b      	ldrb	r3, [r3, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	035a      	lsls	r2, r3, #13
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	e00b      	b.n	80018d0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	f043 0220 	orr.w	r2, r3, #32
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_ADC_Init+0x1cc>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001900:	d003      	beq.n	800190a <HAL_ADC_Init+0x146>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d104      	bne.n	8001914 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	3b01      	subs	r3, #1
 8001910:	051b      	lsls	r3, r3, #20
 8001912:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	430a      	orrs	r2, r1
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_ADC_Init+0x1d0>)
 8001930:	4013      	ands	r3, r2
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	429a      	cmp	r2, r3
 8001936:	d10b      	bne.n	8001950 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	f023 0303 	bic.w	r3, r3, #3
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800194e:	e018      	b.n	8001982 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	f023 0312 	bic.w	r3, r3, #18
 8001958:	f043 0210 	orr.w	r2, r3, #16
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001970:	e007      	b.n	8001982 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f043 0210 	orr.w	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001982:	7dfb      	ldrb	r3, [r7, #23]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40013c00 	.word	0x40013c00
 8001990:	ffe1f7fd 	.word	0xffe1f7fd
 8001994:	ff1f0efe 	.word	0xff1f0efe

08001998 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x20>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0dc      	b.n	8001b72 <HAL_ADC_ConfigChannel+0x1da>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b06      	cmp	r3, #6
 80019c6:	d81c      	bhi.n	8001a02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	3b05      	subs	r3, #5
 80019da:	221f      	movs	r2, #31
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4019      	ands	r1, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	3b05      	subs	r3, #5
 80019f4:	fa00 f203 	lsl.w	r2, r0, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001a00:	e03c      	b.n	8001a7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d81c      	bhi.n	8001a44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b23      	subs	r3, #35	; 0x23
 8001a1c:	221f      	movs	r2, #31
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	4019      	ands	r1, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3b23      	subs	r3, #35	; 0x23
 8001a36:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	631a      	str	r2, [r3, #48]	; 0x30
 8001a42:	e01b      	b.n	8001a7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	3b41      	subs	r3, #65	; 0x41
 8001a56:	221f      	movs	r2, #31
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b41      	subs	r3, #65	; 0x41
 8001a70:	fa00 f203 	lsl.w	r2, r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d91c      	bls.n	8001abe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68d9      	ldr	r1, [r3, #12]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	3b1e      	subs	r3, #30
 8001a96:	2207      	movs	r2, #7
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4019      	ands	r1, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6898      	ldr	r0, [r3, #8]
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	3b1e      	subs	r3, #30
 8001ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	e019      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6919      	ldr	r1, [r3, #16]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	2207      	movs	r2, #7
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	4019      	ands	r1, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6898      	ldr	r0, [r3, #8]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b10      	cmp	r3, #16
 8001af8:	d003      	beq.n	8001b02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001afe:	2b11      	cmp	r3, #17
 8001b00:	d132      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_ADC_ConfigChannel+0x1e4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d125      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d126      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d11a      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	0c9a      	lsrs	r2, r3, #18
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b48:	e002      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x1b2>
 8001b56:	e007      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40012400 	.word	0x40012400
 8001b80:	20000000 	.word	0x20000000
 8001b84:	431bde83 	.word	0x431bde83

08001b88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d12e      	bne.n	8001c00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bb2:	f7ff fdd9 	bl	8001768 <HAL_GetTick>
 8001bb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bb8:	e01b      	b.n	8001bf2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bba:	f7ff fdd5 	bl	8001768 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d914      	bls.n	8001bf2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d10d      	bne.n	8001bf2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	f043 0210 	orr.w	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f043 0201 	orr.w	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e007      	b.n	8001c02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d0dc      	beq.n	8001bba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d38:	d301      	bcc.n	8001d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <SysTick_Config+0x40>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d46:	210f      	movs	r1, #15
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	f7ff ff90 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <SysTick_Config+0x40>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <SysTick_Config+0x40>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff49 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d94:	f7ff ff5e 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	6978      	ldr	r0, [r7, #20]
 8001da0:	f7ff ff90 	bl	8001cc4 <NVIC_EncodePriority>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff5f 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffb0 	bl	8001d28 <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e179      	b.n	80020dc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de8:	2201      	movs	r2, #1
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8168 	bne.w	80020d6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4aa0      	ldr	r2, [pc, #640]	; (800208c <HAL_GPIO_Init+0x2b8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d05e      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e10:	4a9e      	ldr	r2, [pc, #632]	; (800208c <HAL_GPIO_Init+0x2b8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d875      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e16:	4a9e      	ldr	r2, [pc, #632]	; (8002090 <HAL_GPIO_Init+0x2bc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d058      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e1c:	4a9c      	ldr	r2, [pc, #624]	; (8002090 <HAL_GPIO_Init+0x2bc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d86f      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e22:	4a9c      	ldr	r2, [pc, #624]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d052      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e28:	4a9a      	ldr	r2, [pc, #616]	; (8002094 <HAL_GPIO_Init+0x2c0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d869      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a9a      	ldr	r2, [pc, #616]	; (8002098 <HAL_GPIO_Init+0x2c4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d04c      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e34:	4a98      	ldr	r2, [pc, #608]	; (8002098 <HAL_GPIO_Init+0x2c4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d863      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e3a:	4a98      	ldr	r2, [pc, #608]	; (800209c <HAL_GPIO_Init+0x2c8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d046      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e40:	4a96      	ldr	r2, [pc, #600]	; (800209c <HAL_GPIO_Init+0x2c8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d85d      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d82a      	bhi.n	8001ea0 <HAL_GPIO_Init+0xcc>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d859      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <HAL_GPIO_Init+0x80>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001ecf 	.word	0x08001ecf
 8001e58:	08001ea9 	.word	0x08001ea9
 8001e5c:	08001ebb 	.word	0x08001ebb
 8001e60:	08001efd 	.word	0x08001efd
 8001e64:	08001f03 	.word	0x08001f03
 8001e68:	08001f03 	.word	0x08001f03
 8001e6c:	08001f03 	.word	0x08001f03
 8001e70:	08001f03 	.word	0x08001f03
 8001e74:	08001f03 	.word	0x08001f03
 8001e78:	08001f03 	.word	0x08001f03
 8001e7c:	08001f03 	.word	0x08001f03
 8001e80:	08001f03 	.word	0x08001f03
 8001e84:	08001f03 	.word	0x08001f03
 8001e88:	08001f03 	.word	0x08001f03
 8001e8c:	08001f03 	.word	0x08001f03
 8001e90:	08001f03 	.word	0x08001f03
 8001e94:	08001f03 	.word	0x08001f03
 8001e98:	08001eb1 	.word	0x08001eb1
 8001e9c:	08001ec5 	.word	0x08001ec5
 8001ea0:	4a7f      	ldr	r2, [pc, #508]	; (80020a0 <HAL_GPIO_Init+0x2cc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea6:	e02c      	b.n	8001f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e029      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e024      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e01f      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e01a      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e013      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	611a      	str	r2, [r3, #16]
          break;
 8001eee:	e009      	b.n	8001f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	615a      	str	r2, [r3, #20]
          break;
 8001efa:	e003      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          break;
 8001f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d801      	bhi.n	8001f0e <HAL_GPIO_Init+0x13a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	e001      	b.n	8001f12 <HAL_GPIO_Init+0x13e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	; 0xff
 8001f18:	d802      	bhi.n	8001f20 <HAL_GPIO_Init+0x14c>
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x152>
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	3b08      	subs	r3, #8
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	6a39      	ldr	r1, [r7, #32]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80c1 	beq.w	80020d6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f6c:	4a4e      	ldr	r2, [pc, #312]	; (80020a8 <HAL_GPIO_Init+0x2d4>)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a46      	ldr	r2, [pc, #280]	; (80020ac <HAL_GPIO_Init+0x2d8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d01f      	beq.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a45      	ldr	r2, [pc, #276]	; (80020b0 <HAL_GPIO_Init+0x2dc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d019      	beq.n	8001fd4 <HAL_GPIO_Init+0x200>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a44      	ldr	r2, [pc, #272]	; (80020b4 <HAL_GPIO_Init+0x2e0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <HAL_GPIO_Init+0x1fc>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a43      	ldr	r2, [pc, #268]	; (80020b8 <HAL_GPIO_Init+0x2e4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00d      	beq.n	8001fcc <HAL_GPIO_Init+0x1f8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a42      	ldr	r2, [pc, #264]	; (80020bc <HAL_GPIO_Init+0x2e8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <HAL_GPIO_Init+0x1f4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a41      	ldr	r2, [pc, #260]	; (80020c0 <HAL_GPIO_Init+0x2ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_GPIO_Init+0x1f0>
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	e00a      	b.n	8001fda <HAL_GPIO_Init+0x206>
 8001fc4:	2306      	movs	r3, #6
 8001fc6:	e008      	b.n	8001fda <HAL_GPIO_Init+0x206>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e006      	b.n	8001fda <HAL_GPIO_Init+0x206>
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e004      	b.n	8001fda <HAL_GPIO_Init+0x206>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x206>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_GPIO_Init+0x206>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fdc:	f002 0203 	and.w	r2, r2, #3
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	4093      	lsls	r3, r2
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fea:	492f      	ldr	r1, [pc, #188]	; (80020a8 <HAL_GPIO_Init+0x2d4>)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	492e      	ldr	r1, [pc, #184]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	492a      	ldr	r1, [pc, #168]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 800201c:	4013      	ands	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4924      	ldr	r1, [pc, #144]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4920      	ldr	r1, [pc, #128]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 8002044:	4013      	ands	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d006      	beq.n	8002062 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	491a      	ldr	r1, [pc, #104]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
 8002060:	e006      	b.n	8002070 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	43db      	mvns	r3, r3
 800206a:	4916      	ldr	r1, [pc, #88]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 800206c:	4013      	ands	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d025      	beq.n	80020c8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4910      	ldr	r1, [pc, #64]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
 8002088:	e025      	b.n	80020d6 <HAL_GPIO_Init+0x302>
 800208a:	bf00      	nop
 800208c:	10320000 	.word	0x10320000
 8002090:	10310000 	.word	0x10310000
 8002094:	10220000 	.word	0x10220000
 8002098:	10210000 	.word	0x10210000
 800209c:	10120000 	.word	0x10120000
 80020a0:	10110000 	.word	0x10110000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40011400 	.word	0x40011400
 80020bc:	40011800 	.word	0x40011800
 80020c0:	40011c00 	.word	0x40011c00
 80020c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_GPIO_Init+0x324>)
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4909      	ldr	r1, [pc, #36]	; (80020f8 <HAL_GPIO_Init+0x324>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f47f ae7e 	bne.w	8001de8 <HAL_GPIO_Init+0x14>
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	372c      	adds	r7, #44	; 0x2c
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	887b      	ldrh	r3, [r7, #2]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	e001      	b.n	800211e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	807b      	strh	r3, [r7, #2]
 8002136:	4613      	mov	r3, r2
 8002138:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800213a:	787b      	ldrb	r3, [r7, #1]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002140:	887a      	ldrh	r2, [r7, #2]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002146:	e003      	b.n	8002150 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	041a      	lsls	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	611a      	str	r2, [r3, #16]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
	...

0800215c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e26c      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8087 	beq.w	800228a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800217c:	4b92      	ldr	r3, [pc, #584]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b04      	cmp	r3, #4
 8002186:	d00c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002188:	4b8f      	ldr	r3, [pc, #572]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d112      	bne.n	80021ba <HAL_RCC_OscConfig+0x5e>
 8002194:	4b8c      	ldr	r3, [pc, #560]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d10b      	bne.n	80021ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a2:	4b89      	ldr	r3, [pc, #548]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d06c      	beq.n	8002288 <HAL_RCC_OscConfig+0x12c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d168      	bne.n	8002288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e246      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x76>
 80021c4:	4b80      	ldr	r3, [pc, #512]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a7f      	ldr	r2, [pc, #508]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	e02e      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x98>
 80021da:	4b7b      	ldr	r3, [pc, #492]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a7a      	ldr	r2, [pc, #488]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b78      	ldr	r3, [pc, #480]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a77      	ldr	r2, [pc, #476]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0xbc>
 80021fe:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a71      	ldr	r2, [pc, #452]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6e      	ldr	r2, [pc, #440]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xd4>
 8002218:	4b6b      	ldr	r3, [pc, #428]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a6a      	ldr	r2, [pc, #424]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a67      	ldr	r2, [pc, #412]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fa96 	bl	8001768 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff fa92 	bl	8001768 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1fa      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0xe4>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fa82 	bl	8001768 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff fa7e 	bl	8001768 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1e6      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x10c>
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002296:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022a2:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x18c>
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x176>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e1ba      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4939      	ldr	r1, [pc, #228]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e03a      	b.n	800235e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b36      	ldr	r3, [pc, #216]	; (80023cc <HAL_RCC_OscConfig+0x270>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff fa37 	bl	8001768 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fe:	f7ff fa33 	bl	8001768 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e19b      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4927      	ldr	r1, [pc, #156]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_RCC_OscConfig+0x270>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7ff fa16 	bl	8001768 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002340:	f7ff fa12 	bl	8001768 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e17a      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d03a      	beq.n	80023e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d019      	beq.n	80023a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7ff f9f6 	bl	8001768 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7ff f9f2 	bl	8001768 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e15a      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800239e:	2001      	movs	r0, #1
 80023a0:	f000 faa6 	bl	80028f0 <RCC_Delay>
 80023a4:	e01c      	b.n	80023e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_RCC_OscConfig+0x274>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff f9dc 	bl	8001768 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b2:	e00f      	b.n	80023d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7ff f9d8 	bl	8001768 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d908      	bls.n	80023d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e140      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	42420000 	.word	0x42420000
 80023d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	4b9e      	ldr	r3, [pc, #632]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1e9      	bne.n	80023b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a6 	beq.w	800253a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b97      	ldr	r3, [pc, #604]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10d      	bne.n	800241a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b94      	ldr	r3, [pc, #592]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a93      	ldr	r2, [pc, #588]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b8e      	ldr	r3, [pc, #568]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a8a      	ldr	r2, [pc, #552]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7ff f999 	bl	8001768 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7ff f995 	bl	8001768 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0fd      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <HAL_RCC_OscConfig+0x4f8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x312>
 8002460:	4b7b      	ldr	r3, [pc, #492]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4a7a      	ldr	r2, [pc, #488]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6213      	str	r3, [r2, #32]
 800246c:	e02d      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x334>
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a75      	ldr	r2, [pc, #468]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6213      	str	r3, [r2, #32]
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a72      	ldr	r2, [pc, #456]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	e01c      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d10c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x356>
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4a6c      	ldr	r2, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6213      	str	r3, [r2, #32]
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	4a69      	ldr	r2, [pc, #420]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6213      	str	r3, [r2, #32]
 80024b0:	e00b      	b.n	80024ca <HAL_RCC_OscConfig+0x36e>
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a66      	ldr	r2, [pc, #408]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	4b64      	ldr	r3, [pc, #400]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a63      	ldr	r2, [pc, #396]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d015      	beq.n	80024fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7ff f949 	bl	8001768 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7ff f945 	bl	8001768 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e0ab      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f0:	4b57      	ldr	r3, [pc, #348]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ee      	beq.n	80024da <HAL_RCC_OscConfig+0x37e>
 80024fc:	e014      	b.n	8002528 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7ff f933 	bl	8001768 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7ff f92f 	bl	8001768 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e095      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b48      	ldr	r3, [pc, #288]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a47      	ldr	r2, [pc, #284]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002538:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8081 	beq.w	8002646 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002544:	4b42      	ldr	r3, [pc, #264]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d061      	beq.n	8002614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d146      	bne.n	80025e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff f903 	bl	8001768 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7ff f8ff 	bl	8001768 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e067      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d108      	bne.n	80025a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800258e:	4b30      	ldr	r3, [pc, #192]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	492d      	ldr	r1, [pc, #180]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a19      	ldr	r1, [r3, #32]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	430b      	orrs	r3, r1
 80025b2:	4927      	ldr	r1, [pc, #156]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff f8d3 	bl	8001768 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff f8cf 	bl	8001768 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e037      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x46a>
 80025e4:	e02f      	b.n	8002646 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_RCC_OscConfig+0x4fc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff f8bc 	bl	8001768 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff f8b8 	bl	8001768 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e020      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x498>
 8002612:	e018      	b.n	8002646 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e013      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	40007000 	.word	0x40007000
 8002658:	42420060 	.word	0x42420060

0800265c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0d0      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d910      	bls.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b67      	ldr	r3, [pc, #412]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4965      	ldr	r1, [pc, #404]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0b8      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b8:	4b59      	ldr	r3, [pc, #356]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a58      	ldr	r2, [pc, #352]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	494d      	ldr	r1, [pc, #308]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d040      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d115      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e07f      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e073      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06b      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4936      	ldr	r1, [pc, #216]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7ff f80c 	bl	8001768 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7ff f808 	bl	8001768 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e053      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d210      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4922      	ldr	r1, [pc, #136]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e032      	b.n	8002812 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4916      	ldr	r1, [pc, #88]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	490e      	ldr	r1, [pc, #56]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ea:	f000 f821 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1cc>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1d0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe ff6a 	bl	80016e4 <HAL_InitTick>

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40022000 	.word	0x40022000
 8002820:	40021000 	.word	0x40021000
 8002824:	080037fc 	.word	0x080037fc
 8002828:	20000000 	.word	0x20000000
 800282c:	20000004 	.word	0x20000004

08002830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b490      	push	{r4, r7}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002838:	1d3c      	adds	r4, r7, #4
 800283a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002840:	f240 2301 	movw	r3, #513	; 0x201
 8002844:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	2b04      	cmp	r3, #4
 8002868:	d002      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x40>
 800286a:	2b08      	cmp	r3, #8
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x46>
 800286e:	e02d      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002872:	623b      	str	r3, [r7, #32]
      break;
 8002874:	e02d      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	0c9b      	lsrs	r3, r3, #18
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002882:	4413      	add	r3, r2
 8002884:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002888:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d013      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c5b      	lsrs	r3, r3, #17
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028a2:	4413      	add	r3, r2
 80028a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ae:	fb02 f203 	mul.w	r2, r2, r3
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	e004      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	623b      	str	r3, [r7, #32]
      break;
 80028ca:	e002      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80028ce:	623b      	str	r3, [r7, #32]
      break;
 80028d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d2:	6a3b      	ldr	r3, [r7, #32]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc90      	pop	{r4, r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	0800378c 	.word	0x0800378c
 80028e4:	40021000 	.word	0x40021000
 80028e8:	003d0900 	.word	0x003d0900
 80028ec:	007a1200 	.word	0x007a1200

080028f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <RCC_Delay+0x34>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <RCC_Delay+0x38>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0a5b      	lsrs	r3, r3, #9
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800290c:	bf00      	nop
  }
  while (Delay --);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e5a      	subs	r2, r3, #1
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f9      	bne.n	800290c <RCC_Delay+0x1c>
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	20000000 	.word	0x20000000
 8002928:	10624dd3 	.word	0x10624dd3

0800292c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d07d      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294c:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b4c      	ldr	r3, [pc, #304]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	4a4b      	ldr	r2, [pc, #300]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	61d3      	str	r3, [r2, #28]
 8002964:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002970:	2301      	movs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d118      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002980:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a42      	ldr	r2, [pc, #264]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298c:	f7fe feec 	bl	8001768 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	e008      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fee8 	bl	8001768 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e06d      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d02e      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d027      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029da:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029dc:	2201      	movs	r2, #1
 80029de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029e6:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d014      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe feb7 	bl	8001768 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe feb3 	bl	8001768 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e036      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ee      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a20:	4b1a      	ldr	r3, [pc, #104]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	4917      	ldr	r1, [pc, #92]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a50:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	490b      	ldr	r1, [pc, #44]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40007000 	.word	0x40007000
 8002a94:	42420440 	.word	0x42420440

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e041      	b.n	8002b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fd0e 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 fac2 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e041      	b.n	8002bcc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d106      	bne.n	8002b62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f839 	bl	8002bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	4619      	mov	r1, r3
 8002b74:	4610      	mov	r0, r2
 8002b76:	f000 fa73 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <HAL_TIM_PWM_Start+0x24>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e022      	b.n	8002c52 <HAL_TIM_PWM_Start+0x6a>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d109      	bne.n	8002c26 <HAL_TIM_PWM_Start+0x3e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e015      	b.n	8002c52 <HAL_TIM_PWM_Start+0x6a>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d109      	bne.n	8002c40 <HAL_TIM_PWM_Start+0x58>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e008      	b.n	8002c52 <HAL_TIM_PWM_Start+0x6a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e072      	b.n	8002d40 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <HAL_TIM_PWM_Start+0x82>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c68:	e013      	b.n	8002c92 <HAL_TIM_PWM_Start+0xaa>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d104      	bne.n	8002c7a <HAL_TIM_PWM_Start+0x92>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c78:	e00b      	b.n	8002c92 <HAL_TIM_PWM_Start+0xaa>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d104      	bne.n	8002c8a <HAL_TIM_PWM_Start+0xa2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c88:	e003      	b.n	8002c92 <HAL_TIM_PWM_Start+0xaa>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	6839      	ldr	r1, [r7, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fc9c 	bl	80035d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a28      	ldr	r2, [pc, #160]	; (8002d48 <HAL_TIM_PWM_Start+0x160>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_TIM_PWM_Start+0xcc>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <HAL_TIM_PWM_Start+0x164>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_TIM_PWM_Start+0xd0>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_TIM_PWM_Start+0xd2>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_TIM_PWM_Start+0x160>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d018      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x122>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_TIM_PWM_Start+0x164>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x122>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cea:	d00e      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x122>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_TIM_PWM_Start+0x168>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d009      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x122>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <HAL_TIM_PWM_Start+0x16c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x122>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_TIM_PWM_Start+0x170>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d111      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b06      	cmp	r3, #6
 8002d1a:	d010      	beq.n	8002d3e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2c:	e007      	b.n	8002d3e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40013400 	.word	0x40013400
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800
 8002d58:	40000c00 	.word	0x40000c00

08002d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e0ac      	b.n	8002ed0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	f200 809f 	bhi.w	8002ec4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d86:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002dc1 	.word	0x08002dc1
 8002d90:	08002ec5 	.word	0x08002ec5
 8002d94:	08002ec5 	.word	0x08002ec5
 8002d98:	08002ec5 	.word	0x08002ec5
 8002d9c:	08002e01 	.word	0x08002e01
 8002da0:	08002ec5 	.word	0x08002ec5
 8002da4:	08002ec5 	.word	0x08002ec5
 8002da8:	08002ec5 	.word	0x08002ec5
 8002dac:	08002e43 	.word	0x08002e43
 8002db0:	08002ec5 	.word	0x08002ec5
 8002db4:	08002ec5 	.word	0x08002ec5
 8002db8:	08002ec5 	.word	0x08002ec5
 8002dbc:	08002e83 	.word	0x08002e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f9c4 	bl	8003154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0208 	orr.w	r2, r2, #8
 8002dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6999      	ldr	r1, [r3, #24]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	619a      	str	r2, [r3, #24]
      break;
 8002dfe:	e062      	b.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fa14 	bl	8003234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6999      	ldr	r1, [r3, #24]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	021a      	lsls	r2, r3, #8
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	619a      	str	r2, [r3, #24]
      break;
 8002e40:	e041      	b.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fa67 	bl	800331c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0208 	orr.w	r2, r2, #8
 8002e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0204 	bic.w	r2, r2, #4
 8002e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69d9      	ldr	r1, [r3, #28]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	61da      	str	r2, [r3, #28]
      break;
 8002e80:	e021      	b.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fabb 	bl	8003404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69d9      	ldr	r1, [r3, #28]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	021a      	lsls	r2, r3, #8
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	61da      	str	r2, [r3, #28]
      break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_ConfigClockSource+0x18>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e0b3      	b.n	8003058 <HAL_TIM_ConfigClockSource+0x180>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f28:	d03e      	beq.n	8002fa8 <HAL_TIM_ConfigClockSource+0xd0>
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2e:	f200 8087 	bhi.w	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	f000 8085 	beq.w	8003044 <HAL_TIM_ConfigClockSource+0x16c>
 8002f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3e:	d87f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f40:	2b70      	cmp	r3, #112	; 0x70
 8002f42:	d01a      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xa2>
 8002f44:	2b70      	cmp	r3, #112	; 0x70
 8002f46:	d87b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f48:	2b60      	cmp	r3, #96	; 0x60
 8002f4a:	d050      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0x116>
 8002f4c:	2b60      	cmp	r3, #96	; 0x60
 8002f4e:	d877      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f50:	2b50      	cmp	r3, #80	; 0x50
 8002f52:	d03c      	beq.n	8002fce <HAL_TIM_ConfigClockSource+0xf6>
 8002f54:	2b50      	cmp	r3, #80	; 0x50
 8002f56:	d873      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d058      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x136>
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d86f      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d064      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x156>
 8002f64:	2b30      	cmp	r3, #48	; 0x30
 8002f66:	d86b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d060      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x156>
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d867      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d05c      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x156>
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d05a      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f78:	e062      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f000 fb06 	bl	800359a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	609a      	str	r2, [r3, #8]
      break;
 8002fa6:	e04e      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	6899      	ldr	r1, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f000 faef 	bl	800359a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fca:	609a      	str	r2, [r3, #8]
      break;
 8002fcc:	e03b      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f000 fa66 	bl	80034ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2150      	movs	r1, #80	; 0x50
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fabd 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8002fec:	e02b      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f000 fa84 	bl	8003508 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2160      	movs	r1, #96	; 0x60
 8003006:	4618      	mov	r0, r3
 8003008:	f000 faad 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 800300c:	e01b      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	461a      	mov	r2, r3
 800301c:	f000 fa46 	bl	80034ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fa9d 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 800302c:	e00b      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f000 fa94 	bl	8003566 <TIM_ITRx_SetConfig>
        break;
 800303e:	e002      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003044:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a33      	ldr	r2, [pc, #204]	; (8003140 <TIM_Base_SetConfig+0xe0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a32      	ldr	r2, [pc, #200]	; (8003144 <TIM_Base_SetConfig+0xe4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00f      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003086:	d00b      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <TIM_Base_SetConfig+0xe8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a2e      	ldr	r2, [pc, #184]	; (800314c <TIM_Base_SetConfig+0xec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a2d      	ldr	r2, [pc, #180]	; (8003150 <TIM_Base_SetConfig+0xf0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d108      	bne.n	80030b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a22      	ldr	r2, [pc, #136]	; (8003140 <TIM_Base_SetConfig+0xe0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a21      	ldr	r2, [pc, #132]	; (8003144 <TIM_Base_SetConfig+0xe4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00f      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d00b      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <TIM_Base_SetConfig+0xe8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <TIM_Base_SetConfig+0xec>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_Base_SetConfig+0x82>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <TIM_Base_SetConfig+0xf0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <TIM_Base_SetConfig+0xe0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_Base_SetConfig+0xc8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <TIM_Base_SetConfig+0xe4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d103      	bne.n	8003130 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	615a      	str	r2, [r3, #20]
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	40012c00 	.word	0x40012c00
 8003144:	40013400 	.word	0x40013400
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00

08003154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f023 0201 	bic.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 0302 	bic.w	r3, r3, #2
 800319c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a20      	ldr	r2, [pc, #128]	; (800322c <TIM_OC1_SetConfig+0xd8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_OC1_SetConfig+0x64>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a1f      	ldr	r2, [pc, #124]	; (8003230 <TIM_OC1_SetConfig+0xdc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d10c      	bne.n	80031d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f023 0308 	bic.w	r3, r3, #8
 80031be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a15      	ldr	r2, [pc, #84]	; (800322c <TIM_OC1_SetConfig+0xd8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_OC1_SetConfig+0x8e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a14      	ldr	r2, [pc, #80]	; (8003230 <TIM_OC1_SetConfig+0xdc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d111      	bne.n	8003206 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	621a      	str	r2, [r3, #32]
}
 8003220:	bf00      	nop
 8003222:	371c      	adds	r7, #28
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40013400 	.word	0x40013400

08003234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 0210 	bic.w	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f023 0320 	bic.w	r3, r3, #32
 800327e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a21      	ldr	r2, [pc, #132]	; (8003314 <TIM_OC2_SetConfig+0xe0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_OC2_SetConfig+0x68>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a20      	ldr	r2, [pc, #128]	; (8003318 <TIM_OC2_SetConfig+0xe4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10d      	bne.n	80032b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a16      	ldr	r2, [pc, #88]	; (8003314 <TIM_OC2_SetConfig+0xe0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_OC2_SetConfig+0x94>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <TIM_OC2_SetConfig+0xe4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d113      	bne.n	80032f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	621a      	str	r2, [r3, #32]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40013400 	.word	0x40013400

0800331c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0303 	bic.w	r3, r3, #3
 8003352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a21      	ldr	r2, [pc, #132]	; (80033fc <TIM_OC3_SetConfig+0xe0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_OC3_SetConfig+0x66>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a20      	ldr	r2, [pc, #128]	; (8003400 <TIM_OC3_SetConfig+0xe4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10d      	bne.n	800339e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800339c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a16      	ldr	r2, [pc, #88]	; (80033fc <TIM_OC3_SetConfig+0xe0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d003      	beq.n	80033ae <TIM_OC3_SetConfig+0x92>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a15      	ldr	r2, [pc, #84]	; (8003400 <TIM_OC3_SetConfig+0xe4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d113      	bne.n	80033d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	621a      	str	r2, [r3, #32]
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40013400 	.word	0x40013400

08003404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800344e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	031b      	lsls	r3, r3, #12
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <TIM_OC4_SetConfig+0xa0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_OC4_SetConfig+0x68>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <TIM_OC4_SetConfig+0xa4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d109      	bne.n	8003480 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	019b      	lsls	r3, r3, #6
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40013400 	.word	0x40013400

080034ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f023 0201 	bic.w	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 030a 	bic.w	r3, r3, #10
 80034e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f023 0210 	bic.w	r2, r3, #16
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003532:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	031b      	lsls	r3, r3, #12
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003544:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	621a      	str	r2, [r3, #32]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	f043 0307 	orr.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800359a:	b480      	push	{r7}
 800359c:	b087      	sub	sp, #28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	021a      	lsls	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	431a      	orrs	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	609a      	str	r2, [r3, #8]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2201      	movs	r2, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	401a      	ands	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1a      	ldr	r2, [r3, #32]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e050      	b.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d00e      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a15      	ldr	r2, [pc, #84]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10c      	bne.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40013400 	.word	0x40013400
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40000c00 	.word	0x40000c00

080036f8 <__libc_init_array>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	2600      	movs	r6, #0
 80036fc:	4d0c      	ldr	r5, [pc, #48]	; (8003730 <__libc_init_array+0x38>)
 80036fe:	4c0d      	ldr	r4, [pc, #52]	; (8003734 <__libc_init_array+0x3c>)
 8003700:	1b64      	subs	r4, r4, r5
 8003702:	10a4      	asrs	r4, r4, #2
 8003704:	42a6      	cmp	r6, r4
 8003706:	d109      	bne.n	800371c <__libc_init_array+0x24>
 8003708:	f000 f822 	bl	8003750 <_init>
 800370c:	2600      	movs	r6, #0
 800370e:	4d0a      	ldr	r5, [pc, #40]	; (8003738 <__libc_init_array+0x40>)
 8003710:	4c0a      	ldr	r4, [pc, #40]	; (800373c <__libc_init_array+0x44>)
 8003712:	1b64      	subs	r4, r4, r5
 8003714:	10a4      	asrs	r4, r4, #2
 8003716:	42a6      	cmp	r6, r4
 8003718:	d105      	bne.n	8003726 <__libc_init_array+0x2e>
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003720:	4798      	blx	r3
 8003722:	3601      	adds	r6, #1
 8003724:	e7ee      	b.n	8003704 <__libc_init_array+0xc>
 8003726:	f855 3b04 	ldr.w	r3, [r5], #4
 800372a:	4798      	blx	r3
 800372c:	3601      	adds	r6, #1
 800372e:	e7f2      	b.n	8003716 <__libc_init_array+0x1e>
 8003730:	0800380c 	.word	0x0800380c
 8003734:	0800380c 	.word	0x0800380c
 8003738:	0800380c 	.word	0x0800380c
 800373c:	08003810 	.word	0x08003810

08003740 <memset>:
 8003740:	4603      	mov	r3, r0
 8003742:	4402      	add	r2, r0
 8003744:	4293      	cmp	r3, r2
 8003746:	d100      	bne.n	800374a <memset+0xa>
 8003748:	4770      	bx	lr
 800374a:	f803 1b01 	strb.w	r1, [r3], #1
 800374e:	e7f9      	b.n	8003744 <memset+0x4>

08003750 <_init>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	bf00      	nop
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr

0800375c <_fini>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr
