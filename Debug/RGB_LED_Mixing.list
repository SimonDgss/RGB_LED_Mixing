
RGB_LED_Mixing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f4c  08003f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f4c  08003f4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f4c  08003f4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003f60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003f60  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c2a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018bf  00000000  00000000  00029c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001917e  00000000  00000000  0002c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba90  00000000  00000000  00045b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000980f2  00000000  00000000  000515b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e96a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c00  00000000  00000000  000e96fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003e88 	.word	0x08003e88

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003e88 	.word	0x08003e88

08000224 <initSEG>:

	}
}

void initSEG(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	uint16_t pinportA = SEG_A_Pin;
 800022a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800022e:	80fb      	strh	r3, [r7, #6]
	uint16_t pinportC = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin;
 8000230:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000234:	80bb      	strh	r3, [r7, #4]
	uint16_t pinportB = SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT1_Pin|DIGIT2_Pin|DIGIT3_Pin|DIGIT4_Pin|DIGIT5_Pin|DIGIT6_Pin|DIGIT7_Pin|DIGIT8_Pin;
 8000236:	f24f 33f8 	movw	r3, #62456	; 0xf3f8
 800023a:	807b      	strh	r3, [r7, #2]
	uint16_t pinportD = SEG_E_Pin;
 800023c:	2304      	movs	r3, #4
 800023e:	803b      	strh	r3, [r7, #0]

	HAL_GPIO_WritePin(SEG_A_GPIO_Port, pinportA, GPIO_PIN_RESET);
 8000240:	88fb      	ldrh	r3, [r7, #6]
 8000242:	2200      	movs	r2, #0
 8000244:	4619      	mov	r1, r3
 8000246:	480c      	ldr	r0, [pc, #48]	; (8000278 <initSEG+0x54>)
 8000248:	f002 fb0b 	bl	8002862 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_B_GPIO_Port,pinportC , GPIO_PIN_RESET);
 800024c:	88bb      	ldrh	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	4619      	mov	r1, r3
 8000252:	480a      	ldr	r0, [pc, #40]	; (800027c <initSEG+0x58>)
 8000254:	f002 fb05 	bl	8002862 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_E_GPIO_Port, pinportD, GPIO_PIN_RESET);
 8000258:	883b      	ldrh	r3, [r7, #0]
 800025a:	2200      	movs	r2, #0
 800025c:	4619      	mov	r1, r3
 800025e:	4808      	ldr	r0, [pc, #32]	; (8000280 <initSEG+0x5c>)
 8000260:	f002 faff 	bl	8002862 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SEG_F_GPIO_Port,pinportB , GPIO_PIN_RESET);
 8000264:	887b      	ldrh	r3, [r7, #2]
 8000266:	2200      	movs	r2, #0
 8000268:	4619      	mov	r1, r3
 800026a:	4806      	ldr	r0, [pc, #24]	; (8000284 <initSEG+0x60>)
 800026c:	f002 faf9 	bl	8002862 <HAL_GPIO_WritePin>

}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40010800 	.word	0x40010800
 800027c:	40011000 	.word	0x40011000
 8000280:	40011400 	.word	0x40011400
 8000284:	40010c00 	.word	0x40010c00

08000288 <printchar>:
	GPIOD->ODR = pinsegE;
	GPIOB->ODR = pinsegFGDPdig;
}

void printchar(int chara,uint16_t Pin)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b08a      	sub	sp, #40	; 0x28
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	807b      	strh	r3, [r7, #2]
	int segmA =(0x01&(SevenSegmentASCII[chara-32]));
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3b20      	subs	r3, #32
 8000298:	4a44      	ldr	r2, [pc, #272]	; (80003ac <printchar+0x124>)
 800029a:	5cd3      	ldrb	r3, [r2, r3]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	627b      	str	r3, [r7, #36]	; 0x24
	int segmB =(0x02&(SevenSegmentASCII[chara-32]))>>1;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3b20      	subs	r3, #32
 80002a6:	4a41      	ldr	r2, [pc, #260]	; (80003ac <printchar+0x124>)
 80002a8:	5cd3      	ldrb	r3, [r2, r3]
 80002aa:	085b      	lsrs	r3, r3, #1
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	623b      	str	r3, [r7, #32]
	int segmC =(0x04&(SevenSegmentASCII[chara-32]))>>2;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3b20      	subs	r3, #32
 80002b8:	4a3c      	ldr	r2, [pc, #240]	; (80003ac <printchar+0x124>)
 80002ba:	5cd3      	ldrb	r3, [r2, r3]
 80002bc:	089b      	lsrs	r3, r3, #2
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	f003 0301 	and.w	r3, r3, #1
 80002c4:	61fb      	str	r3, [r7, #28]
	int segmD =(0x08&(SevenSegmentASCII[chara-32]))>>3;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3b20      	subs	r3, #32
 80002ca:	4a38      	ldr	r2, [pc, #224]	; (80003ac <printchar+0x124>)
 80002cc:	5cd3      	ldrb	r3, [r2, r3]
 80002ce:	08db      	lsrs	r3, r3, #3
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	61bb      	str	r3, [r7, #24]
	int segmE =(0x10&(SevenSegmentASCII[chara-32]))>>4;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3b20      	subs	r3, #32
 80002dc:	4a33      	ldr	r2, [pc, #204]	; (80003ac <printchar+0x124>)
 80002de:	5cd3      	ldrb	r3, [r2, r3]
 80002e0:	091b      	lsrs	r3, r3, #4
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	617b      	str	r3, [r7, #20]
	int segmF =(0x20&(SevenSegmentASCII[chara-32]))>>5;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	3b20      	subs	r3, #32
 80002ee:	4a2f      	ldr	r2, [pc, #188]	; (80003ac <printchar+0x124>)
 80002f0:	5cd3      	ldrb	r3, [r2, r3]
 80002f2:	095b      	lsrs	r3, r3, #5
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
	int segmG =(0x40&(SevenSegmentASCII[chara-32]))>>6;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3b20      	subs	r3, #32
 8000300:	4a2a      	ldr	r2, [pc, #168]	; (80003ac <printchar+0x124>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	099b      	lsrs	r3, r3, #6
 8000306:	b2db      	uxtb	r3, r3
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
	int segmDP =(0x80&(SevenSegmentASCII[chara-32]))>>7;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3b20      	subs	r3, #32
 8000312:	4a26      	ldr	r2, [pc, #152]	; (80003ac <printchar+0x124>)
 8000314:	5cd3      	ldrb	r3, [r2, r3]
 8000316:	09db      	lsrs	r3, r3, #7
 8000318:	b2db      	uxtb	r3, r3
 800031a:	60bb      	str	r3, [r7, #8]
	GPIOC->ODR = GPIOC->ODR&pinsegBCD;
	GPIOA->ODR = GPIOA->ODR&pinsegA;
	GPIOD->ODR = GPIOD->ODR&pinsegE;
	GPIOB->ODR = GPIOB->ODR&pinsegFGDPdig;
	 */
	initSEG();
 800031c:	f7ff ff82 	bl	8000224 <initSEG>
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, segmA);
 8000320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000322:	b2db      	uxtb	r3, r3
 8000324:	461a      	mov	r2, r3
 8000326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800032a:	4821      	ldr	r0, [pc, #132]	; (80003b0 <printchar+0x128>)
 800032c:	f002 fa99 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, segmB);
 8000330:	6a3b      	ldr	r3, [r7, #32]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	461a      	mov	r2, r3
 8000336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033a:	481e      	ldr	r0, [pc, #120]	; (80003b4 <printchar+0x12c>)
 800033c:	f002 fa91 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, segmC);
 8000340:	69fb      	ldr	r3, [r7, #28]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800034a:	481a      	ldr	r0, [pc, #104]	; (80003b4 <printchar+0x12c>)
 800034c:	f002 fa89 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, segmD);
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	b2db      	uxtb	r3, r3
 8000354:	461a      	mov	r2, r3
 8000356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035a:	4816      	ldr	r0, [pc, #88]	; (80003b4 <printchar+0x12c>)
 800035c:	f002 fa81 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, segmE);
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	461a      	mov	r2, r3
 8000366:	2104      	movs	r1, #4
 8000368:	4813      	ldr	r0, [pc, #76]	; (80003b8 <printchar+0x130>)
 800036a:	f002 fa7a 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, segmF);
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	2108      	movs	r1, #8
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <printchar+0x134>)
 8000378:	f002 fa73 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, segmG);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	2110      	movs	r1, #16
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <printchar+0x134>)
 8000386:	f002 fa6c 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_DP_GPIO_Port, SEG_DP_Pin, segmDP);
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	2120      	movs	r1, #32
 8000392:	480a      	ldr	r0, [pc, #40]	; (80003bc <printchar+0x134>)
 8000394:	f002 fa65 	bl	8002862 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIGIT1_GPIO_Port, Pin, GPIO_PIN_SET);
 8000398:	887b      	ldrh	r3, [r7, #2]
 800039a:	2201      	movs	r2, #1
 800039c:	4619      	mov	r1, r3
 800039e:	4807      	ldr	r0, [pc, #28]	; (80003bc <printchar+0x134>)
 80003a0:	f002 fa5f 	bl	8002862 <HAL_GPIO_WritePin>
}
 80003a4:	bf00      	nop
 80003a6:	3728      	adds	r7, #40	; 0x28
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	08003edc 	.word	0x08003edc
 80003b0:	40010800 	.word	0x40010800
 80003b4:	40011000 	.word	0x40011000
 80003b8:	40011400 	.word	0x40011400
 80003bc:	40010c00 	.word	0x40010c00

080003c0 <printFigures>:


void printFigures(int number,uint16_t Pin, int leading_zero)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	460b      	mov	r3, r1
 80003ca:	607a      	str	r2, [r7, #4]
 80003cc:	817b      	strh	r3, [r7, #10]
	printchar(number+48,Pin);
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	3330      	adds	r3, #48	; 0x30
 80003d2:	897a      	ldrh	r2, [r7, #10]
 80003d4:	4611      	mov	r1, r2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ff56 	bl	8000288 <printchar>

	if(!leading_zero)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d108      	bne.n	80003f4 <printFigures+0x34>
	{
		if(number==0)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d105      	bne.n	80003f4 <printFigures+0x34>
		{
			HAL_GPIO_WritePin(GPIOB, Pin, GPIO_PIN_RESET);
 80003e8:	897b      	ldrh	r3, [r7, #10]
 80003ea:	2200      	movs	r2, #0
 80003ec:	4619      	mov	r1, r3
 80003ee:	4803      	ldr	r0, [pc, #12]	; (80003fc <printFigures+0x3c>)
 80003f0:	f002 fa37 	bl	8002862 <HAL_GPIO_WritePin>
		}
	}
}
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40010c00 	.word	0x40010c00

08000400 <affichageDig>:

void affichageDig(int position_compteur,int delai,int position, int limpos,int limneg)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	603b      	str	r3, [r7, #0]
	static int i=0;
	int digit[4];
	int pos=position*6;
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	4613      	mov	r3, r2
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	4413      	add	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
	switch (i){
 800041a:	4b9b      	ldr	r3, [pc, #620]	; (8000688 <affichageDig+0x288>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b03      	cmp	r3, #3
 8000420:	f200 8267 	bhi.w	80008f2 <affichageDig+0x4f2>
 8000424:	a201      	add	r2, pc, #4	; (adr r2, 800042c <affichageDig+0x2c>)
 8000426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042a:	bf00      	nop
 800042c:	0800043d 	.word	0x0800043d
 8000430:	08000563 	.word	0x08000563
 8000434:	08000699 	.word	0x08000699
 8000438:	080007c1 	.word	0x080007c1

	case 0:
	{
		if(position_compteur==limpos+1)
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	3301      	adds	r3, #1
 8000440:	68fa      	ldr	r2, [r7, #12]
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <affichageDig+0x4a>
			position_compteur=0;
 8000446:	2300      	movs	r3, #0
 8000448:	60fb      	str	r3, [r7, #12]



		if(position_compteur<0)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	2b00      	cmp	r3, #0
 800044e:	da0b      	bge.n	8000468 <affichageDig+0x68>
		{
			printchar('-', DIGIT1_Pin);
 8000450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000454:	202d      	movs	r0, #45	; 0x2d
 8000456:	f7ff ff17 	bl	8000288 <printchar>
			if(position_compteur==-(limneg+1))
 800045a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800045c:	43db      	mvns	r3, r3
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	429a      	cmp	r2, r3
 8000462:	d101      	bne.n	8000468 <affichageDig+0x68>
				position_compteur=0;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
		}
		digit[0]=abs(position_compteur)%10;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800046e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000472:	4b86      	ldr	r3, [pc, #536]	; (800068c <affichageDig+0x28c>)
 8000474:	fb83 2301 	smull	r2, r3, r3, r1
 8000478:	109a      	asrs	r2, r3, #2
 800047a:	17cb      	asrs	r3, r1, #31
 800047c:	1ad2      	subs	r2, r2, r3
 800047e:	4613      	mov	r3, r2
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	4413      	add	r3, r2
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	1aca      	subs	r2, r1, r3
 8000488:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000490:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	1ad3      	subs	r3, r2, r3
 8000498:	4a7c      	ldr	r2, [pc, #496]	; (800068c <affichageDig+0x28c>)
 800049a:	fb82 1203 	smull	r1, r2, r2, r3
 800049e:	1092      	asrs	r2, r2, #2
 80004a0:	17db      	asrs	r3, r3, #31
 80004a2:	1ad1      	subs	r1, r2, r3
 80004a4:	4b79      	ldr	r3, [pc, #484]	; (800068c <affichageDig+0x28c>)
 80004a6:	fb83 2301 	smull	r2, r3, r3, r1
 80004aa:	109a      	asrs	r2, r3, #2
 80004ac:	17cb      	asrs	r3, r1, #31
 80004ae:	1ad2      	subs	r2, r2, r3
 80004b0:	4613      	mov	r3, r2
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	4413      	add	r3, r2
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	1aca      	subs	r2, r1, r3
 80004ba:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004c2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004c6:	69bb      	ldr	r3, [r7, #24]
 80004c8:	f06f 0109 	mvn.w	r1, #9
 80004cc:	fb01 f303 	mul.w	r3, r1, r3
 80004d0:	441a      	add	r2, r3
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	4a6e      	ldr	r2, [pc, #440]	; (8000690 <affichageDig+0x290>)
 80004d8:	fb82 1203 	smull	r1, r2, r2, r3
 80004dc:	1152      	asrs	r2, r2, #5
 80004de:	17db      	asrs	r3, r3, #31
 80004e0:	1ad1      	subs	r1, r2, r3
 80004e2:	4b6a      	ldr	r3, [pc, #424]	; (800068c <affichageDig+0x28c>)
 80004e4:	fb83 2301 	smull	r2, r3, r3, r1
 80004e8:	109a      	asrs	r2, r3, #2
 80004ea:	17cb      	asrs	r3, r1, #31
 80004ec:	1ad2      	subs	r2, r2, r3
 80004ee:	4613      	mov	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	4413      	add	r3, r2
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	1aca      	subs	r2, r1, r3
 80004f8:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000500:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800050a:	fb01 f303 	mul.w	r3, r1, r3
 800050e:	441a      	add	r2, r3
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	1ad2      	subs	r2, r2, r3
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	f06f 0109 	mvn.w	r1, #9
 800051a:	fb01 f303 	mul.w	r3, r1, r3
 800051e:	4413      	add	r3, r2
 8000520:	4a5c      	ldr	r2, [pc, #368]	; (8000694 <affichageDig+0x294>)
 8000522:	fb82 1203 	smull	r1, r2, r2, r3
 8000526:	1192      	asrs	r2, r2, #6
 8000528:	17db      	asrs	r3, r3, #31
 800052a:	1ad1      	subs	r1, r2, r3
 800052c:	4b57      	ldr	r3, [pc, #348]	; (800068c <affichageDig+0x28c>)
 800052e:	fb83 2301 	smull	r2, r3, r3, r1
 8000532:	109a      	asrs	r2, r3, #2
 8000534:	17cb      	asrs	r3, r1, #31
 8000536:	1ad2      	subs	r2, r2, r3
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	1aca      	subs	r2, r1, r3
 8000542:	623a      	str	r2, [r7, #32]

		printFigures(digit[0], DIGIT4_Pin<<pos,1);
 8000544:	6978      	ldr	r0, [r7, #20]
 8000546:	2240      	movs	r2, #64	; 0x40
 8000548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800054a:	fa02 f303 	lsl.w	r3, r2, r3
 800054e:	b29b      	uxth	r3, r3
 8000550:	2201      	movs	r2, #1
 8000552:	4619      	mov	r1, r3
 8000554:	f7ff ff34 	bl	80003c0 <printFigures>
		HAL_Delay(delai);
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fcaa 	bl	8001eb4 <HAL_Delay>
		break;
 8000560:	e1c7      	b.n	80008f2 <affichageDig+0x4f2>
	}
	case 1:
	{
		if(position_compteur==limpos+1)
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	429a      	cmp	r2, r3
 800056a:	d101      	bne.n	8000570 <affichageDig+0x170>
			position_compteur=0;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]


		if(position_compteur<0)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	da0b      	bge.n	800058e <affichageDig+0x18e>
		{
			printchar('-', DIGIT1_Pin);
 8000576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057a:	202d      	movs	r0, #45	; 0x2d
 800057c:	f7ff fe84 	bl	8000288 <printchar>
			if(position_compteur==-(limneg+1))
 8000580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000582:	43db      	mvns	r3, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	429a      	cmp	r2, r3
 8000588:	d101      	bne.n	800058e <affichageDig+0x18e>
				position_compteur=0;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
		}
		digit[0]=abs(position_compteur)%10;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000594:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000598:	4b3c      	ldr	r3, [pc, #240]	; (800068c <affichageDig+0x28c>)
 800059a:	fb83 2301 	smull	r2, r3, r3, r1
 800059e:	109a      	asrs	r2, r3, #2
 80005a0:	17cb      	asrs	r3, r1, #31
 80005a2:	1ad2      	subs	r2, r2, r3
 80005a4:	4613      	mov	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	1aca      	subs	r2, r1, r3
 80005ae:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005b6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	4a33      	ldr	r2, [pc, #204]	; (800068c <affichageDig+0x28c>)
 80005c0:	fb82 1203 	smull	r1, r2, r2, r3
 80005c4:	1092      	asrs	r2, r2, #2
 80005c6:	17db      	asrs	r3, r3, #31
 80005c8:	1ad1      	subs	r1, r2, r3
 80005ca:	4b30      	ldr	r3, [pc, #192]	; (800068c <affichageDig+0x28c>)
 80005cc:	fb83 2301 	smull	r2, r3, r3, r1
 80005d0:	109a      	asrs	r2, r3, #2
 80005d2:	17cb      	asrs	r3, r1, #31
 80005d4:	1ad2      	subs	r2, r2, r3
 80005d6:	4613      	mov	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4413      	add	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	1aca      	subs	r2, r1, r3
 80005e0:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	f06f 0109 	mvn.w	r1, #9
 80005f2:	fb01 f303 	mul.w	r3, r1, r3
 80005f6:	441a      	add	r2, r3
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	4a24      	ldr	r2, [pc, #144]	; (8000690 <affichageDig+0x290>)
 80005fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000602:	1152      	asrs	r2, r2, #5
 8000604:	17db      	asrs	r3, r3, #31
 8000606:	1ad1      	subs	r1, r2, r3
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <affichageDig+0x28c>)
 800060a:	fb83 2301 	smull	r2, r3, r3, r1
 800060e:	109a      	asrs	r2, r3, #2
 8000610:	17cb      	asrs	r3, r1, #31
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	4613      	mov	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	1aca      	subs	r2, r1, r3
 800061e:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000626:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000630:	fb01 f303 	mul.w	r3, r1, r3
 8000634:	441a      	add	r2, r3
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	1ad2      	subs	r2, r2, r3
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	f06f 0109 	mvn.w	r1, #9
 8000640:	fb01 f303 	mul.w	r3, r1, r3
 8000644:	4413      	add	r3, r2
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <affichageDig+0x294>)
 8000648:	fb82 1203 	smull	r1, r2, r2, r3
 800064c:	1192      	asrs	r2, r2, #6
 800064e:	17db      	asrs	r3, r3, #31
 8000650:	1ad1      	subs	r1, r2, r3
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <affichageDig+0x28c>)
 8000654:	fb83 2301 	smull	r2, r3, r3, r1
 8000658:	109a      	asrs	r2, r3, #2
 800065a:	17cb      	asrs	r3, r1, #31
 800065c:	1ad2      	subs	r2, r2, r3
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	1aca      	subs	r2, r1, r3
 8000668:	623a      	str	r2, [r7, #32]
		printFigures(digit[1], DIGIT3_Pin<<pos,1);
 800066a:	69b8      	ldr	r0, [r7, #24]
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000670:	fa02 f303 	lsl.w	r3, r2, r3
 8000674:	b29b      	uxth	r3, r3
 8000676:	2201      	movs	r2, #1
 8000678:	4619      	mov	r1, r3
 800067a:	f7ff fea1 	bl	80003c0 <printFigures>
		HAL_Delay(delai);
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fc17 	bl	8001eb4 <HAL_Delay>
		break;
 8000686:	e134      	b.n	80008f2 <affichageDig+0x4f2>
 8000688:	20000028 	.word	0x20000028
 800068c:	66666667 	.word	0x66666667
 8000690:	51eb851f 	.word	0x51eb851f
 8000694:	10624dd3 	.word	0x10624dd3
	}
	case 2:
	{
		if(position_compteur==limpos+1)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d101      	bne.n	80006a6 <affichageDig+0x2a6>
			position_compteur=0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]

		if(position_compteur<0)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	da0b      	bge.n	80006c4 <affichageDig+0x2c4>
		{
			printchar('-', DIGIT1_Pin);
 80006ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b0:	202d      	movs	r0, #45	; 0x2d
 80006b2:	f7ff fde9 	bl	8000288 <printchar>
			if(position_compteur==-(limneg+1))
 80006b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b8:	43db      	mvns	r3, r3
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d101      	bne.n	80006c4 <affichageDig+0x2c4>
				position_compteur=0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
		}
		digit[0]=abs(position_compteur)%10;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80006ca:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80006ce:	4b8d      	ldr	r3, [pc, #564]	; (8000904 <affichageDig+0x504>)
 80006d0:	fb83 2301 	smull	r2, r3, r3, r1
 80006d4:	109a      	asrs	r2, r3, #2
 80006d6:	17cb      	asrs	r3, r1, #31
 80006d8:	1ad2      	subs	r2, r2, r3
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	1aca      	subs	r2, r1, r3
 80006e4:	617a      	str	r2, [r7, #20]
		digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80006ec:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	4a83      	ldr	r2, [pc, #524]	; (8000904 <affichageDig+0x504>)
 80006f6:	fb82 1203 	smull	r1, r2, r2, r3
 80006fa:	1092      	asrs	r2, r2, #2
 80006fc:	17db      	asrs	r3, r3, #31
 80006fe:	1ad1      	subs	r1, r2, r3
 8000700:	4b80      	ldr	r3, [pc, #512]	; (8000904 <affichageDig+0x504>)
 8000702:	fb83 2301 	smull	r2, r3, r3, r1
 8000706:	109a      	asrs	r2, r3, #2
 8000708:	17cb      	asrs	r3, r1, #31
 800070a:	1ad2      	subs	r2, r2, r3
 800070c:	4613      	mov	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	1aca      	subs	r2, r1, r3
 8000716:	61ba      	str	r2, [r7, #24]
		digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800071e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	f06f 0109 	mvn.w	r1, #9
 8000728:	fb01 f303 	mul.w	r3, r1, r3
 800072c:	441a      	add	r2, r3
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	4a75      	ldr	r2, [pc, #468]	; (8000908 <affichageDig+0x508>)
 8000734:	fb82 1203 	smull	r1, r2, r2, r3
 8000738:	1152      	asrs	r2, r2, #5
 800073a:	17db      	asrs	r3, r3, #31
 800073c:	1ad1      	subs	r1, r2, r3
 800073e:	4b71      	ldr	r3, [pc, #452]	; (8000904 <affichageDig+0x504>)
 8000740:	fb83 2301 	smull	r2, r3, r3, r1
 8000744:	109a      	asrs	r2, r3, #2
 8000746:	17cb      	asrs	r3, r1, #31
 8000748:	1ad2      	subs	r2, r2, r3
 800074a:	4613      	mov	r3, r2
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	4413      	add	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	1aca      	subs	r2, r1, r3
 8000754:	61fa      	str	r2, [r7, #28]
		digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800075c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000766:	fb01 f303 	mul.w	r3, r1, r3
 800076a:	441a      	add	r2, r3
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	1ad2      	subs	r2, r2, r3
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	f06f 0109 	mvn.w	r1, #9
 8000776:	fb01 f303 	mul.w	r3, r1, r3
 800077a:	4413      	add	r3, r2
 800077c:	4a63      	ldr	r2, [pc, #396]	; (800090c <affichageDig+0x50c>)
 800077e:	fb82 1203 	smull	r1, r2, r2, r3
 8000782:	1192      	asrs	r2, r2, #6
 8000784:	17db      	asrs	r3, r3, #31
 8000786:	1ad1      	subs	r1, r2, r3
 8000788:	4b5e      	ldr	r3, [pc, #376]	; (8000904 <affichageDig+0x504>)
 800078a:	fb83 2301 	smull	r2, r3, r3, r1
 800078e:	109a      	asrs	r2, r3, #2
 8000790:	17cb      	asrs	r3, r1, #31
 8000792:	1ad2      	subs	r2, r2, r3
 8000794:	4613      	mov	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	1aca      	subs	r2, r1, r3
 800079e:	623a      	str	r2, [r7, #32]
		printFigures(digit[2], DIGIT2_Pin<<pos, 1);
 80007a0:	69f8      	ldr	r0, [r7, #28]
 80007a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	2201      	movs	r2, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	f7ff fe05 	bl	80003c0 <printFigures>
		HAL_Delay(delai);
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fb7b 	bl	8001eb4 <HAL_Delay>
		break;
 80007be:	e098      	b.n	80008f2 <affichageDig+0x4f2>
	}
	case 3:
	{
		if(position_compteur==limpos+1)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d101      	bne.n	80007ce <affichageDig+0x3ce>
			position_compteur=0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]

		if(position_compteur<0)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	da0c      	bge.n	80007ee <affichageDig+0x3ee>
		{
			printchar('-', DIGIT1_Pin);
 80007d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d8:	202d      	movs	r0, #45	; 0x2d
 80007da:	f7ff fd55 	bl	8000288 <printchar>
			if(position_compteur==-(limneg+1))
 80007de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e0:	43db      	mvns	r3, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d17b      	bne.n	80008e0 <affichageDig+0x4e0>
				position_compteur=0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	e078      	b.n	80008e0 <affichageDig+0x4e0>
		}
		else
		{
			digit[0]=abs(position_compteur)%10;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80007f4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80007f8:	4b42      	ldr	r3, [pc, #264]	; (8000904 <affichageDig+0x504>)
 80007fa:	fb83 2301 	smull	r2, r3, r3, r1
 80007fe:	109a      	asrs	r2, r3, #2
 8000800:	17cb      	asrs	r3, r1, #31
 8000802:	1ad2      	subs	r2, r2, r3
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	1aca      	subs	r2, r1, r3
 800080e:	617a      	str	r2, [r7, #20]
			digit[1]=((abs(position_compteur)-digit[0])/10)%10;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000816:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	4a39      	ldr	r2, [pc, #228]	; (8000904 <affichageDig+0x504>)
 8000820:	fb82 1203 	smull	r1, r2, r2, r3
 8000824:	1092      	asrs	r2, r2, #2
 8000826:	17db      	asrs	r3, r3, #31
 8000828:	1ad1      	subs	r1, r2, r3
 800082a:	4b36      	ldr	r3, [pc, #216]	; (8000904 <affichageDig+0x504>)
 800082c:	fb83 2301 	smull	r2, r3, r3, r1
 8000830:	109a      	asrs	r2, r3, #2
 8000832:	17cb      	asrs	r3, r1, #31
 8000834:	1ad2      	subs	r2, r2, r3
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	1aca      	subs	r2, r1, r3
 8000840:	61ba      	str	r2, [r7, #24]
			digit[2]=((abs(position_compteur)-digit[1]*10-digit[0])/100)%10;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000848:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	f06f 0109 	mvn.w	r1, #9
 8000852:	fb01 f303 	mul.w	r3, r1, r3
 8000856:	441a      	add	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	4a2a      	ldr	r2, [pc, #168]	; (8000908 <affichageDig+0x508>)
 800085e:	fb82 1203 	smull	r1, r2, r2, r3
 8000862:	1152      	asrs	r2, r2, #5
 8000864:	17db      	asrs	r3, r3, #31
 8000866:	1ad1      	subs	r1, r2, r3
 8000868:	4b26      	ldr	r3, [pc, #152]	; (8000904 <affichageDig+0x504>)
 800086a:	fb83 2301 	smull	r2, r3, r3, r1
 800086e:	109a      	asrs	r2, r3, #2
 8000870:	17cb      	asrs	r3, r1, #31
 8000872:	1ad2      	subs	r2, r2, r3
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	1aca      	subs	r2, r1, r3
 800087e:	61fa      	str	r2, [r7, #28]
			digit[3]=((abs(position_compteur)-digit[2]*100-digit[0]-digit[1]*10)/1000)%10;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000886:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000890:	fb01 f303 	mul.w	r3, r1, r3
 8000894:	441a      	add	r2, r3
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	1ad2      	subs	r2, r2, r3
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	f06f 0109 	mvn.w	r1, #9
 80008a0:	fb01 f303 	mul.w	r3, r1, r3
 80008a4:	4413      	add	r3, r2
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <affichageDig+0x50c>)
 80008a8:	fb82 1203 	smull	r1, r2, r2, r3
 80008ac:	1192      	asrs	r2, r2, #6
 80008ae:	17db      	asrs	r3, r3, #31
 80008b0:	1ad1      	subs	r1, r2, r3
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <affichageDig+0x504>)
 80008b4:	fb83 2301 	smull	r2, r3, r3, r1
 80008b8:	109a      	asrs	r2, r3, #2
 80008ba:	17cb      	asrs	r3, r1, #31
 80008bc:	1ad2      	subs	r2, r2, r3
 80008be:	4613      	mov	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	1aca      	subs	r2, r1, r3
 80008c8:	623a      	str	r2, [r7, #32]
			printFigures(digit[3], DIGIT1_Pin<<pos, 1);
 80008ca:	6a38      	ldr	r0, [r7, #32]
 80008cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	2201      	movs	r2, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	f7ff fd70 	bl	80003c0 <printFigures>
		}
		i=-1;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <affichageDig+0x510>)
 80008e2:	f04f 32ff 	mov.w	r2, #4294967295
 80008e6:	601a      	str	r2, [r3, #0]
		HAL_Delay(delai);
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fae2 	bl	8001eb4 <HAL_Delay>
		break;
 80008f0:	bf00      	nop
	}
	}
	i++;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <affichageDig+0x510>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a05      	ldr	r2, [pc, #20]	; (8000910 <affichageDig+0x510>)
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	66666667 	.word	0x66666667
 8000908:	51eb851f 	.word	0x51eb851f
 800090c:	10624dd3 	.word	0x10624dd3
 8000910:	20000028 	.word	0x20000028

08000914 <affichageChar>:
void affichageChar(char * word,int delai, int position)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	static int i=0;
	int pos=position*6;
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	617b      	str	r3, [r7, #20]
	switch (i){
 800092c:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <affichageChar+0xf8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b03      	cmp	r3, #3
 8000932:	d861      	bhi.n	80009f8 <affichageChar+0xe4>
 8000934:	a201      	add	r2, pc, #4	; (adr r2, 800093c <affichageChar+0x28>)
 8000936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093a:	bf00      	nop
 800093c:	0800094d 	.word	0x0800094d
 8000940:	08000977 	.word	0x08000977
 8000944:	080009a1 	.word	0x080009a1
 8000948:	080009c9 	.word	0x080009c9

	case 0:
	{
		printchar(word[i],DIGIT1_Pin<<pos);
 800094c:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <affichageChar+0xf8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	b29b      	uxth	r3, r3
 8000966:	4619      	mov	r1, r3
 8000968:	f7ff fc8e 	bl	8000288 <printchar>
		HAL_Delay(delai);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4618      	mov	r0, r3
 8000970:	f001 faa0 	bl	8001eb4 <HAL_Delay>
	}
	break;
 8000974:	e040      	b.n	80009f8 <affichageChar+0xe4>
	case 1:
	{
		printchar(word[i],DIGIT2_Pin<<pos);
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <affichageChar+0xf8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	b29b      	uxth	r3, r3
 8000990:	4619      	mov	r1, r3
 8000992:	f7ff fc79 	bl	8000288 <printchar>
		HAL_Delay(delai);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fa8b 	bl	8001eb4 <HAL_Delay>
	}
	break;
 800099e:	e02b      	b.n	80009f8 <affichageChar+0xe4>
	case 2:
	{
		printchar(word[i],DIGIT3_Pin<<pos);
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <affichageChar+0xf8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	f7ff fc65 	bl	8000288 <printchar>
		HAL_Delay(delai);
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fa77 	bl	8001eb4 <HAL_Delay>
	}
	break;
 80009c6:	e017      	b.n	80009f8 <affichageChar+0xe4>
	case 3:
	{
		printchar(word[i],DIGIT4_Pin<<pos);
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <affichageChar+0xf8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4413      	add	r3, r2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	2240      	movs	r2, #64	; 0x40
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	b29b      	uxth	r3, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	f7ff fc51 	bl	8000288 <printchar>
		HAL_Delay(delai);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fa63 	bl	8001eb4 <HAL_Delay>
		i=-1;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <affichageChar+0xf8>)
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	601a      	str	r2, [r3, #0]
	}
	break;
 80009f6:	bf00      	nop
	}
	i++;
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <affichageChar+0xf8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <affichageChar+0xf8>)
 8000a00:	6013      	str	r3, [r2, #0]
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000002c 	.word	0x2000002c

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b095      	sub	sp, #84	; 0x54
 8000a14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f001 f9eb 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 fdff 	bl	800161c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f000 ffad 	bl	800197c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a22:	f000 fe53 	bl	80016cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a26:	f000 fe8f 	bl	8001748 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a2a:	f000 ff1b 	bl	8001864 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000a2e:	2104      	movs	r1, #4
 8000a30:	48b8      	ldr	r0, [pc, #736]	; (8000d14 <main+0x304>)
 8000a32:	f002 fc75 	bl	8003320 <HAL_TIM_PWM_Start>
 8000a36:	2108      	movs	r1, #8
 8000a38:	48b6      	ldr	r0, [pc, #728]	; (8000d14 <main+0x304>)
 8000a3a:	f002 fc71 	bl	8003320 <HAL_TIM_PWM_Start>
 8000a3e:	210c      	movs	r1, #12
 8000a40:	48b4      	ldr	r0, [pc, #720]	; (8000d14 <main+0x304>)
 8000a42:	f002 fc6d 	bl	8003320 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a46:	2100      	movs	r1, #0
 8000a48:	48b3      	ldr	r0, [pc, #716]	; (8000d18 <main+0x308>)
 8000a4a:	f002 fc69 	bl	8003320 <HAL_TIM_PWM_Start>
 8000a4e:	2104      	movs	r1, #4
 8000a50:	48b1      	ldr	r0, [pc, #708]	; (8000d18 <main+0x308>)
 8000a52:	f002 fc65 	bl	8003320 <HAL_TIM_PWM_Start>
 8000a56:	2108      	movs	r1, #8
 8000a58:	48af      	ldr	r0, [pc, #700]	; (8000d18 <main+0x308>)
 8000a5a:	f002 fc61 	bl	8003320 <HAL_TIM_PWM_Start>

	int delai=1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
	int SW1; int SW2;
	int lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	48ad      	ldr	r0, [pc, #692]	; (8000d1c <main+0x30c>)
 8000a68:	f001 fee4 	bl	8002834 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	647b      	str	r3, [r7, #68]	; 0x44
	int lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000a70:	2104      	movs	r1, #4
 8000a72:	48ab      	ldr	r0, [pc, #684]	; (8000d20 <main+0x310>)
 8000a74:	f001 fede 	bl	8002834 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	61bb      	str	r3, [r7, #24]
	int position_compteur=1000000;
 8000a7c:	4ba9      	ldr	r3, [pc, #676]	; (8000d24 <main+0x314>)
 8000a7e:	617b      	str	r3, [r7, #20]
	int duty_cycler=2;int duty_cycleg=2;int duty_cycleb=2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
 8000a84:	2302      	movs	r3, #2
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a88:	2302      	movs	r3, #2
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38

	int frequency=100;
 8000a8c:	2364      	movs	r3, #100	; 0x64
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34


	int pulser=1000;int pulseg=1000;int pulseb=1000;
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
	static int i=0;
	char word[9]="BICHONS.";
 8000aa2:	4aa1      	ldr	r2, [pc, #644]	; (8000d28 <main+0x318>)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aa8:	c303      	stmia	r3!, {r0, r1}
 8000aaa:	701a      	strb	r2, [r3, #0]
	static int etat=tachefond;
	int etatsw=0; //1=-- 2=++
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
	int etatsw2=0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
	static int couleur=blanc;

	initSEG();
 8000ab4:	f7ff fbb6 	bl	8000224 <initSEG>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4899      	ldr	r0, [pc, #612]	; (8000d20 <main+0x310>)
 8000abc:	f001 feba 	bl	8002834 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	613b      	str	r3, [r7, #16]
		SW2= HAL_GPIO_ReadPin(ROT_SW_2_GPIO_Port, ROT_SW_2_Pin);
 8000ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac8:	4894      	ldr	r0, [pc, #592]	; (8000d1c <main+0x30c>)
 8000aca:	f001 feb3 	bl	8002834 <HAL_GPIO_ReadPin>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	60fb      	str	r3, [r7, #12]
		//Compteur encodeur 2 à gauche




		switch(etat)
 8000ad2:	4b96      	ldr	r3, [pc, #600]	; (8000d2c <main+0x31c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	d8ee      	bhi.n	8000ab8 <main+0xa8>
 8000ada:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <main+0xd0>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000af5 	.word	0x08000af5
 8000ae4:	080011e9 	.word	0x080011e9
 8000ae8:	08000f11 	.word	0x08000f11
 8000aec:	0800108b 	.word	0x0800108b
 8000af0:	0800135f 	.word	0x0800135f
		{
		case tachefond:

			switch (i){
 8000af4:	4b8e      	ldr	r3, [pc, #568]	; (8000d30 <main+0x320>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b07      	cmp	r3, #7
 8000afa:	f200 809d 	bhi.w	8000c38 <main+0x228>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <main+0xf4>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b25 	.word	0x08000b25
 8000b08:	08000b47 	.word	0x08000b47
 8000b0c:	08000b69 	.word	0x08000b69
 8000b10:	08000b89 	.word	0x08000b89
 8000b14:	08000ba9 	.word	0x08000ba9
 8000b18:	08000bcb 	.word	0x08000bcb
 8000b1c:	08000bed 	.word	0x08000bed
 8000b20:	08000c0f 	.word	0x08000c0f

			case 0:
			{
				printchar(word[i],DIGIT1_Pin);
 8000b24:	4b82      	ldr	r3, [pc, #520]	; (8000d30 <main+0x320>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b2c:	4413      	add	r3, r2
 8000b2e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fba6 	bl	8000288 <printchar>
				HAL_Delay(delai);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f9b8 	bl	8001eb4 <HAL_Delay>
			}
			break;
 8000b44:	e078      	b.n	8000c38 <main+0x228>
			case 1:
			{
				printchar(word[i],DIGIT2_Pin);
 8000b46:	4b7a      	ldr	r3, [pc, #488]	; (8000d30 <main+0x320>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b4e:	4413      	add	r3, r2
 8000b50:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fb95 	bl	8000288 <printchar>
				HAL_Delay(delai);
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 f9a7 	bl	8001eb4 <HAL_Delay>
			}
			break;
 8000b66:	e067      	b.n	8000c38 <main+0x228>
			case 2:
			{
				printchar(word[i],DIGIT3_Pin);
 8000b68:	4b71      	ldr	r3, [pc, #452]	; (8000d30 <main+0x320>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b70:	4413      	add	r3, r2
 8000b72:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fb85 	bl	8000288 <printchar>
				HAL_Delay(delai);
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 f997 	bl	8001eb4 <HAL_Delay>
			}
			break;
 8000b86:	e057      	b.n	8000c38 <main+0x228>
			case 3:
			{
				printchar(word[i],DIGIT4_Pin);
 8000b88:	4b69      	ldr	r3, [pc, #420]	; (8000d30 <main+0x320>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000b90:	4413      	add	r3, r2
 8000b92:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000b96:	2140      	movs	r1, #64	; 0x40
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb75 	bl	8000288 <printchar>
				HAL_Delay(delai);
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 f987 	bl	8001eb4 <HAL_Delay>
			}
			break;
 8000ba6:	e047      	b.n	8000c38 <main+0x228>
			case 4:
			{
				printchar(word[i],DIGIT5_Pin);
 8000ba8:	4b61      	ldr	r3, [pc, #388]	; (8000d30 <main+0x320>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000bb0:	4413      	add	r3, r2
 8000bb2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fb64 	bl	8000288 <printchar>
				HAL_Delay(delai);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 f976 	bl	8001eb4 <HAL_Delay>
			}
			break;
 8000bc8:	e036      	b.n	8000c38 <main+0x228>
			case 5:
			{
				printchar(word[i],DIGIT6_Pin);
 8000bca:	4b59      	ldr	r3, [pc, #356]	; (8000d30 <main+0x320>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fb53 	bl	8000288 <printchar>
				HAL_Delay(delai);
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 f965 	bl	8001eb4 <HAL_Delay>
			}
			break;
 8000bea:	e025      	b.n	8000c38 <main+0x228>
			case 6:
			{
				printchar(word[i],DIGIT7_Pin);
 8000bec:	4b50      	ldr	r3, [pc, #320]	; (8000d30 <main+0x320>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000bf4:	4413      	add	r3, r2
 8000bf6:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fb42 	bl	8000288 <printchar>
				HAL_Delay(delai);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 f954 	bl	8001eb4 <HAL_Delay>
			}
			break;
 8000c0c:	e014      	b.n	8000c38 <main+0x228>
			case 7:
			{
				printchar(word[i],DIGIT8_Pin);
 8000c0e:	4b48      	ldr	r3, [pc, #288]	; (8000d30 <main+0x320>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000c16:	4413      	add	r3, r2
 8000c18:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8000c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fb31 	bl	8000288 <printchar>
				i=-1;
 8000c26:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <main+0x320>)
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	601a      	str	r2, [r3, #0]
				HAL_Delay(delai);
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 f93f 	bl	8001eb4 <HAL_Delay>
			}
			break;
 8000c36:	bf00      	nop
			}
			i++;
 8000c38:	4b3d      	ldr	r3, [pc, #244]	; (8000d30 <main+0x320>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	4a3c      	ldr	r2, [pc, #240]	; (8000d30 <main+0x320>)
 8000c40:	6013      	str	r3, [r2, #0]

			switch(couleur)
 8000c42:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <main+0x324>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	f200 8155 	bhi.w	8000ef6 <main+0x4e6>
 8000c4c:	a201      	add	r2, pc, #4	; (adr r2, 8000c54 <main+0x244>)
 8000c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c52:	bf00      	nop
 8000c54:	08000c71 	.word	0x08000c71
 8000c58:	08000d3d 	.word	0x08000d3d
 8000c5c:	08000de3 	.word	0x08000de3
 8000c60:	08000e85 	.word	0x08000e85
 8000c64:	08000cc3 	.word	0x08000cc3
 8000c68:	08000e35 	.word	0x08000e35
 8000c6c:	08000d91 	.word	0x08000d91
			{
				case blanc:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c72:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <main+0x328>)
 8000c74:	fb82 1203 	smull	r1, r2, r2, r3
 8000c78:	1092      	asrs	r2, r2, #2
 8000c7a:	17db      	asrs	r3, r3, #31
 8000c7c:	1ad2      	subs	r2, r2, r3
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <main+0x308>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c86:	4a2c      	ldr	r2, [pc, #176]	; (8000d38 <main+0x328>)
 8000c88:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8c:	1092      	asrs	r2, r2, #2
 8000c8e:	17db      	asrs	r3, r3, #31
 8000c90:	1ad2      	subs	r2, r2, r3
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <main+0x308>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9a:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <main+0x328>)
 8000c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca0:	1092      	asrs	r2, r2, #2
 8000ca2:	17db      	asrs	r3, r3, #31
 8000ca4:	1ad2      	subs	r2, r2, r3
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <main+0x308>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg--;
 8000cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(pulseg==0)
 8000cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 8111 	bne.w	8000edc <main+0x4cc>
						couleur=violet;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <main+0x324>)
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	601a      	str	r2, [r3, #0]
					break;
 8000cc0:	e10c      	b.n	8000edc <main+0x4cc>
				case violet:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <main+0x328>)
 8000cc6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cca:	1092      	asrs	r2, r2, #2
 8000ccc:	17db      	asrs	r3, r3, #31
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <main+0x308>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <main+0x328>)
 8000cda:	fb82 1203 	smull	r1, r2, r2, r3
 8000cde:	1092      	asrs	r2, r2, #2
 8000ce0:	17db      	asrs	r3, r3, #31
 8000ce2:	1ad2      	subs	r2, r2, r3
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <main+0x308>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <main+0x328>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1092      	asrs	r2, r2, #2
 8000cf4:	17db      	asrs	r3, r3, #31
 8000cf6:	1ad2      	subs	r2, r2, r3
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <main+0x308>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
					pulser--;
 8000cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d00:	3b01      	subs	r3, #1
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
					if(pulser==0)
 8000d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f040 80ea 	bne.w	8000ee0 <main+0x4d0>
						couleur=bleu;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <main+0x324>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
					break;
 8000d12:	e0e5      	b.n	8000ee0 <main+0x4d0>
 8000d14:	200000b4 	.word	0x200000b4
 8000d18:	2000003c 	.word	0x2000003c
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	000f4240 	.word	0x000f4240
 8000d28:	08003ec0 	.word	0x08003ec0
 8000d2c:	20000030 	.word	0x20000030
 8000d30:	20000034 	.word	0x20000034
 8000d34:	20000038 	.word	0x20000038
 8000d38:	66666667 	.word	0x66666667
				case bleu:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3e:	4aa6      	ldr	r2, [pc, #664]	; (8000fd8 <main+0x5c8>)
 8000d40:	fb82 1203 	smull	r1, r2, r2, r3
 8000d44:	1092      	asrs	r2, r2, #2
 8000d46:	17db      	asrs	r3, r3, #31
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	4ba4      	ldr	r3, [pc, #656]	; (8000fdc <main+0x5cc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d52:	4aa1      	ldr	r2, [pc, #644]	; (8000fd8 <main+0x5c8>)
 8000d54:	fb82 1203 	smull	r1, r2, r2, r3
 8000d58:	1092      	asrs	r2, r2, #2
 8000d5a:	17db      	asrs	r3, r3, #31
 8000d5c:	1ad2      	subs	r2, r2, r3
 8000d5e:	4b9f      	ldr	r3, [pc, #636]	; (8000fdc <main+0x5cc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d66:	4a9c      	ldr	r2, [pc, #624]	; (8000fd8 <main+0x5c8>)
 8000d68:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6c:	1092      	asrs	r2, r2, #2
 8000d6e:	17db      	asrs	r3, r3, #31
 8000d70:	1ad2      	subs	r2, r2, r3
 8000d72:	4b9a      	ldr	r3, [pc, #616]	; (8000fdc <main+0x5cc>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg++;
 8000d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(pulseg==1000)
 8000d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d84:	f040 80ae 	bne.w	8000ee4 <main+0x4d4>
						couleur=cyan;
 8000d88:	4b95      	ldr	r3, [pc, #596]	; (8000fe0 <main+0x5d0>)
 8000d8a:	2206      	movs	r2, #6
 8000d8c:	601a      	str	r2, [r3, #0]
					break;
 8000d8e:	e0a9      	b.n	8000ee4 <main+0x4d4>
				case cyan:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d92:	4a91      	ldr	r2, [pc, #580]	; (8000fd8 <main+0x5c8>)
 8000d94:	fb82 1203 	smull	r1, r2, r2, r3
 8000d98:	1092      	asrs	r2, r2, #2
 8000d9a:	17db      	asrs	r3, r3, #31
 8000d9c:	1ad2      	subs	r2, r2, r3
 8000d9e:	4b8f      	ldr	r3, [pc, #572]	; (8000fdc <main+0x5cc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da6:	4a8c      	ldr	r2, [pc, #560]	; (8000fd8 <main+0x5c8>)
 8000da8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dac:	1092      	asrs	r2, r2, #2
 8000dae:	17db      	asrs	r3, r3, #31
 8000db0:	1ad2      	subs	r2, r2, r3
 8000db2:	4b8a      	ldr	r3, [pc, #552]	; (8000fdc <main+0x5cc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dba:	4a87      	ldr	r2, [pc, #540]	; (8000fd8 <main+0x5c8>)
 8000dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc0:	1092      	asrs	r2, r2, #2
 8000dc2:	17db      	asrs	r3, r3, #31
 8000dc4:	1ad2      	subs	r2, r2, r3
 8000dc6:	4b85      	ldr	r3, [pc, #532]	; (8000fdc <main+0x5cc>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
					pulseb--;
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
					if(pulseb==0)
 8000dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f040 8087 	bne.w	8000ee8 <main+0x4d8>
						couleur=vert;
 8000dda:	4b81      	ldr	r3, [pc, #516]	; (8000fe0 <main+0x5d0>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	601a      	str	r2, [r3, #0]
					break;
 8000de0:	e082      	b.n	8000ee8 <main+0x4d8>
				case vert:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de4:	4a7c      	ldr	r2, [pc, #496]	; (8000fd8 <main+0x5c8>)
 8000de6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dea:	1092      	asrs	r2, r2, #2
 8000dec:	17db      	asrs	r3, r3, #31
 8000dee:	1ad2      	subs	r2, r2, r3
 8000df0:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <main+0x5cc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df8:	4a77      	ldr	r2, [pc, #476]	; (8000fd8 <main+0x5c8>)
 8000dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfe:	1092      	asrs	r2, r2, #2
 8000e00:	17db      	asrs	r3, r3, #31
 8000e02:	1ad2      	subs	r2, r2, r3
 8000e04:	4b75      	ldr	r3, [pc, #468]	; (8000fdc <main+0x5cc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0c:	4a72      	ldr	r2, [pc, #456]	; (8000fd8 <main+0x5c8>)
 8000e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e12:	1092      	asrs	r2, r2, #2
 8000e14:	17db      	asrs	r3, r3, #31
 8000e16:	1ad2      	subs	r2, r2, r3
 8000e18:	4b70      	ldr	r3, [pc, #448]	; (8000fdc <main+0x5cc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
					pulser++;
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	3301      	adds	r3, #1
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
					if(pulser==1000)
 8000e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e2a:	d15f      	bne.n	8000eec <main+0x4dc>
						couleur=jaune;
 8000e2c:	4b6c      	ldr	r3, [pc, #432]	; (8000fe0 <main+0x5d0>)
 8000e2e:	2205      	movs	r2, #5
 8000e30:	601a      	str	r2, [r3, #0]
					break;
 8000e32:	e05b      	b.n	8000eec <main+0x4dc>
				case jaune:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e36:	4a68      	ldr	r2, [pc, #416]	; (8000fd8 <main+0x5c8>)
 8000e38:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3c:	1092      	asrs	r2, r2, #2
 8000e3e:	17db      	asrs	r3, r3, #31
 8000e40:	1ad2      	subs	r2, r2, r3
 8000e42:	4b66      	ldr	r3, [pc, #408]	; (8000fdc <main+0x5cc>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4a:	4a63      	ldr	r2, [pc, #396]	; (8000fd8 <main+0x5c8>)
 8000e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e50:	1092      	asrs	r2, r2, #2
 8000e52:	17db      	asrs	r3, r3, #31
 8000e54:	1ad2      	subs	r2, r2, r3
 8000e56:	4b61      	ldr	r3, [pc, #388]	; (8000fdc <main+0x5cc>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	4a5e      	ldr	r2, [pc, #376]	; (8000fd8 <main+0x5c8>)
 8000e60:	fb82 1203 	smull	r1, r2, r2, r3
 8000e64:	1092      	asrs	r2, r2, #2
 8000e66:	17db      	asrs	r3, r3, #31
 8000e68:	1ad2      	subs	r2, r2, r3
 8000e6a:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <main+0x5cc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg--;
 8000e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e72:	3b01      	subs	r3, #1
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(pulseg==0)
 8000e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d139      	bne.n	8000ef0 <main+0x4e0>
						couleur=rouge;
 8000e7c:	4b58      	ldr	r3, [pc, #352]	; (8000fe0 <main+0x5d0>)
 8000e7e:	2203      	movs	r2, #3
 8000e80:	601a      	str	r2, [r3, #0]
					break;
 8000e82:	e035      	b.n	8000ef0 <main+0x4e0>
				case rouge:
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulser/10);
 8000e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e86:	4a54      	ldr	r2, [pc, #336]	; (8000fd8 <main+0x5c8>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	1092      	asrs	r2, r2, #2
 8000e8e:	17db      	asrs	r3, r3, #31
 8000e90:	1ad2      	subs	r2, r2, r3
 8000e92:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <main+0x5cc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulseg/10);
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	4a4f      	ldr	r2, [pc, #316]	; (8000fd8 <main+0x5c8>)
 8000e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea0:	1092      	asrs	r2, r2, #2
 8000ea2:	17db      	asrs	r3, r3, #31
 8000ea4:	1ad2      	subs	r2, r2, r3
 8000ea6:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <main+0x5cc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulseb/10);
 8000eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eae:	4a4a      	ldr	r2, [pc, #296]	; (8000fd8 <main+0x5c8>)
 8000eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000eb4:	1092      	asrs	r2, r2, #2
 8000eb6:	17db      	asrs	r3, r3, #31
 8000eb8:	1ad2      	subs	r2, r2, r3
 8000eba:	4b48      	ldr	r3, [pc, #288]	; (8000fdc <main+0x5cc>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34
					pulseg++;
 8000ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
					pulseb++;
 8000ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec8:	3301      	adds	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
					if(pulseg==1000)
 8000ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ed2:	d10f      	bne.n	8000ef4 <main+0x4e4>
						couleur=blanc;
 8000ed4:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <main+0x5d0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
					break;
 8000eda:	e00b      	b.n	8000ef4 <main+0x4e4>
					break;
 8000edc:	bf00      	nop
 8000ede:	e00a      	b.n	8000ef6 <main+0x4e6>
					break;
 8000ee0:	bf00      	nop
 8000ee2:	e008      	b.n	8000ef6 <main+0x4e6>
					break;
 8000ee4:	bf00      	nop
 8000ee6:	e006      	b.n	8000ef6 <main+0x4e6>
					break;
 8000ee8:	bf00      	nop
 8000eea:	e004      	b.n	8000ef6 <main+0x4e6>
					break;
 8000eec:	bf00      	nop
 8000eee:	e002      	b.n	8000ef6 <main+0x4e6>
					break;
 8000ef0:	bf00      	nop
 8000ef2:	e000      	b.n	8000ef6 <main+0x4e6>
					break;
 8000ef4:	bf00      	nop
			}

			if(SW2==0)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f040 837d 	bne.w	80015f8 <main+0xbe8>

			{
				initSEG();
 8000efe:	f7ff f991 	bl	8000224 <initSEG>
				HAL_Delay(200);
 8000f02:	20c8      	movs	r0, #200	; 0xc8
 8000f04:	f000 ffd6 	bl	8001eb4 <HAL_Delay>
				etat=green;
 8000f08:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <main+0x5d4>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000f0e:	e373      	b.n	80015f8 <main+0xbe8>
			case green:
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000f10:	2104      	movs	r1, #4
 8000f12:	4835      	ldr	r0, [pc, #212]	; (8000fe8 <main+0x5d8>)
 8000f14:	f001 fc8e 	bl	8002834 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	61bb      	str	r3, [r7, #24]

				affichageChar("GREE", delai,GAUCHE);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	69f9      	ldr	r1, [r7, #28]
 8000f20:	4832      	ldr	r0, [pc, #200]	; (8000fec <main+0x5dc>)
 8000f22:	f7ff fcf7 	bl	8000914 <affichageChar>
				affichageDig(duty_cycleg, delai,DROITE,100,0);
 8000f26:	2300      	movs	r3, #0
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2364      	movs	r3, #100	; 0x64
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69f9      	ldr	r1, [r7, #28]
 8000f30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f32:	f7ff fa65 	bl	8000400 <affichageDig>
				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 8000f36:	2104      	movs	r1, #4
 8000f38:	482b      	ldr	r0, [pc, #172]	; (8000fe8 <main+0x5d8>)
 8000f3a:	f001 fc7b 	bl	8002834 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4293      	cmp	r3, r2
 8000f46:	f000 8085 	beq.w	8001054 <main+0x644>
				{
					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <main+0x5d8>)
 8000f4e:	f001 fc71 	bl	8002834 <HAL_GPIO_ReadPin>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461c      	mov	r4, r3
 8000f56:	2102      	movs	r1, #2
 8000f58:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <main+0x5d8>)
 8000f5a:	f001 fc6b 	bl	8002834 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	429c      	cmp	r4, r3
 8000f62:	d035      	beq.n	8000fd0 <main+0x5c0>
					{
						etatsw=2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==2)
 8000f68:	e02e      	b.n	8000fc8 <main+0x5b8>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	481e      	ldr	r0, [pc, #120]	; (8000fe8 <main+0x5d8>)
 8000f6e:	f001 fc61 	bl	8002834 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 ff9c 	bl	8001eb4 <HAL_Delay>
							duty_cycleg--;
 8000f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	63fb      	str	r3, [r7, #60]	; 0x3c
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg*10);
 8000f82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <main+0x5cc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	639a      	str	r2, [r3, #56]	; 0x38

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 8000f94:	2104      	movs	r1, #4
 8000f96:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <main+0x5d8>)
 8000f98:	f001 fc4c 	bl	8002834 <HAL_GPIO_ReadPin>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <main+0x59a>
								etatsw=0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8000faa:	2104      	movs	r1, #4
 8000fac:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <main+0x5d8>)
 8000fae:	f001 fc41 	bl	8002834 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461c      	mov	r4, r3
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <main+0x5d8>)
 8000fba:	f001 fc3b 	bl	8002834 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	d101      	bne.n	8000fc8 <main+0x5b8>
								etatsw=1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==2)
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d0cd      	beq.n	8000f6a <main+0x55a>
 8000fce:	e041      	b.n	8001054 <main+0x644>
						}
					}
					else
					{
						etatsw=1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==1)
 8000fd4:	e03b      	b.n	800104e <main+0x63e>
 8000fd6:	bf00      	nop
 8000fd8:	66666667 	.word	0x66666667
 8000fdc:	2000003c 	.word	0x2000003c
 8000fe0:	20000038 	.word	0x20000038
 8000fe4:	20000030 	.word	0x20000030
 8000fe8:	40010c00 	.word	0x40010c00
 8000fec:	08003ea0 	.word	0x08003ea0
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	48af      	ldr	r0, [pc, #700]	; (80012b0 <main+0x8a0>)
 8000ff4:	f001 fc1e 	bl	8002834 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 ff59 	bl	8001eb4 <HAL_Delay>
							duty_cycleg++;
 8001002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001004:	3301      	adds	r3, #1
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg*10);
 8001008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	461a      	mov	r2, r3
 8001014:	4ba7      	ldr	r3, [pc, #668]	; (80012b4 <main+0x8a4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	639a      	str	r2, [r3, #56]	; 0x38

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 800101a:	2104      	movs	r1, #4
 800101c:	48a4      	ldr	r0, [pc, #656]	; (80012b0 <main+0x8a0>)
 800101e:	f001 fc09 	bl	8002834 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	4293      	cmp	r3, r2
 800102a:	d101      	bne.n	8001030 <main+0x620>
								etatsw=0;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001030:	2104      	movs	r1, #4
 8001032:	489f      	ldr	r0, [pc, #636]	; (80012b0 <main+0x8a0>)
 8001034:	f001 fbfe 	bl	8002834 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	461c      	mov	r4, r3
 800103c:	2102      	movs	r1, #2
 800103e:	489c      	ldr	r0, [pc, #624]	; (80012b0 <main+0x8a0>)
 8001040:	f001 fbf8 	bl	8002834 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	429c      	cmp	r4, r3
 8001048:	d001      	beq.n	800104e <main+0x63e>
								etatsw=2;
 800104a:	2302      	movs	r3, #2
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==1)
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	2b01      	cmp	r3, #1
 8001052:	d0cd      	beq.n	8000ff0 <main+0x5e0>
						}
					}
				}
				if(SW1==0)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <main+0x660>
				{
					duty_cycleg=0;
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycleg*10);
 800105e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	461a      	mov	r2, r3
 800106a:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <main+0x8a4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	639a      	str	r2, [r3, #56]	; 0x38
				}
				if(SW2==0)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	f040 82c3 	bne.w	80015fe <main+0xbee>
				{
					initSEG();
 8001078:	f7ff f8d4 	bl	8000224 <initSEG>
					HAL_Delay(200);
 800107c:	20c8      	movs	r0, #200	; 0xc8
 800107e:	f000 ff19 	bl	8001eb4 <HAL_Delay>
					etat=red;
 8001082:	4b8d      	ldr	r3, [pc, #564]	; (80012b8 <main+0x8a8>)
 8001084:	2203      	movs	r2, #3
 8001086:	601a      	str	r2, [r3, #0]
				}
				break;
 8001088:	e2b9      	b.n	80015fe <main+0xbee>


			case red:
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 800108a:	2104      	movs	r1, #4
 800108c:	4888      	ldr	r0, [pc, #544]	; (80012b0 <main+0x8a0>)
 800108e:	f001 fbd1 	bl	8002834 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	61bb      	str	r3, [r7, #24]
				affichageChar(" RED", delai,GAUCHE);
 8001096:	2200      	movs	r2, #0
 8001098:	69f9      	ldr	r1, [r7, #28]
 800109a:	4888      	ldr	r0, [pc, #544]	; (80012bc <main+0x8ac>)
 800109c:	f7ff fc3a 	bl	8000914 <affichageChar>
				affichageDig(duty_cycler, delai,DROITE,100,0);
 80010a0:	2300      	movs	r3, #0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2364      	movs	r3, #100	; 0x64
 80010a6:	2201      	movs	r2, #1
 80010a8:	69f9      	ldr	r1, [r7, #28]
 80010aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80010ac:	f7ff f9a8 	bl	8000400 <affichageDig>
				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 80010b0:	2104      	movs	r1, #4
 80010b2:	487f      	ldr	r0, [pc, #508]	; (80012b0 <main+0x8a0>)
 80010b4:	f001 fbbe 	bl	8002834 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	4293      	cmp	r3, r2
 80010c0:	d077      	beq.n	80011b2 <main+0x7a2>
				{
					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 80010c2:	2104      	movs	r1, #4
 80010c4:	487a      	ldr	r0, [pc, #488]	; (80012b0 <main+0x8a0>)
 80010c6:	f001 fbb5 	bl	8002834 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461c      	mov	r4, r3
 80010ce:	2102      	movs	r1, #2
 80010d0:	4877      	ldr	r0, [pc, #476]	; (80012b0 <main+0x8a0>)
 80010d2:	f001 fbaf 	bl	8002834 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	429c      	cmp	r4, r3
 80010da:	d035      	beq.n	8001148 <main+0x738>
					{
						etatsw=2;
 80010dc:	2302      	movs	r3, #2
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==2)
 80010e0:	e02e      	b.n	8001140 <main+0x730>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 80010e2:	2104      	movs	r1, #4
 80010e4:	4872      	ldr	r0, [pc, #456]	; (80012b0 <main+0x8a0>)
 80010e6:	f001 fba5 	bl	8002834 <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f000 fee0 	bl	8001eb4 <HAL_Delay>
							duty_cycler--;
 80010f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010f6:	3b01      	subs	r3, #1
 80010f8:	643b      	str	r3, [r7, #64]	; 0x40
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycler*10);
 80010fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	461a      	mov	r2, r3
 8001106:	4b6b      	ldr	r3, [pc, #428]	; (80012b4 <main+0x8a4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 800110c:	2104      	movs	r1, #4
 800110e:	4868      	ldr	r0, [pc, #416]	; (80012b0 <main+0x8a0>)
 8001110:	f001 fb90 	bl	8002834 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <main+0x712>
								etatsw=0;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001122:	2104      	movs	r1, #4
 8001124:	4862      	ldr	r0, [pc, #392]	; (80012b0 <main+0x8a0>)
 8001126:	f001 fb85 	bl	8002834 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	461c      	mov	r4, r3
 800112e:	2102      	movs	r1, #2
 8001130:	485f      	ldr	r0, [pc, #380]	; (80012b0 <main+0x8a0>)
 8001132:	f001 fb7f 	bl	8002834 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	429c      	cmp	r4, r3
 800113a:	d101      	bne.n	8001140 <main+0x730>
								etatsw=1;
 800113c:	2301      	movs	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==2)
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	2b02      	cmp	r3, #2
 8001144:	d0cd      	beq.n	80010e2 <main+0x6d2>
 8001146:	e034      	b.n	80011b2 <main+0x7a2>
						}
					}
					else
					{
						etatsw=1;
 8001148:	2301      	movs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==1)
 800114c:	e02e      	b.n	80011ac <main+0x79c>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 800114e:	2104      	movs	r1, #4
 8001150:	4857      	ldr	r0, [pc, #348]	; (80012b0 <main+0x8a0>)
 8001152:	f001 fb6f 	bl	8002834 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 feaa 	bl	8001eb4 <HAL_Delay>
							duty_cycler++;
 8001160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001162:	3301      	adds	r3, #1
 8001164:	643b      	str	r3, [r7, #64]	; 0x40
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycler*10);
 8001166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	461a      	mov	r2, r3
 8001172:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <main+0x8a4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 8001178:	2104      	movs	r1, #4
 800117a:	484d      	ldr	r0, [pc, #308]	; (80012b0 <main+0x8a0>)
 800117c:	f001 fb5a 	bl	8002834 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <main+0x77e>
								etatsw=0;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 800118e:	2104      	movs	r1, #4
 8001190:	4847      	ldr	r0, [pc, #284]	; (80012b0 <main+0x8a0>)
 8001192:	f001 fb4f 	bl	8002834 <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	461c      	mov	r4, r3
 800119a:	2102      	movs	r1, #2
 800119c:	4844      	ldr	r0, [pc, #272]	; (80012b0 <main+0x8a0>)
 800119e:	f001 fb49 	bl	8002834 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	429c      	cmp	r4, r3
 80011a6:	d001      	beq.n	80011ac <main+0x79c>
								etatsw=2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==1)
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d0cd      	beq.n	800114e <main+0x73e>
						}
					}
				}
				if(SW1==0)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10a      	bne.n	80011ce <main+0x7be>
				{
					duty_cycler=0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycler*10);
 80011bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <main+0x8a4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c
				}
				if(SW2==0)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f040 8217 	bne.w	8001604 <main+0xbf4>
				{
					initSEG();
 80011d6:	f7ff f825 	bl	8000224 <initSEG>
					HAL_Delay(200);
 80011da:	20c8      	movs	r0, #200	; 0xc8
 80011dc:	f000 fe6a 	bl	8001eb4 <HAL_Delay>
					etat=blue;
 80011e0:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <main+0x8a8>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
				}
				break;
 80011e6:	e20d      	b.n	8001604 <main+0xbf4>


			case blue:
				lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 80011e8:	2104      	movs	r1, #4
 80011ea:	4831      	ldr	r0, [pc, #196]	; (80012b0 <main+0x8a0>)
 80011ec:	f001 fb22 	bl	8002834 <HAL_GPIO_ReadPin>
 80011f0:	4603      	mov	r3, r0
 80011f2:	61bb      	str	r3, [r7, #24]
				affichageChar("BLUE", delai,GAUCHE);
 80011f4:	2200      	movs	r2, #0
 80011f6:	69f9      	ldr	r1, [r7, #28]
 80011f8:	4831      	ldr	r0, [pc, #196]	; (80012c0 <main+0x8b0>)
 80011fa:	f7ff fb8b 	bl	8000914 <affichageChar>
				affichageDig(duty_cycleb, delai,DROITE,100,0);
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	2201      	movs	r2, #1
 8001206:	69f9      	ldr	r1, [r7, #28]
 8001208:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800120a:	f7ff f8f9 	bl	8000400 <affichageDig>

				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState1)
 800120e:	2104      	movs	r1, #4
 8001210:	4827      	ldr	r0, [pc, #156]	; (80012b0 <main+0x8a0>)
 8001212:	f001 fb0f 	bl	8002834 <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4293      	cmp	r3, r2
 800121e:	f000 8083 	beq.w	8001328 <main+0x918>
				{
					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001222:	2104      	movs	r1, #4
 8001224:	4822      	ldr	r0, [pc, #136]	; (80012b0 <main+0x8a0>)
 8001226:	f001 fb05 	bl	8002834 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	461c      	mov	r4, r3
 800122e:	2102      	movs	r1, #2
 8001230:	481f      	ldr	r0, [pc, #124]	; (80012b0 <main+0x8a0>)
 8001232:	f001 faff 	bl	8002834 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	429c      	cmp	r4, r3
 800123a:	d035      	beq.n	80012a8 <main+0x898>
					{
						etatsw=2;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==2)
 8001240:	e02e      	b.n	80012a0 <main+0x890>
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 8001242:	2104      	movs	r1, #4
 8001244:	481a      	ldr	r0, [pc, #104]	; (80012b0 <main+0x8a0>)
 8001246:	f001 faf5 	bl	8002834 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f000 fe30 	bl	8001eb4 <HAL_Delay>
							duty_cycleb--;
 8001254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001256:	3b01      	subs	r3, #1
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycleb*10);
 800125a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	461a      	mov	r2, r3
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <main+0x8a4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	635a      	str	r2, [r3, #52]	; 0x34

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 800126c:	2104      	movs	r1, #4
 800126e:	4810      	ldr	r0, [pc, #64]	; (80012b0 <main+0x8a0>)
 8001270:	f001 fae0 	bl	8002834 <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <main+0x872>
								etatsw=0;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001282:	2104      	movs	r1, #4
 8001284:	480a      	ldr	r0, [pc, #40]	; (80012b0 <main+0x8a0>)
 8001286:	f001 fad5 	bl	8002834 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	461c      	mov	r4, r3
 800128e:	2102      	movs	r1, #2
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <main+0x8a0>)
 8001292:	f001 facf 	bl	8002834 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	429c      	cmp	r4, r3
 800129a:	d101      	bne.n	80012a0 <main+0x890>
								etatsw=1;
 800129c:	2301      	movs	r3, #1
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==2)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d0cd      	beq.n	8001242 <main+0x832>
 80012a6:	e03f      	b.n	8001328 <main+0x918>
						}
					}
					else
					{
						etatsw=1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==1)
 80012ac:	e039      	b.n	8001322 <main+0x912>
 80012ae:	bf00      	nop
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	2000003c 	.word	0x2000003c
 80012b8:	20000030 	.word	0x20000030
 80012bc:	08003ea8 	.word	0x08003ea8
 80012c0:	08003eb0 	.word	0x08003eb0
						{
							lastState1=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 80012c4:	2104      	movs	r1, #4
 80012c6:	48a4      	ldr	r0, [pc, #656]	; (8001558 <main+0xb48>)
 80012c8:	f001 fab4 	bl	8002834 <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	61bb      	str	r3, [r7, #24]
							HAL_Delay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f000 fdef 	bl	8001eb4 <HAL_Delay>
							duty_cycleb++;
 80012d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d8:	3301      	adds	r3, #1
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
							__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycleb*10);
 80012dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b9c      	ldr	r3, [pc, #624]	; (800155c <main+0xb4c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState1)
 80012ee:	2104      	movs	r1, #4
 80012f0:	4899      	ldr	r0, [pc, #612]	; (8001558 <main+0xb48>)
 80012f2:	f001 fa9f 	bl	8002834 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <main+0x8f4>
								etatsw=0;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001304:	2104      	movs	r1, #4
 8001306:	4894      	ldr	r0, [pc, #592]	; (8001558 <main+0xb48>)
 8001308:	f001 fa94 	bl	8002834 <HAL_GPIO_ReadPin>
 800130c:	4603      	mov	r3, r0
 800130e:	461c      	mov	r4, r3
 8001310:	2102      	movs	r1, #2
 8001312:	4891      	ldr	r0, [pc, #580]	; (8001558 <main+0xb48>)
 8001314:	f001 fa8e 	bl	8002834 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	429c      	cmp	r4, r3
 800131c:	d001      	beq.n	8001322 <main+0x912>
								etatsw=2;
 800131e:	2302      	movs	r3, #2
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==1)
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	2b01      	cmp	r3, #1
 8001326:	d0cd      	beq.n	80012c4 <main+0x8b4>
						}
					}
				}
				if(SW1==0)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10a      	bne.n	8001344 <main+0x934>
				{
					duty_cycleb=0;
 800132e:	2300      	movs	r3, #0
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycleb*10);
 8001332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	461a      	mov	r2, r3
 800133e:	4b87      	ldr	r3, [pc, #540]	; (800155c <main+0xb4c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	635a      	str	r2, [r3, #52]	; 0x34
				}
				if(SW2==0)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 815f 	bne.w	800160a <main+0xbfa>
				{
					initSEG();
 800134c:	f7fe ff6a 	bl	8000224 <initSEG>
					HAL_Delay(200);
 8001350:	20c8      	movs	r0, #200	; 0xc8
 8001352:	f000 fdaf 	bl	8001eb4 <HAL_Delay>
					etat=freq;
 8001356:	4b82      	ldr	r3, [pc, #520]	; (8001560 <main+0xb50>)
 8001358:	2204      	movs	r2, #4
 800135a:	601a      	str	r2, [r3, #0]
				}
				break;
 800135c:	e155      	b.n	800160a <main+0xbfa>
			case freq:
				lastState=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 800135e:	2104      	movs	r1, #4
 8001360:	487d      	ldr	r0, [pc, #500]	; (8001558 <main+0xb48>)
 8001362:	f001 fa67 	bl	8002834 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	647b      	str	r3, [r7, #68]	; 0x44
				affichageChar("FREq", delai,GAUCHE);
 800136a:	2200      	movs	r2, #0
 800136c:	69f9      	ldr	r1, [r7, #28]
 800136e:	487d      	ldr	r0, [pc, #500]	; (8001564 <main+0xb54>)
 8001370:	f7ff fad0 	bl	8000914 <affichageChar>
				affichageDig(position_compteur, delai,DROITE,100,0);
 8001374:	2300      	movs	r3, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2364      	movs	r3, #100	; 0x64
 800137a:	2201      	movs	r2, #1
 800137c:	69f9      	ldr	r1, [r7, #28]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff f83e 	bl	8000400 <affichageDig>
							couleur=blanc;
						break;
				}*/

				//Rotary Switch Duty Cycle
				if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=lastState)
 8001384:	2104      	movs	r1, #4
 8001386:	4874      	ldr	r0, [pc, #464]	; (8001558 <main+0xb48>)
 8001388:	f001 fa54 	bl	8002834 <HAL_GPIO_ReadPin>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001392:	4293      	cmp	r3, r2
 8001394:	d073      	beq.n	800147e <main+0xa6e>
				{
					if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 8001396:	2104      	movs	r1, #4
 8001398:	486f      	ldr	r0, [pc, #444]	; (8001558 <main+0xb48>)
 800139a:	f001 fa4b 	bl	8002834 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	461c      	mov	r4, r3
 80013a2:	2102      	movs	r1, #2
 80013a4:	486c      	ldr	r0, [pc, #432]	; (8001558 <main+0xb48>)
 80013a6:	f001 fa45 	bl	8002834 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	429c      	cmp	r4, r3
 80013ae:	d033      	beq.n	8001418 <main+0xa08>
					{
						etatsw=2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==2)
 80013b4:	e02c      	b.n	8001410 <main+0xa00>
						{
							lastState=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 80013b6:	2104      	movs	r1, #4
 80013b8:	4867      	ldr	r0, [pc, #412]	; (8001558 <main+0xb48>)
 80013ba:	f001 fa3b 	bl	8002834 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	647b      	str	r3, [r7, #68]	; 0x44
							HAL_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 fd76 	bl	8001eb4 <HAL_Delay>
							duty_cycleb--;
 80013c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ca:	3b01      	subs	r3, #1
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycleb*frequency);
 80013ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013d2:	fb02 f203 	mul.w	r2, r2, r3
 80013d6:	4b64      	ldr	r3, [pc, #400]	; (8001568 <main+0xb58>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState)
 80013dc:	2104      	movs	r1, #4
 80013de:	485e      	ldr	r0, [pc, #376]	; (8001558 <main+0xb48>)
 80013e0:	f001 fa28 	bl	8002834 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <main+0x9e2>
								etatsw=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 80013f2:	2104      	movs	r1, #4
 80013f4:	4858      	ldr	r0, [pc, #352]	; (8001558 <main+0xb48>)
 80013f6:	f001 fa1d 	bl	8002834 <HAL_GPIO_ReadPin>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461c      	mov	r4, r3
 80013fe:	2102      	movs	r1, #2
 8001400:	4855      	ldr	r0, [pc, #340]	; (8001558 <main+0xb48>)
 8001402:	f001 fa17 	bl	8002834 <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	429c      	cmp	r4, r3
 800140a:	d101      	bne.n	8001410 <main+0xa00>
								etatsw=1;
 800140c:	2301      	movs	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==2)
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	2b02      	cmp	r3, #2
 8001414:	d0cf      	beq.n	80013b6 <main+0x9a6>
 8001416:	e032      	b.n	800147e <main+0xa6e>
						}
					}
					else
					{
						etatsw=1;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==1)
 800141c:	e02c      	b.n	8001478 <main+0xa68>
						{
							lastState=HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin);
 800141e:	2104      	movs	r1, #4
 8001420:	484d      	ldr	r0, [pc, #308]	; (8001558 <main+0xb48>)
 8001422:	f001 fa07 	bl	8002834 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	647b      	str	r3, [r7, #68]	; 0x44
							HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f000 fd42 	bl	8001eb4 <HAL_Delay>
							duty_cycleb++;
 8001430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001432:	3301      	adds	r3, #1
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycleb*frequency);
 8001436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800143a:	fb02 f203 	mul.w	r2, r2, r3
 800143e:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <main+0xb58>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	639a      	str	r2, [r3, #56]	; 0x38

							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)==lastState)
 8001444:	2104      	movs	r1, #4
 8001446:	4844      	ldr	r0, [pc, #272]	; (8001558 <main+0xb48>)
 8001448:	f001 f9f4 	bl	8002834 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <main+0xa4a>
								etatsw=0;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
							if(HAL_GPIO_ReadPin(ROT_A_1_GPIO_Port, ROT_A_1_Pin)!=HAL_GPIO_ReadPin(ROT_B_1_GPIO_Port, ROT_B_1_Pin))
 800145a:	2104      	movs	r1, #4
 800145c:	483e      	ldr	r0, [pc, #248]	; (8001558 <main+0xb48>)
 800145e:	f001 f9e9 	bl	8002834 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	461c      	mov	r4, r3
 8001466:	2102      	movs	r1, #2
 8001468:	483b      	ldr	r0, [pc, #236]	; (8001558 <main+0xb48>)
 800146a:	f001 f9e3 	bl	8002834 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	429c      	cmp	r4, r3
 8001472:	d001      	beq.n	8001478 <main+0xa68>
								etatsw=2;
 8001474:	2302      	movs	r3, #2
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
						while(etatsw==1)
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	2b01      	cmp	r3, #1
 800147c:	d0cf      	beq.n	800141e <main+0xa0e>
						}
					}
				}
				//Rotary Switch for frequency
				if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=lastState)
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	483a      	ldr	r0, [pc, #232]	; (800156c <main+0xb5c>)
 8001484:	f001 f9d6 	bl	8002834 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148e:	4293      	cmp	r3, r2
 8001490:	f000 8098 	beq.w	80015c4 <main+0xbb4>
								{
									if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001498:	4834      	ldr	r0, [pc, #208]	; (800156c <main+0xb5c>)
 800149a:	f001 f9cb 	bl	8002834 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	461c      	mov	r4, r3
 80014a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a6:	4831      	ldr	r0, [pc, #196]	; (800156c <main+0xb5c>)
 80014a8:	f001 f9c4 	bl	8002834 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	429c      	cmp	r4, r3
 80014b0:	d03c      	beq.n	800152c <main+0xb1c>
									{
										etatsw2=2;
 80014b2:	2302      	movs	r3, #2
 80014b4:	623b      	str	r3, [r7, #32]
										while(etatsw2==2)
 80014b6:	e035      	b.n	8001524 <main+0xb14>
										{
											lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_1_Pin);
 80014b8:	2104      	movs	r1, #4
 80014ba:	482c      	ldr	r0, [pc, #176]	; (800156c <main+0xb5c>)
 80014bc:	f001 f9ba 	bl	8002834 <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
											HAL_Delay(1);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f000 fcf5 	bl	8001eb4 <HAL_Delay>
											if (frequency==100)
 80014ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014cc:	2b64      	cmp	r3, #100	; 0x64
 80014ce:	d102      	bne.n	80014d6 <main+0xac6>
												frequency=100;
 80014d0:	2364      	movs	r3, #100	; 0x64
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
 80014d4:	e002      	b.n	80014dc <main+0xacc>
											else
												frequency-=100;
 80014d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d8:	3b64      	subs	r3, #100	; 0x64
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
											__HAL_TIM_SET_AUTORELOAD(&htim2,frequency);
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <main+0xb58>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e6:	4a20      	ldr	r2, [pc, #128]	; (8001568 <main+0xb58>)
 80014e8:	60d3      	str	r3, [r2, #12]
											if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)==lastState)
 80014ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ee:	481f      	ldr	r0, [pc, #124]	; (800156c <main+0xb5c>)
 80014f0:	f001 f9a0 	bl	8002834 <HAL_GPIO_ReadPin>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d101      	bne.n	8001502 <main+0xaf2>
												etatsw2=0;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
											if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)==HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 8001502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001506:	4819      	ldr	r0, [pc, #100]	; (800156c <main+0xb5c>)
 8001508:	f001 f994 	bl	8002834 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	461c      	mov	r4, r3
 8001510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001514:	4815      	ldr	r0, [pc, #84]	; (800156c <main+0xb5c>)
 8001516:	f001 f98d 	bl	8002834 <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	429c      	cmp	r4, r3
 800151e:	d101      	bne.n	8001524 <main+0xb14>
												etatsw2=1;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
										while(etatsw2==2)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d0c6      	beq.n	80014b8 <main+0xaa8>
 800152a:	e04b      	b.n	80015c4 <main+0xbb4>
										}
									}
									else
									{
										etatsw2=1;
 800152c:	2301      	movs	r3, #1
 800152e:	623b      	str	r3, [r7, #32]
										while(etatsw2==1)
 8001530:	e045      	b.n	80015be <main+0xbae>
										{
											lastState=HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin);
 8001532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <main+0xb5c>)
 8001538:	f001 f97c 	bl	8002834 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	647b      	str	r3, [r7, #68]	; 0x44
											HAL_Delay(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f000 fcb7 	bl	8001eb4 <HAL_Delay>
											if (frequency==9900)
 8001546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001548:	f242 62ac 	movw	r2, #9900	; 0x26ac
 800154c:	4293      	cmp	r3, r2
 800154e:	d10f      	bne.n	8001570 <main+0xb60>
												frequency=9900;
 8001550:	f242 63ac 	movw	r3, #9900	; 0x26ac
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
 8001556:	e00e      	b.n	8001576 <main+0xb66>
 8001558:	40010c00 	.word	0x40010c00
 800155c:	2000003c 	.word	0x2000003c
 8001560:	20000030 	.word	0x20000030
 8001564:	08003eb8 	.word	0x08003eb8
 8001568:	200000b4 	.word	0x200000b4
 800156c:	40011000 	.word	0x40011000
											else
												frequency-=100;
 8001570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001572:	3b64      	subs	r3, #100	; 0x64
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
											__HAL_TIM_SET_AUTORELOAD(&htim2,frequency);
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <main+0xc00>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
 800157e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001580:	4a23      	ldr	r2, [pc, #140]	; (8001610 <main+0xc00>)
 8001582:	60d3      	str	r3, [r2, #12]

											if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)==lastState)
 8001584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001588:	4822      	ldr	r0, [pc, #136]	; (8001614 <main+0xc04>)
 800158a:	f001 f953 	bl	8002834 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <main+0xb8c>
												etatsw2=0;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
											if(HAL_GPIO_ReadPin(ROT_A_2_GPIO_Port, ROT_A_2_Pin)!=HAL_GPIO_ReadPin(ROT_B_2_GPIO_Port, ROT_B_2_Pin))
 800159c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a0:	481c      	ldr	r0, [pc, #112]	; (8001614 <main+0xc04>)
 80015a2:	f001 f947 	bl	8002834 <HAL_GPIO_ReadPin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461c      	mov	r4, r3
 80015aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ae:	4819      	ldr	r0, [pc, #100]	; (8001614 <main+0xc04>)
 80015b0:	f001 f940 	bl	8002834 <HAL_GPIO_ReadPin>
 80015b4:	4603      	mov	r3, r0
 80015b6:	429c      	cmp	r4, r3
 80015b8:	d001      	beq.n	80015be <main+0xbae>
												etatsw2=2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	623b      	str	r3, [r7, #32]
										while(etatsw2==1)
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d0b6      	beq.n	8001532 <main+0xb22>
										}
									}
								}
				if(SW1==0)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d108      	bne.n	80015dc <main+0xbcc>
				{
					frequency=100;
 80015ca:	2364      	movs	r3, #100	; 0x64
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
					__HAL_TIM_SET_AUTORELOAD(&htim2,frequency);
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <main+0xc00>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <main+0xc00>)
 80015da:	60d3      	str	r3, [r2, #12]
				}
				if(SW2==0)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f47f aa6a 	bne.w	8000ab8 <main+0xa8>
				{
					initSEG();
 80015e4:	f7fe fe1e 	bl	8000224 <initSEG>
					HAL_Delay(200);
 80015e8:	20c8      	movs	r0, #200	; 0xc8
 80015ea:	f000 fc63 	bl	8001eb4 <HAL_Delay>
					etat=tachefond;
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <main+0xc08>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f7ff ba60 	b.w	8000ab8 <main+0xa8>
			break;
 80015f8:	bf00      	nop
 80015fa:	f7ff ba5d 	b.w	8000ab8 <main+0xa8>
				break;
 80015fe:	bf00      	nop
 8001600:	f7ff ba5a 	b.w	8000ab8 <main+0xa8>
				break;
 8001604:	bf00      	nop
 8001606:	f7ff ba57 	b.w	8000ab8 <main+0xa8>
				break;
 800160a:	bf00      	nop
		SW1= HAL_GPIO_ReadPin(ROT_SW_1_GPIO_Port, ROT_SW_1_Pin);
 800160c:	f7ff ba54 	b.w	8000ab8 <main+0xa8>
 8001610:	200000b4 	.word	0x200000b4
 8001614:	40011000 	.word	0x40011000
 8001618:	20000030 	.word	0x20000030

0800161c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b096      	sub	sp, #88	; 0x58
 8001620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001626:	2228      	movs	r2, #40	; 0x28
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f002 fc24 	bl	8003e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001650:	2302      	movs	r3, #2
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001654:	2301      	movs	r3, #1
 8001656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001658:	2310      	movs	r3, #16
 800165a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165c:	2302      	movs	r3, #2
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001660:	2300      	movs	r3, #0
 8001662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001664:	2300      	movs	r3, #0
 8001666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800166c:	4618      	mov	r0, r3
 800166e:	f001 f911 	bl	8002894 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001678:	f000 fa42 	bl	8001b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167c:	230f      	movs	r3, #15
 800167e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fb7b 	bl	8002d94 <HAL_RCC_ClockConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80016a4:	f000 fa2c 	bl	8001b00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016a8:	2302      	movs	r3, #2
 80016aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fcd6 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016be:	f000 fa1f 	bl	8001b00 <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3758      	adds	r7, #88	; 0x58
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_ADC1_Init+0x74>)
 80016de:	4a19      	ldr	r2, [pc, #100]	; (8001744 <MX_ADC1_Init+0x78>)
 80016e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_ADC1_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_ADC1_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_ADC1_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_ADC1_Init+0x74>)
 80016f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80016fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <MX_ADC1_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_ADC1_Init+0x74>)
 8001704:	2201      	movs	r2, #1
 8001706:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <MX_ADC1_Init+0x74>)
 800170a:	f000 fbf7 	bl	8001efc <HAL_ADC_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001714:	f000 f9f4 	bl	8001b00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001718:	2304      	movs	r3, #4
 800171a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800171c:	2301      	movs	r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_ADC1_Init+0x74>)
 800172a:	f000 fcd1 	bl	80020d0 <HAL_ADC_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001734:	f000 f9e4 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000084 	.word	0x20000084
 8001744:	40012400 	.word	0x40012400

08001748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08e      	sub	sp, #56	; 0x38
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001778:	4b39      	ldr	r3, [pc, #228]	; (8001860 <MX_TIM2_Init+0x118>)
 800177a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000;
 8001780:	4b37      	ldr	r3, [pc, #220]	; (8001860 <MX_TIM2_Init+0x118>)
 8001782:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001786:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <MX_TIM2_Init+0x118>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <MX_TIM2_Init+0x118>)
 8001790:	2264      	movs	r2, #100	; 0x64
 8001792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <MX_TIM2_Init+0x118>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b31      	ldr	r3, [pc, #196]	; (8001860 <MX_TIM2_Init+0x118>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a0:	482f      	ldr	r0, [pc, #188]	; (8001860 <MX_TIM2_Init+0x118>)
 80017a2:	f001 fd15 	bl	80031d0 <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017ac:	f000 f9a8 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4828      	ldr	r0, [pc, #160]	; (8001860 <MX_TIM2_Init+0x118>)
 80017be:	f001 ff27 	bl	8003610 <HAL_TIM_ConfigClockSource>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017c8:	f000 f99a 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017cc:	4824      	ldr	r0, [pc, #144]	; (8001860 <MX_TIM2_Init+0x118>)
 80017ce:	f001 fd4e 	bl	800326e <HAL_TIM_PWM_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017d8:	f000 f992 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	4619      	mov	r1, r3
 80017ea:	481d      	ldr	r0, [pc, #116]	; (8001860 <MX_TIM2_Init+0x118>)
 80017ec:	f002 fab4 	bl	8003d58 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017f6:	f000 f983 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	; 0x60
 80017fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001802:	2302      	movs	r3, #2
 8001804:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2204      	movs	r2, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4813      	ldr	r0, [pc, #76]	; (8001860 <MX_TIM2_Init+0x118>)
 8001812:	f001 fe3f 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800181c:	f000 f970 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2208      	movs	r2, #8
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_TIM2_Init+0x118>)
 800182c:	f001 fe32 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001836:	f000 f963 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	220c      	movs	r2, #12
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_TIM2_Init+0x118>)
 8001842:	f001 fe27 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 800184c:	f000 f958 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001850:	4803      	ldr	r0, [pc, #12]	; (8001860 <MX_TIM2_Init+0x118>)
 8001852:	f000 fa11 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 8001856:	bf00      	nop
 8001858:	3738      	adds	r7, #56	; 0x38
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200000b4 	.word	0x200000b4

08001864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001894:	4b37      	ldr	r3, [pc, #220]	; (8001974 <MX_TIM3_Init+0x110>)
 8001896:	4a38      	ldr	r2, [pc, #224]	; (8001978 <MX_TIM3_Init+0x114>)
 8001898:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <MX_TIM3_Init+0x110>)
 800189c:	2204      	movs	r2, #4
 800189e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b34      	ldr	r3, [pc, #208]	; (8001974 <MX_TIM3_Init+0x110>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80018a6:	4b33      	ldr	r3, [pc, #204]	; (8001974 <MX_TIM3_Init+0x110>)
 80018a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <MX_TIM3_Init+0x110>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <MX_TIM3_Init+0x110>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018ba:	482e      	ldr	r0, [pc, #184]	; (8001974 <MX_TIM3_Init+0x110>)
 80018bc:	f001 fc88 	bl	80031d0 <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018c6:	f000 f91b 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4827      	ldr	r0, [pc, #156]	; (8001974 <MX_TIM3_Init+0x110>)
 80018d8:	f001 fe9a 	bl	8003610 <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018e2:	f000 f90d 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018e6:	4823      	ldr	r0, [pc, #140]	; (8001974 <MX_TIM3_Init+0x110>)
 80018e8:	f001 fcc1 	bl	800326e <HAL_TIM_PWM_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018f2:	f000 f905 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	4619      	mov	r1, r3
 8001904:	481b      	ldr	r0, [pc, #108]	; (8001974 <MX_TIM3_Init+0x110>)
 8001906:	f002 fa27 	bl	8003d58 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001910:	f000 f8f6 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001914:	2360      	movs	r3, #96	; 0x60
 8001916:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8001918:	2314      	movs	r3, #20
 800191a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	4619      	mov	r1, r3
 800192a:	4812      	ldr	r0, [pc, #72]	; (8001974 <MX_TIM3_Init+0x110>)
 800192c:	f001 fdb2 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001936:	f000 f8e3 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2204      	movs	r2, #4
 800193e:	4619      	mov	r1, r3
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_TIM3_Init+0x110>)
 8001942:	f001 fda7 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800194c:	f000 f8d8 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2208      	movs	r2, #8
 8001954:	4619      	mov	r1, r3
 8001956:	4807      	ldr	r0, [pc, #28]	; (8001974 <MX_TIM3_Init+0x110>)
 8001958:	f001 fd9c 	bl	8003494 <HAL_TIM_PWM_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001962:	f000 f8cd 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001966:	4803      	ldr	r0, [pc, #12]	; (8001974 <MX_TIM3_Init+0x110>)
 8001968:	f000 f986 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 800196c:	bf00      	nop
 800196e:	3738      	adds	r7, #56	; 0x38
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000003c 	.word	0x2000003c
 8001978:	40000400 	.word	0x40000400

0800197c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001990:	4b56      	ldr	r3, [pc, #344]	; (8001aec <MX_GPIO_Init+0x170>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a55      	ldr	r2, [pc, #340]	; (8001aec <MX_GPIO_Init+0x170>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <MX_GPIO_Init+0x170>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <MX_GPIO_Init+0x170>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a4f      	ldr	r2, [pc, #316]	; (8001aec <MX_GPIO_Init+0x170>)
 80019ae:	f043 0320 	orr.w	r3, r3, #32
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <MX_GPIO_Init+0x170>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0320 	and.w	r3, r3, #32
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b4a      	ldr	r3, [pc, #296]	; (8001aec <MX_GPIO_Init+0x170>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a49      	ldr	r2, [pc, #292]	; (8001aec <MX_GPIO_Init+0x170>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b47      	ldr	r3, [pc, #284]	; (8001aec <MX_GPIO_Init+0x170>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	4b44      	ldr	r3, [pc, #272]	; (8001aec <MX_GPIO_Init+0x170>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a43      	ldr	r2, [pc, #268]	; (8001aec <MX_GPIO_Init+0x170>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b41      	ldr	r3, [pc, #260]	; (8001aec <MX_GPIO_Init+0x170>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 80019f0:	2201      	movs	r2, #1
 80019f2:	f24f 31f8 	movw	r1, #62456	; 0xf3f8
 80019f6:	483e      	ldr	r0, [pc, #248]	; (8001af0 <MX_GPIO_Init+0x174>)
 80019f8:	f000 ff33 	bl	8002862 <HAL_GPIO_WritePin>
                          |SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin|DIGIT4_Pin
                          |DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a02:	483c      	ldr	r0, [pc, #240]	; (8001af4 <MX_GPIO_Init+0x178>)
 8001a04:	f000 ff2d 	bl	8002862 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_B_Pin|SEG_C_Pin|SEG_D_Pin, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001a0e:	483a      	ldr	r0, [pc, #232]	; (8001af8 <MX_GPIO_Init+0x17c>)
 8001a10:	f000 ff27 	bl	8002862 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2104      	movs	r1, #4
 8001a18:	4838      	ldr	r0, [pc, #224]	; (8001afc <MX_GPIO_Init+0x180>)
 8001a1a:	f000 ff22 	bl	8002862 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROT_A_2_Pin ROT_B_2_Pin ROT_SW_2_Pin */
  GPIO_InitStruct.Pin = ROT_A_2_Pin|ROT_B_2_Pin|ROT_SW_2_Pin;
 8001a1e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4619      	mov	r1, r3
 8001a32:	4831      	ldr	r0, [pc, #196]	; (8001af8 <MX_GPIO_Init+0x17c>)
 8001a34:	f000 fd6a 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROT_SW_1_Pin ROT_B_1_Pin ROT_A_1_Pin */
  GPIO_InitStruct.Pin = ROT_SW_1_Pin|ROT_B_1_Pin|ROT_A_1_Pin;
 8001a38:	2307      	movs	r3, #7
 8001a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4829      	ldr	r0, [pc, #164]	; (8001af0 <MX_GPIO_Init+0x174>)
 8001a4c:	f000 fd5e 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIGIT8_Pin DIGIT7_Pin DIGIT6_Pin DIGIT5_Pin
                           DIGIT4_Pin DIGIT3_Pin DIGIT2_Pin DIGIT1_Pin */
  GPIO_InitStruct.Pin = DIGIT8_Pin|DIGIT7_Pin|DIGIT6_Pin|DIGIT5_Pin
 8001a50:	f24f 33c0 	movw	r3, #62400	; 0xf3c0
 8001a54:	613b      	str	r3, [r7, #16]
                          |DIGIT4_Pin|DIGIT3_Pin|DIGIT2_Pin|DIGIT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	4619      	mov	r1, r3
 8001a68:	4821      	ldr	r0, [pc, #132]	; (8001af0 <MX_GPIO_Init+0x174>)
 8001a6a:	f000 fd4f 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_A_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin;
 8001a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_A_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	481b      	ldr	r0, [pc, #108]	; (8001af4 <MX_GPIO_Init+0x178>)
 8001a88:	f000 fd40 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_B_Pin SEG_C_Pin SEG_D_Pin */
  GPIO_InitStruct.Pin = SEG_B_Pin|SEG_C_Pin|SEG_D_Pin;
 8001a8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4814      	ldr	r0, [pc, #80]	; (8001af8 <MX_GPIO_Init+0x17c>)
 8001aa6:	f000 fd31 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG_E_Pin */
  GPIO_InitStruct.Pin = SEG_E_Pin;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SEG_E_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480e      	ldr	r0, [pc, #56]	; (8001afc <MX_GPIO_Init+0x180>)
 8001ac2:	f000 fd23 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_F_Pin SEG_G_Pin SEG_DP_Pin */
  GPIO_InitStruct.Pin = SEG_F_Pin|SEG_G_Pin|SEG_DP_Pin;
 8001ac6:	2338      	movs	r3, #56	; 0x38
 8001ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4619      	mov	r1, r3
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_GPIO_Init+0x174>)
 8001ade:	f000 fd15 	bl	800250c <HAL_GPIO_Init>

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40010800 	.word	0x40010800
 8001af8:	40011000 	.word	0x40011000
 8001afc:	40011400 	.word	0x40011400

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_MspInit+0x60>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_MspInit+0x60>)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000

08001b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0318 	add.w	r3, r7, #24
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_ADC_MspInit+0x98>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d137      	bne.n	8001c00 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b90:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
 8001b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bd8:	2338      	movs	r3, #56	; 0x38
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be0:	f107 0318 	add.w	r3, r7, #24
 8001be4:	4619      	mov	r1, r3
 8001be6:	480a      	ldr	r0, [pc, #40]	; (8001c10 <HAL_ADC_MspInit+0xa0>)
 8001be8:	f000 fc90 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bec:	2330      	movs	r3, #48	; 0x30
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0318 	add.w	r3, r7, #24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <HAL_ADC_MspInit+0xa4>)
 8001bfc:	f000 fc86 	bl	800250c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40012400 	.word	0x40012400
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40011000 	.word	0x40011000
 8001c14:	40010800 	.word	0x40010800

08001c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c28:	d10c      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_TIM_Base_MspInit+0x58>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <HAL_TIM_Base_MspInit+0x58>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_TIM_Base_MspInit+0x58>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c42:	e010      	b.n	8001c66 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_TIM_Base_MspInit+0x5c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10b      	bne.n	8001c66 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_TIM_Base_MspInit+0x58>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a07      	ldr	r2, [pc, #28]	; (8001c70 <HAL_TIM_Base_MspInit+0x58>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_TIM_Base_MspInit+0x58>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40000400 	.word	0x40000400

08001c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c96:	d118      	bne.n	8001cca <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <HAL_TIM_MspPostInit+0xbc>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a25      	ldr	r2, [pc, #148]	; (8001d34 <HAL_TIM_MspPostInit+0xbc>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_TIM_MspPostInit+0xbc>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cb0:	230e      	movs	r3, #14
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	481d      	ldr	r0, [pc, #116]	; (8001d38 <HAL_TIM_MspPostInit+0xc0>)
 8001cc4:	f000 fc22 	bl	800250c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cc8:	e02f      	b.n	8001d2a <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_TIM_MspPostInit+0xc4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d12a      	bne.n	8001d2a <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_TIM_MspPostInit+0xbc>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <HAL_TIM_MspPostInit+0xbc>)
 8001cda:	f043 0310 	orr.w	r3, r3, #16
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_TIM_MspPostInit+0xbc>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001cec:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480f      	ldr	r0, [pc, #60]	; (8001d40 <HAL_TIM_MspPostInit+0xc8>)
 8001d02:	f000 fc03 	bl	800250c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001d06:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_TIM_MspPostInit+0xcc>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_TIM_MspPostInit+0xcc>)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	6053      	str	r3, [r2, #4]
}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010800 	.word	0x40010800
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40011000 	.word	0x40011000
 8001d44:	40010000 	.word	0x40010000

08001d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <NMI_Handler+0x4>

08001d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8e:	f000 f875 	bl	8001e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
	...

08001da4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da4:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001da6:	490d      	ldr	r1, [pc, #52]	; (8001ddc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dac:	e002      	b.n	8001db4 <LoopCopyDataInit>

08001dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db2:	3304      	adds	r3, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db8:	d3f9      	bcc.n	8001dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dbc:	4c0a      	ldr	r4, [pc, #40]	; (8001de8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc0:	e001      	b.n	8001dc6 <LoopFillZerobss>

08001dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc4:	3204      	adds	r2, #4

08001dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc8:	d3fb      	bcc.n	8001dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dca:	f7ff ffe4 	bl	8001d96 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dce:	f002 f82f 	bl	8003e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dd2:	f7fe fe1d 	bl	8000a10 <main>
  bx lr
 8001dd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ddc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001de0:	08003f54 	.word	0x08003f54
  ldr r2, =_sbss
 8001de4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001de8:	20000100 	.word	0x20000100

08001dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dec:	e7fe      	b.n	8001dec <ADC1_2_IRQHandler>
	...

08001df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_Init+0x28>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_Init+0x28>)
 8001dfa:	f043 0310 	orr.w	r3, r3, #16
 8001dfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 fb4f 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e06:	200f      	movs	r0, #15
 8001e08:	f000 f808 	bl	8001e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7ff fe7e 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_InitTick+0x54>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x58>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fb59 	bl	80024f2 <HAL_SYSTICK_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00e      	b.n	8001e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b0f      	cmp	r3, #15
 8001e4e:	d80a      	bhi.n	8001e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e50:	2200      	movs	r2, #0
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	f04f 30ff 	mov.w	r0, #4294967295
 8001e58:	f000 fb2f 	bl	80024ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e5c:	4a06      	ldr	r2, [pc, #24]	; (8001e78 <HAL_InitTick+0x5c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000008 	.word	0x20000008
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_IncTick+0x1c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_IncTick+0x20>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_IncTick+0x20>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	20000008 	.word	0x20000008
 8001e9c:	200000fc 	.word	0x200000fc

08001ea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <HAL_GetTick+0x10>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	200000fc 	.word	0x200000fc

08001eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	f7ff fff0 	bl	8001ea0 <HAL_GetTick>
 8001ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d005      	beq.n	8001eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_Delay+0x44>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eda:	bf00      	nop
 8001edc:	f7ff ffe0 	bl	8001ea0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d8f7      	bhi.n	8001edc <HAL_Delay+0x28>
  {
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0ce      	b.n	80020bc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff fe18 	bl	8001b70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f9bd 	bl	80022c0 <ADC_ConversionStop_Disable>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 80a9 	bne.w	80020aa <HAL_ADC_Init+0x1ae>
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 80a5 	bne.w	80020aa <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f68:	f023 0302 	bic.w	r3, r3, #2
 8001f6c:	f043 0202 	orr.w	r2, r3, #2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4951      	ldr	r1, [pc, #324]	; (80020c4 <HAL_ADC_Init+0x1c8>)
 8001f7e:	428b      	cmp	r3, r1
 8001f80:	d10a      	bne.n	8001f98 <HAL_ADC_Init+0x9c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f8a:	d002      	beq.n	8001f92 <HAL_ADC_Init+0x96>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	e004      	b.n	8001f9c <HAL_ADC_Init+0xa0>
 8001f92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f96:	e001      	b.n	8001f9c <HAL_ADC_Init+0xa0>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7b1b      	ldrb	r3, [r3, #12]
 8001fa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb4:	d003      	beq.n	8001fbe <HAL_ADC_Init+0xc2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_ADC_Init+0xc8>
 8001fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc2:	e000      	b.n	8001fc6 <HAL_ADC_Init+0xca>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7d1b      	ldrb	r3, [r3, #20]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d119      	bne.n	8002008 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7b1b      	ldrb	r3, [r3, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	035a      	lsls	r2, r3, #13
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	e00b      	b.n	8002008 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	430a      	orrs	r2, r1
 800201a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <HAL_ADC_Init+0x1cc>)
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	430b      	orrs	r3, r1
 800202e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002038:	d003      	beq.n	8002042 <HAL_ADC_Init+0x146>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d104      	bne.n	800204c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	3b01      	subs	r3, #1
 8002048:	051b      	lsls	r3, r3, #20
 800204a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	430a      	orrs	r2, r1
 800205e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_ADC_Init+0x1d0>)
 8002068:	4013      	ands	r3, r2
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	429a      	cmp	r2, r3
 800206e:	d10b      	bne.n	8002088 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002086:	e018      	b.n	80020ba <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f023 0312 	bic.w	r3, r3, #18
 8002090:	f043 0210 	orr.w	r2, r3, #16
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020a8:	e007      	b.n	80020ba <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	f043 0210 	orr.w	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40013c00 	.word	0x40013c00
 80020c8:	ffe1f7fd 	.word	0xffe1f7fd
 80020cc:	ff1f0efe 	.word	0xff1f0efe

080020d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x20>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e0dc      	b.n	80022aa <HAL_ADC_ConfigChannel+0x1da>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b06      	cmp	r3, #6
 80020fe:	d81c      	bhi.n	800213a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b05      	subs	r3, #5
 8002112:	221f      	movs	r2, #31
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	4019      	ands	r1, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b05      	subs	r3, #5
 800212c:	fa00 f203 	lsl.w	r2, r0, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	635a      	str	r2, [r3, #52]	; 0x34
 8002138:	e03c      	b.n	80021b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d81c      	bhi.n	800217c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b23      	subs	r3, #35	; 0x23
 8002154:	221f      	movs	r2, #31
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	4019      	ands	r1, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3b23      	subs	r3, #35	; 0x23
 800216e:	fa00 f203 	lsl.w	r2, r0, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
 800217a:	e01b      	b.n	80021b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	3b41      	subs	r3, #65	; 0x41
 800218e:	221f      	movs	r2, #31
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	4019      	ands	r1, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b41      	subs	r3, #65	; 0x41
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	d91c      	bls.n	80021f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68d9      	ldr	r1, [r3, #12]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	3b1e      	subs	r3, #30
 80021ce:	2207      	movs	r2, #7
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6898      	ldr	r0, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	3b1e      	subs	r3, #30
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	e019      	b.n	800222a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6919      	ldr	r1, [r3, #16]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	2207      	movs	r2, #7
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	4019      	ands	r1, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6898      	ldr	r0, [r3, #8]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	fa00 f203 	lsl.w	r2, r0, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b10      	cmp	r3, #16
 8002230:	d003      	beq.n	800223a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002236:	2b11      	cmp	r3, #17
 8002238:	d132      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d125      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d126      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002260:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b10      	cmp	r3, #16
 8002268:	d11a      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	0c9a      	lsrs	r2, r3, #18
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002280:	e002      	b.n	8002288 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x1b2>
 800228e:	e007      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40012400 	.word	0x40012400
 80022b8:	20000000 	.word	0x20000000
 80022bc:	431bde83 	.word	0x431bde83

080022c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d12e      	bne.n	8002338 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ea:	f7ff fdd9 	bl	8001ea0 <HAL_GetTick>
 80022ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022f0:	e01b      	b.n	800232a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022f2:	f7ff fdd5 	bl	8001ea0 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d914      	bls.n	800232a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10d      	bne.n	800232a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e007      	b.n	800233a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d0dc      	beq.n	80022f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800236c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60d3      	str	r3, [r2, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002470:	d301      	bcc.n	8002476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002472:	2301      	movs	r3, #1
 8002474:	e00f      	b.n	8002496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <SysTick_Config+0x40>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247e:	210f      	movs	r1, #15
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f7ff ff90 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <SysTick_Config+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <SysTick_Config+0x40>)
 8002490:	2207      	movs	r2, #7
 8002492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff49 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024cc:	f7ff ff5e 	bl	800238c <__NVIC_GetPriorityGrouping>
 80024d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	6978      	ldr	r0, [r7, #20]
 80024d8:	f7ff ff90 	bl	80023fc <NVIC_EncodePriority>
 80024dc:	4602      	mov	r2, r0
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff5f 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ffb0 	bl	8002460 <SysTick_Config>
 8002500:	4603      	mov	r3, r0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b08b      	sub	sp, #44	; 0x2c
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251e:	e179      	b.n	8002814 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002520:	2201      	movs	r2, #1
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	429a      	cmp	r2, r3
 800253a:	f040 8168 	bne.w	800280e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4aa0      	ldr	r2, [pc, #640]	; (80027c4 <HAL_GPIO_Init+0x2b8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d05e      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002548:	4a9e      	ldr	r2, [pc, #632]	; (80027c4 <HAL_GPIO_Init+0x2b8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d875      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 800254e:	4a9e      	ldr	r2, [pc, #632]	; (80027c8 <HAL_GPIO_Init+0x2bc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d058      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002554:	4a9c      	ldr	r2, [pc, #624]	; (80027c8 <HAL_GPIO_Init+0x2bc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d86f      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 800255a:	4a9c      	ldr	r2, [pc, #624]	; (80027cc <HAL_GPIO_Init+0x2c0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d052      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002560:	4a9a      	ldr	r2, [pc, #616]	; (80027cc <HAL_GPIO_Init+0x2c0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d869      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 8002566:	4a9a      	ldr	r2, [pc, #616]	; (80027d0 <HAL_GPIO_Init+0x2c4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d04c      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 800256c:	4a98      	ldr	r2, [pc, #608]	; (80027d0 <HAL_GPIO_Init+0x2c4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d863      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 8002572:	4a98      	ldr	r2, [pc, #608]	; (80027d4 <HAL_GPIO_Init+0x2c8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d046      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002578:	4a96      	ldr	r2, [pc, #600]	; (80027d4 <HAL_GPIO_Init+0x2c8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d85d      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 800257e:	2b12      	cmp	r3, #18
 8002580:	d82a      	bhi.n	80025d8 <HAL_GPIO_Init+0xcc>
 8002582:	2b12      	cmp	r3, #18
 8002584:	d859      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <HAL_GPIO_Init+0x80>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	08002607 	.word	0x08002607
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080025f3 	.word	0x080025f3
 8002598:	08002635 	.word	0x08002635
 800259c:	0800263b 	.word	0x0800263b
 80025a0:	0800263b 	.word	0x0800263b
 80025a4:	0800263b 	.word	0x0800263b
 80025a8:	0800263b 	.word	0x0800263b
 80025ac:	0800263b 	.word	0x0800263b
 80025b0:	0800263b 	.word	0x0800263b
 80025b4:	0800263b 	.word	0x0800263b
 80025b8:	0800263b 	.word	0x0800263b
 80025bc:	0800263b 	.word	0x0800263b
 80025c0:	0800263b 	.word	0x0800263b
 80025c4:	0800263b 	.word	0x0800263b
 80025c8:	0800263b 	.word	0x0800263b
 80025cc:	0800263b 	.word	0x0800263b
 80025d0:	080025e9 	.word	0x080025e9
 80025d4:	080025fd 	.word	0x080025fd
 80025d8:	4a7f      	ldr	r2, [pc, #508]	; (80027d8 <HAL_GPIO_Init+0x2cc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025de:	e02c      	b.n	800263a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	623b      	str	r3, [r7, #32]
          break;
 80025e6:	e029      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	3304      	adds	r3, #4
 80025ee:	623b      	str	r3, [r7, #32]
          break;
 80025f0:	e024      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	3308      	adds	r3, #8
 80025f8:	623b      	str	r3, [r7, #32]
          break;
 80025fa:	e01f      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	330c      	adds	r3, #12
 8002602:	623b      	str	r3, [r7, #32]
          break;
 8002604:	e01a      	b.n	800263c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800260e:	2304      	movs	r3, #4
 8002610:	623b      	str	r3, [r7, #32]
          break;
 8002612:	e013      	b.n	800263c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800261c:	2308      	movs	r3, #8
 800261e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	611a      	str	r2, [r3, #16]
          break;
 8002626:	e009      	b.n	800263c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002628:	2308      	movs	r3, #8
 800262a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	615a      	str	r2, [r3, #20]
          break;
 8002632:	e003      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002634:	2300      	movs	r3, #0
 8002636:	623b      	str	r3, [r7, #32]
          break;
 8002638:	e000      	b.n	800263c <HAL_GPIO_Init+0x130>
          break;
 800263a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d801      	bhi.n	8002646 <HAL_GPIO_Init+0x13a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	e001      	b.n	800264a <HAL_GPIO_Init+0x13e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	d802      	bhi.n	8002658 <HAL_GPIO_Init+0x14c>
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	e002      	b.n	800265e <HAL_GPIO_Init+0x152>
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	3b08      	subs	r3, #8
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	210f      	movs	r1, #15
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	401a      	ands	r2, r3
 8002670:	6a39      	ldr	r1, [r7, #32]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	431a      	orrs	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80c1 	beq.w	800280e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800268c:	4b53      	ldr	r3, [pc, #332]	; (80027dc <HAL_GPIO_Init+0x2d0>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_GPIO_Init+0x2d0>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_GPIO_Init+0x2d0>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026a4:	4a4e      	ldr	r2, [pc, #312]	; (80027e0 <HAL_GPIO_Init+0x2d4>)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a46      	ldr	r2, [pc, #280]	; (80027e4 <HAL_GPIO_Init+0x2d8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d01f      	beq.n	8002710 <HAL_GPIO_Init+0x204>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a45      	ldr	r2, [pc, #276]	; (80027e8 <HAL_GPIO_Init+0x2dc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d019      	beq.n	800270c <HAL_GPIO_Init+0x200>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a44      	ldr	r2, [pc, #272]	; (80027ec <HAL_GPIO_Init+0x2e0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_GPIO_Init+0x1fc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a43      	ldr	r2, [pc, #268]	; (80027f0 <HAL_GPIO_Init+0x2e4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00d      	beq.n	8002704 <HAL_GPIO_Init+0x1f8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a42      	ldr	r2, [pc, #264]	; (80027f4 <HAL_GPIO_Init+0x2e8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d007      	beq.n	8002700 <HAL_GPIO_Init+0x1f4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a41      	ldr	r2, [pc, #260]	; (80027f8 <HAL_GPIO_Init+0x2ec>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_GPIO_Init+0x1f0>
 80026f8:	2305      	movs	r3, #5
 80026fa:	e00a      	b.n	8002712 <HAL_GPIO_Init+0x206>
 80026fc:	2306      	movs	r3, #6
 80026fe:	e008      	b.n	8002712 <HAL_GPIO_Init+0x206>
 8002700:	2304      	movs	r3, #4
 8002702:	e006      	b.n	8002712 <HAL_GPIO_Init+0x206>
 8002704:	2303      	movs	r3, #3
 8002706:	e004      	b.n	8002712 <HAL_GPIO_Init+0x206>
 8002708:	2302      	movs	r3, #2
 800270a:	e002      	b.n	8002712 <HAL_GPIO_Init+0x206>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_GPIO_Init+0x206>
 8002710:	2300      	movs	r3, #0
 8002712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002714:	f002 0203 	and.w	r2, r2, #3
 8002718:	0092      	lsls	r2, r2, #2
 800271a:	4093      	lsls	r3, r2
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002722:	492f      	ldr	r1, [pc, #188]	; (80027e0 <HAL_GPIO_Init+0x2d4>)
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d006      	beq.n	800274a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800273c:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	492e      	ldr	r1, [pc, #184]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
 8002748:	e006      	b.n	8002758 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800274a:	4b2c      	ldr	r3, [pc, #176]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	43db      	mvns	r3, r3
 8002752:	492a      	ldr	r1, [pc, #168]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002754:	4013      	ands	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4924      	ldr	r1, [pc, #144]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	43db      	mvns	r3, r3
 800277a:	4920      	ldr	r1, [pc, #128]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800277c:	4013      	ands	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d006      	beq.n	800279a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	491a      	ldr	r1, [pc, #104]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	608b      	str	r3, [r1, #8]
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	4916      	ldr	r1, [pc, #88]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d025      	beq.n	8002800 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	4910      	ldr	r1, [pc, #64]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60cb      	str	r3, [r1, #12]
 80027c0:	e025      	b.n	800280e <HAL_GPIO_Init+0x302>
 80027c2:	bf00      	nop
 80027c4:	10320000 	.word	0x10320000
 80027c8:	10310000 	.word	0x10310000
 80027cc:	10220000 	.word	0x10220000
 80027d0:	10210000 	.word	0x10210000
 80027d4:	10120000 	.word	0x10120000
 80027d8:	10110000 	.word	0x10110000
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40010800 	.word	0x40010800
 80027e8:	40010c00 	.word	0x40010c00
 80027ec:	40011000 	.word	0x40011000
 80027f0:	40011400 	.word	0x40011400
 80027f4:	40011800 	.word	0x40011800
 80027f8:	40011c00 	.word	0x40011c00
 80027fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_GPIO_Init+0x324>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	43db      	mvns	r3, r3
 8002808:	4909      	ldr	r1, [pc, #36]	; (8002830 <HAL_GPIO_Init+0x324>)
 800280a:	4013      	ands	r3, r2
 800280c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	3301      	adds	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f47f ae7e 	bne.w	8002520 <HAL_GPIO_Init+0x14>
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	372c      	adds	r7, #44	; 0x2c
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e001      	b.n	8002856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	807b      	strh	r3, [r7, #2]
 800286e:	4613      	mov	r3, r2
 8002870:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002872:	787b      	ldrb	r3, [r7, #1]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002878:	887a      	ldrh	r2, [r7, #2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800287e:	e003      	b.n	8002888 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	041a      	lsls	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	611a      	str	r2, [r3, #16]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
	...

08002894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e26c      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8087 	beq.w	80029c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b4:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d00c      	beq.n	80028da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028c0:	4b8f      	ldr	r3, [pc, #572]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 030c 	and.w	r3, r3, #12
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d112      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
 80028cc:	4b8c      	ldr	r3, [pc, #560]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d10b      	bne.n	80028f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028da:	4b89      	ldr	r3, [pc, #548]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d06c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x12c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d168      	bne.n	80029c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e246      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x76>
 80028fc:	4b80      	ldr	r3, [pc, #512]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a7f      	ldr	r2, [pc, #508]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e02e      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7a      	ldr	r2, [pc, #488]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b78      	ldr	r3, [pc, #480]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a77      	ldr	r2, [pc, #476]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e01d      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0xbc>
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a71      	ldr	r2, [pc, #452]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800293c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6e      	ldr	r2, [pc, #440]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	e00b      	b.n	8002968 <HAL_RCC_OscConfig+0xd4>
 8002950:	4b6b      	ldr	r3, [pc, #428]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a67      	ldr	r2, [pc, #412]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002966:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff fa96 	bl	8001ea0 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fa92 	bl	8001ea0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1fa      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0xe4>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff fa82 	bl	8001ea0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7ff fa7e 	bl	8001ea0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1e6      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x10c>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d063      	beq.n	8002a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ce:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029da:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x18c>
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x176>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1ba      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4939      	ldr	r1, [pc, #228]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e03a      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7ff fa37 	bl	8001ea0 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a36:	f7ff fa33 	bl	8001ea0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e19b      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4927      	ldr	r1, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff fa16 	bl	8001ea0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a78:	f7ff fa12 	bl	8001ea0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e17a      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d03a      	beq.n	8002b18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d019      	beq.n	8002ade <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x274>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab0:	f7ff f9f6 	bl	8001ea0 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7ff f9f2 	bl	8001ea0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e15a      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f000 faa6 	bl	8003028 <RCC_Delay>
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae4:	f7ff f9dc 	bl	8001ea0 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aea:	e00f      	b.n	8002b0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aec:	f7ff f9d8 	bl	8001ea0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d908      	bls.n	8002b0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e140      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	42420000 	.word	0x42420000
 8002b08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	4b9e      	ldr	r3, [pc, #632]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e9      	bne.n	8002aec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a6 	beq.w	8002c72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b2a:	4b97      	ldr	r3, [pc, #604]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b94      	ldr	r3, [pc, #592]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a93      	ldr	r2, [pc, #588]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b40:	61d3      	str	r3, [r2, #28]
 8002b42:	4b91      	ldr	r3, [pc, #580]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	4b8e      	ldr	r3, [pc, #568]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5e:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a8a      	ldr	r2, [pc, #552]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6a:	f7ff f999 	bl	8001ea0 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7ff f995 	bl	8001ea0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b64      	cmp	r3, #100	; 0x64
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0fd      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCC_OscConfig+0x4f8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x312>
 8002b98:	4b7b      	ldr	r3, [pc, #492]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a7a      	ldr	r2, [pc, #488]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	e02d      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x334>
 8002bae:	4b76      	ldr	r3, [pc, #472]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	4a75      	ldr	r2, [pc, #468]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6213      	str	r3, [r2, #32]
 8002bba:	4b73      	ldr	r3, [pc, #460]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a72      	ldr	r2, [pc, #456]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	e01c      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d10c      	bne.n	8002bea <HAL_RCC_OscConfig+0x356>
 8002bd0:	4b6d      	ldr	r3, [pc, #436]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a6c      	ldr	r2, [pc, #432]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6213      	str	r3, [r2, #32]
 8002bdc:	4b6a      	ldr	r3, [pc, #424]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4a69      	ldr	r2, [pc, #420]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	e00b      	b.n	8002c02 <HAL_RCC_OscConfig+0x36e>
 8002bea:	4b67      	ldr	r3, [pc, #412]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	4a66      	ldr	r2, [pc, #408]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	6213      	str	r3, [r2, #32]
 8002bf6:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	4a63      	ldr	r2, [pc, #396]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d015      	beq.n	8002c36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7ff f949 	bl	8001ea0 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7ff f945 	bl	8001ea0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e0ab      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	4b57      	ldr	r3, [pc, #348]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ee      	beq.n	8002c12 <HAL_RCC_OscConfig+0x37e>
 8002c34:	e014      	b.n	8002c60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7ff f933 	bl	8001ea0 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7ff f92f 	bl	8001ea0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e095      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ee      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	4a47      	ldr	r2, [pc, #284]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8081 	beq.w	8002d7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7c:	4b42      	ldr	r3, [pc, #264]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d061      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d146      	bne.n	8002d1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b3f      	ldr	r3, [pc, #252]	; (8002d90 <HAL_RCC_OscConfig+0x4fc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7ff f903 	bl	8001ea0 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7ff f8ff 	bl	8001ea0 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e067      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d108      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	492d      	ldr	r1, [pc, #180]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a19      	ldr	r1, [r3, #32]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	4927      	ldr	r1, [pc, #156]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x4fc>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf6:	f7ff f8d3 	bl	8001ea0 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7ff f8cf 	bl	8001ea0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e037      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x46a>
 8002d1c:	e02f      	b.n	8002d7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <HAL_RCC_OscConfig+0x4fc>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7ff f8bc 	bl	8001ea0 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7ff f8b8 	bl	8001ea0 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e020      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x498>
 8002d4a:	e018      	b.n	8002d7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e013      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	42420060 	.word	0x42420060

08002d94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0d0      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b67      	ldr	r3, [pc, #412]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4965      	ldr	r1, [pc, #404]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0b8      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df0:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e08:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b50      	ldr	r3, [pc, #320]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	494d      	ldr	r1, [pc, #308]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d040      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b47      	ldr	r3, [pc, #284]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d115      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e07f      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e073      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e06b      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f023 0203 	bic.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4936      	ldr	r1, [pc, #216]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e84:	f7ff f80c 	bl	8001ea0 <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8c:	f7ff f808 	bl	8001ea0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e053      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 020c 	and.w	r2, r3, #12
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1eb      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d210      	bcs.n	8002ee4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 0207 	bic.w	r2, r3, #7
 8002eca:	4922      	ldr	r1, [pc, #136]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e032      	b.n	8002f4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4916      	ldr	r1, [pc, #88]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	490e      	ldr	r1, [pc, #56]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f22:	f000 f821 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	490a      	ldr	r1, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x1c8>)
 8002f34:	5ccb      	ldrb	r3, [r1, r3]
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1cc>)
 8002f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x1d0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe ff6a 	bl	8001e1c <HAL_InitTick>

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	08003f3c 	.word	0x08003f3c
 8002f60:	20000000 	.word	0x20000000
 8002f64:	20000004 	.word	0x20000004

08002f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b490      	push	{r4, r7}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f70:	1d3c      	adds	r4, r7, #4
 8002f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f78:	f240 2301 	movw	r3, #513	; 0x201
 8002f7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f92:	4b22      	ldr	r3, [pc, #136]	; (800301c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d002      	beq.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d003      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x46>
 8002fa6:	e02d      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002faa:	623b      	str	r3, [r7, #32]
      break;
 8002fac:	e02d      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	0c9b      	lsrs	r3, r3, #18
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fba:	4413      	add	r3, r2
 8002fbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0c5b      	lsrs	r3, r3, #17
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fda:	4413      	add	r3, r2
 8002fdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fe0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe6:	fb02 f203 	mul.w	r2, r2, r3
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e004      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	623b      	str	r3, [r7, #32]
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003006:	623b      	str	r3, [r7, #32]
      break;
 8003008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300a:	6a3b      	ldr	r3, [r7, #32]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bc90      	pop	{r4, r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	08003ecc 	.word	0x08003ecc
 800301c:	40021000 	.word	0x40021000
 8003020:	003d0900 	.word	0x003d0900
 8003024:	007a1200 	.word	0x007a1200

08003028 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <RCC_Delay+0x34>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <RCC_Delay+0x38>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	0a5b      	lsrs	r3, r3, #9
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003044:	bf00      	nop
  }
  while (Delay --);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1e5a      	subs	r2, r3, #1
 800304a:	60fa      	str	r2, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f9      	bne.n	8003044 <RCC_Delay+0x1c>
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	20000000 	.word	0x20000000
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d07d      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003080:	2300      	movs	r3, #0
 8003082:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003084:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	4a4b      	ldr	r2, [pc, #300]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	61d3      	str	r3, [r2, #28]
 800309c:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d118      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b8:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a42      	ldr	r2, [pc, #264]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c4:	f7fe feec 	bl	8001ea0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	e008      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030cc:	f7fe fee8 	bl	8001ea0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e06d      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d02e      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	429a      	cmp	r2, r3
 8003106:	d027      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003108:	4b2e      	ldr	r3, [pc, #184]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003110:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003112:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800311e:	4a29      	ldr	r2, [pc, #164]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d014      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fe feb7 	bl	8001ea0 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fe feb3 	bl	8001ea0 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e036      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ee      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003158:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4917      	ldr	r1, [pc, #92]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	4313      	orrs	r3, r2
 8003168:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800317a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	490b      	ldr	r1, [pc, #44]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4904      	ldr	r1, [pc, #16]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40007000 	.word	0x40007000
 80031cc:	42420440 	.word	0x42420440

080031d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e041      	b.n	8003266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe fd0e 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 fac2 	bl	8003798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e041      	b.n	8003304 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f839 	bl	800330c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3304      	adds	r3, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f000 fa73 	bl	8003798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
	...

08003320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_TIM_PWM_Start+0x24>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e022      	b.n	800338a <HAL_TIM_PWM_Start+0x6a>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d109      	bne.n	800335e <HAL_TIM_PWM_Start+0x3e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e015      	b.n	800338a <HAL_TIM_PWM_Start+0x6a>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d109      	bne.n	8003378 <HAL_TIM_PWM_Start+0x58>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e008      	b.n	800338a <HAL_TIM_PWM_Start+0x6a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e072      	b.n	8003478 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <HAL_TIM_PWM_Start+0x82>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a0:	e013      	b.n	80033ca <HAL_TIM_PWM_Start+0xaa>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d104      	bne.n	80033b2 <HAL_TIM_PWM_Start+0x92>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b0:	e00b      	b.n	80033ca <HAL_TIM_PWM_Start+0xaa>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_PWM_Start+0xa2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c0:	e003      	b.n	80033ca <HAL_TIM_PWM_Start+0xaa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2201      	movs	r2, #1
 80033d0:	6839      	ldr	r1, [r7, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fc9c 	bl	8003d10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a28      	ldr	r2, [pc, #160]	; (8003480 <HAL_TIM_PWM_Start+0x160>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_TIM_PWM_Start+0xcc>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a27      	ldr	r2, [pc, #156]	; (8003484 <HAL_TIM_PWM_Start+0x164>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_TIM_PWM_Start+0xd0>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <HAL_TIM_PWM_Start+0xd2>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <HAL_TIM_PWM_Start+0x160>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d018      	beq.n	8003442 <HAL_TIM_PWM_Start+0x122>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_TIM_PWM_Start+0x164>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_TIM_PWM_Start+0x122>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003422:	d00e      	beq.n	8003442 <HAL_TIM_PWM_Start+0x122>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a17      	ldr	r2, [pc, #92]	; (8003488 <HAL_TIM_PWM_Start+0x168>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_TIM_PWM_Start+0x122>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a16      	ldr	r2, [pc, #88]	; (800348c <HAL_TIM_PWM_Start+0x16c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_TIM_PWM_Start+0x122>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a14      	ldr	r2, [pc, #80]	; (8003490 <HAL_TIM_PWM_Start+0x170>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d111      	bne.n	8003466 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b06      	cmp	r3, #6
 8003452:	d010      	beq.n	8003476 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003464:	e007      	b.n	8003476 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40013400 	.word	0x40013400
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800
 8003490:	40000c00 	.word	0x40000c00

08003494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0ac      	b.n	8003608 <HAL_TIM_PWM_ConfigChannel+0x174>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	f200 809f 	bhi.w	80035fc <HAL_TIM_PWM_ConfigChannel+0x168>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	080035fd 	.word	0x080035fd
 80034cc:	080035fd 	.word	0x080035fd
 80034d0:	080035fd 	.word	0x080035fd
 80034d4:	08003539 	.word	0x08003539
 80034d8:	080035fd 	.word	0x080035fd
 80034dc:	080035fd 	.word	0x080035fd
 80034e0:	080035fd 	.word	0x080035fd
 80034e4:	0800357b 	.word	0x0800357b
 80034e8:	080035fd 	.word	0x080035fd
 80034ec:	080035fd 	.word	0x080035fd
 80034f0:	080035fd 	.word	0x080035fd
 80034f4:	080035bb 	.word	0x080035bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f9c4 	bl	800388c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0208 	orr.w	r2, r2, #8
 8003512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6999      	ldr	r1, [r3, #24]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	619a      	str	r2, [r3, #24]
      break;
 8003536:	e062      	b.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fa14 	bl	800396c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6999      	ldr	r1, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	021a      	lsls	r2, r3, #8
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	619a      	str	r2, [r3, #24]
      break;
 8003578:	e041      	b.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fa67 	bl	8003a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0208 	orr.w	r2, r2, #8
 8003594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0204 	bic.w	r2, r2, #4
 80035a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69d9      	ldr	r1, [r3, #28]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	61da      	str	r2, [r3, #28]
      break;
 80035b8:	e021      	b.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fabb 	bl	8003b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69d9      	ldr	r1, [r3, #28]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	021a      	lsls	r2, r3, #8
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	61da      	str	r2, [r3, #28]
      break;
 80035fa:	e000      	b.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80035fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIM_ConfigClockSource+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e0b3      	b.n	8003790 <HAL_TIM_ConfigClockSource+0x180>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003660:	d03e      	beq.n	80036e0 <HAL_TIM_ConfigClockSource+0xd0>
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003666:	f200 8087 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x168>
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	f000 8085 	beq.w	800377c <HAL_TIM_ConfigClockSource+0x16c>
 8003672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003676:	d87f      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x168>
 8003678:	2b70      	cmp	r3, #112	; 0x70
 800367a:	d01a      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0xa2>
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d87b      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x168>
 8003680:	2b60      	cmp	r3, #96	; 0x60
 8003682:	d050      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x116>
 8003684:	2b60      	cmp	r3, #96	; 0x60
 8003686:	d877      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x168>
 8003688:	2b50      	cmp	r3, #80	; 0x50
 800368a:	d03c      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0xf6>
 800368c:	2b50      	cmp	r3, #80	; 0x50
 800368e:	d873      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x168>
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d058      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x136>
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d86f      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x168>
 8003698:	2b30      	cmp	r3, #48	; 0x30
 800369a:	d064      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x156>
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d86b      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x168>
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d060      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x156>
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d867      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x168>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d05c      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x156>
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d05a      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036b0:	e062      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6899      	ldr	r1, [r3, #8]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f000 fb06 	bl	8003cd2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	609a      	str	r2, [r3, #8]
      break;
 80036de:	e04e      	b.n	800377e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f000 faef 	bl	8003cd2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003702:	609a      	str	r2, [r3, #8]
      break;
 8003704:	e03b      	b.n	800377e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	461a      	mov	r2, r3
 8003714:	f000 fa66 	bl	8003be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2150      	movs	r1, #80	; 0x50
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fabd 	bl	8003c9e <TIM_ITRx_SetConfig>
      break;
 8003724:	e02b      	b.n	800377e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	461a      	mov	r2, r3
 8003734:	f000 fa84 	bl	8003c40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2160      	movs	r1, #96	; 0x60
 800373e:	4618      	mov	r0, r3
 8003740:	f000 faad 	bl	8003c9e <TIM_ITRx_SetConfig>
      break;
 8003744:	e01b      	b.n	800377e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	461a      	mov	r2, r3
 8003754:	f000 fa46 	bl	8003be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2140      	movs	r1, #64	; 0x40
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fa9d 	bl	8003c9e <TIM_ITRx_SetConfig>
      break;
 8003764:	e00b      	b.n	800377e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f000 fa94 	bl	8003c9e <TIM_ITRx_SetConfig>
        break;
 8003776:	e002      	b.n	800377e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003778:	bf00      	nop
 800377a:	e000      	b.n	800377e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800377c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a33      	ldr	r2, [pc, #204]	; (8003878 <TIM_Base_SetConfig+0xe0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a32      	ldr	r2, [pc, #200]	; (800387c <TIM_Base_SetConfig+0xe4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00f      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037be:	d00b      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a2f      	ldr	r2, [pc, #188]	; (8003880 <TIM_Base_SetConfig+0xe8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a2e      	ldr	r2, [pc, #184]	; (8003884 <TIM_Base_SetConfig+0xec>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a2d      	ldr	r2, [pc, #180]	; (8003888 <TIM_Base_SetConfig+0xf0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d108      	bne.n	80037ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a22      	ldr	r2, [pc, #136]	; (8003878 <TIM_Base_SetConfig+0xe0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <TIM_Base_SetConfig+0x82>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a21      	ldr	r2, [pc, #132]	; (800387c <TIM_Base_SetConfig+0xe4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00f      	beq.n	800381a <TIM_Base_SetConfig+0x82>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003800:	d00b      	beq.n	800381a <TIM_Base_SetConfig+0x82>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <TIM_Base_SetConfig+0xe8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d007      	beq.n	800381a <TIM_Base_SetConfig+0x82>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <TIM_Base_SetConfig+0xec>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d003      	beq.n	800381a <TIM_Base_SetConfig+0x82>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1c      	ldr	r2, [pc, #112]	; (8003888 <TIM_Base_SetConfig+0xf0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d108      	bne.n	800382c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <TIM_Base_SetConfig+0xe0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_Base_SetConfig+0xc8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a08      	ldr	r2, [pc, #32]	; (800387c <TIM_Base_SetConfig+0xe4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	615a      	str	r2, [r3, #20]
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40013400 	.word	0x40013400
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00

0800388c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0201 	bic.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 0302 	bic.w	r3, r3, #2
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a20      	ldr	r2, [pc, #128]	; (8003964 <TIM_OC1_SetConfig+0xd8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_OC1_SetConfig+0x64>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <TIM_OC1_SetConfig+0xdc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d10c      	bne.n	800390a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f023 0308 	bic.w	r3, r3, #8
 80038f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <TIM_OC1_SetConfig+0xd8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_OC1_SetConfig+0x8e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <TIM_OC1_SetConfig+0xdc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d111      	bne.n	800393e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	621a      	str	r2, [r3, #32]
}
 8003958:	bf00      	nop
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40013400 	.word	0x40013400

0800396c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0210 	bic.w	r2, r3, #16
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0320 	bic.w	r3, r3, #32
 80039b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a21      	ldr	r2, [pc, #132]	; (8003a4c <TIM_OC2_SetConfig+0xe0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC2_SetConfig+0x68>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a20      	ldr	r2, [pc, #128]	; (8003a50 <TIM_OC2_SetConfig+0xe4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10d      	bne.n	80039f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <TIM_OC2_SetConfig+0xe0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_OC2_SetConfig+0x94>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <TIM_OC2_SetConfig+0xe4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d113      	bne.n	8003a28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40013400 	.word	0x40013400

08003a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <TIM_OC3_SetConfig+0xe0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_OC3_SetConfig+0x66>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a20      	ldr	r2, [pc, #128]	; (8003b38 <TIM_OC3_SetConfig+0xe4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10d      	bne.n	8003ad6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <TIM_OC3_SetConfig+0xe0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_OC3_SetConfig+0x92>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <TIM_OC3_SetConfig+0xe4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d113      	bne.n	8003b0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	621a      	str	r2, [r3, #32]
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40013400 	.word	0x40013400

08003b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <TIM_OC4_SetConfig+0xa0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_OC4_SetConfig+0x68>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <TIM_OC4_SetConfig+0xa4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d109      	bne.n	8003bb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40013400 	.word	0x40013400

08003be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f023 0201 	bic.w	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 030a 	bic.w	r3, r3, #10
 8003c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f023 0210 	bic.w	r2, r3, #16
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	031b      	lsls	r3, r3, #12
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	621a      	str	r2, [r3, #32]
}
 8003c94:	bf00      	nop
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f043 0307 	orr.w	r3, r3, #7
 8003cc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	609a      	str	r2, [r3, #8]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b087      	sub	sp, #28
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	021a      	lsls	r2, r3, #8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	609a      	str	r2, [r3, #8]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	2201      	movs	r2, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	401a      	ands	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e050      	b.n	8003e12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d00e      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10c      	bne.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40013400 	.word	0x40013400
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00

08003e30 <__libc_init_array>:
 8003e30:	b570      	push	{r4, r5, r6, lr}
 8003e32:	2600      	movs	r6, #0
 8003e34:	4d0c      	ldr	r5, [pc, #48]	; (8003e68 <__libc_init_array+0x38>)
 8003e36:	4c0d      	ldr	r4, [pc, #52]	; (8003e6c <__libc_init_array+0x3c>)
 8003e38:	1b64      	subs	r4, r4, r5
 8003e3a:	10a4      	asrs	r4, r4, #2
 8003e3c:	42a6      	cmp	r6, r4
 8003e3e:	d109      	bne.n	8003e54 <__libc_init_array+0x24>
 8003e40:	f000 f822 	bl	8003e88 <_init>
 8003e44:	2600      	movs	r6, #0
 8003e46:	4d0a      	ldr	r5, [pc, #40]	; (8003e70 <__libc_init_array+0x40>)
 8003e48:	4c0a      	ldr	r4, [pc, #40]	; (8003e74 <__libc_init_array+0x44>)
 8003e4a:	1b64      	subs	r4, r4, r5
 8003e4c:	10a4      	asrs	r4, r4, #2
 8003e4e:	42a6      	cmp	r6, r4
 8003e50:	d105      	bne.n	8003e5e <__libc_init_array+0x2e>
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e58:	4798      	blx	r3
 8003e5a:	3601      	adds	r6, #1
 8003e5c:	e7ee      	b.n	8003e3c <__libc_init_array+0xc>
 8003e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e62:	4798      	blx	r3
 8003e64:	3601      	adds	r6, #1
 8003e66:	e7f2      	b.n	8003e4e <__libc_init_array+0x1e>
 8003e68:	08003f4c 	.word	0x08003f4c
 8003e6c:	08003f4c 	.word	0x08003f4c
 8003e70:	08003f4c 	.word	0x08003f4c
 8003e74:	08003f50 	.word	0x08003f50

08003e78 <memset>:
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4402      	add	r2, r0
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d100      	bne.n	8003e82 <memset+0xa>
 8003e80:	4770      	bx	lr
 8003e82:	f803 1b01 	strb.w	r1, [r3], #1
 8003e86:	e7f9      	b.n	8003e7c <memset+0x4>

08003e88 <_init>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	bf00      	nop
 8003e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8e:	bc08      	pop	{r3}
 8003e90:	469e      	mov	lr, r3
 8003e92:	4770      	bx	lr

08003e94 <_fini>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	bf00      	nop
 8003e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	469e      	mov	lr, r3
 8003e9e:	4770      	bx	lr
